; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\ble_stack_handler.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ble_stack_handler.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\ble_stack_handler.crf ..\..\..\Software\Source\ble_lib\ble_stack_handler.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  softdevice_assertion_handler PROC
;;;35      */
;;;36     static void softdevice_assertion_handler(uint32_t pc, uint16_t line_num, const uint8_t * file_name)
000000  b570              PUSH     {r4-r6,lr}
;;;37     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;38         UNUSED_PARAMETER(pc);
;;;39         assert_nrf_callback(line_num, file_name);
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       assert_nrf_callback
;;;40     }
000010  bd70              POP      {r4-r6,pc}
;;;41     
                          ENDP

                  ble_stack_handler_init PROC
;;;42     
;;;43     uint32_t ble_stack_handler_init(nrf_clock_lfclksrc_t          clock_source,
000012  b5ff              PUSH     {r0-r7,lr}
;;;44                                     void *                        p_evt_buffer,
;;;45                                     uint16_t                      evt_buffer_size,
;;;46                                     ble_stack_evt_handler_t       evt_handler,
;;;47                                     ble_stack_evt_schedule_func_t evt_schedule_func)
;;;48     {
000014  b081              SUB      sp,sp,#4
000016  460c              MOV      r4,r1
000018  4616              MOV      r6,r2
00001a  461f              MOV      r7,r3
;;;49         uint32_t err_code;
;;;50     
;;;51         // Check that buffer is correctly aligned
;;;52         if (!is_word_aligned(p_evt_buffer))
00001c  4620              MOV      r0,r4
00001e  0781              LSLS     r1,r0,#30
000020  0f89              LSRS     r1,r1,#30
000022  d101              BNE      |L1.40|
000024  2101              MOVS     r1,#1
000026  e000              B        |L1.42|
                  |L1.40|
000028  2100              MOVS     r1,#0
                  |L1.42|
00002a  2900              CMP      r1,#0
00002c  d102              BNE      |L1.52|
;;;53         {
;;;54             return NRF_ERROR_INVALID_PARAM;
00002e  2007              MOVS     r0,#7
                  |L1.48|
;;;55         }
;;;56         // Check that buffer is not NULL    
;;;57         if (p_evt_buffer == NULL)
;;;58         {
;;;59             return NRF_ERROR_INVALID_PARAM;
;;;60         }    
;;;61         
;;;62         // Save configuration
;;;63         m_evt_buffer        = (uint8_t *)p_evt_buffer;
;;;64         m_evt_buffer_size   = evt_buffer_size;
;;;65         m_evt_handler       = evt_handler;
;;;66         m_evt_schedule_func = evt_schedule_func;
;;;67     
;;;68         // Initialize SoftDevice
;;;69         err_code = sd_softdevice_enable(clock_source, softdevice_assertion_handler);
;;;70         if (err_code != NRF_SUCCESS)
;;;71         {
;;;72             return err_code;
;;;73         }
;;;74     
;;;75         // Enable BLE event interrupt (interrupt priority has already been set by the stack)
;;;76         return sd_nvic_EnableIRQ(SWI2_IRQn);
;;;77     }
000030  b005              ADD      sp,sp,#0x14
000032  bdf0              POP      {r4-r7,pc}
                  |L1.52|
000034  2c00              CMP      r4,#0                 ;57
000036  d101              BNE      |L1.60|
000038  2007              MOVS     r0,#7                 ;59
00003a  e7f9              B        |L1.48|
                  |L1.60|
00003c  4825              LDR      r0,|L1.212|
00003e  6004              STR      r4,[r0,#0]            ;63  ; m_evt_buffer
000040  4825              LDR      r0,|L1.216|
000042  8006              STRH     r6,[r0,#0]            ;64
000044  4825              LDR      r0,|L1.220|
000046  6007              STR      r7,[r0,#0]            ;65  ; m_evt_handler
000048  4925              LDR      r1,|L1.224|
00004a  980a              LDR      r0,[sp,#0x28]         ;66
00004c  6008              STR      r0,[r1,#0]            ;66  ; m_evt_schedule_func
00004e  4925              LDR      r1,|L1.228|
000050  9801              LDR      r0,[sp,#4]            ;69
000052  df10              SVC      #0x10                 ;69
000054  4605              MOV      r5,r0                 ;69
000056  2d00              CMP      r5,#0                 ;70
000058  d001              BEQ      |L1.94|
00005a  4628              MOV      r0,r5                 ;72
00005c  e7e8              B        |L1.48|
                  |L1.94|
00005e  2016              MOVS     r0,#0x16              ;76
000060  df23              SVC      #0x23                 ;76
000062  e7e5              B        |L1.48|
;;;78     
                          ENDP

                  intern_ble_stack_events_execute PROC
;;;79     
;;;80     void intern_ble_stack_events_execute(void)
000064  b538              PUSH     {r3-r5,lr}
;;;81     {
;;;82         for (;;)
000066  bf00              NOP      
                  |L1.104|
;;;83         {
;;;84             uint32_t err_code;
;;;85             uint16_t evt_len = m_evt_buffer_size;
000068  481b              LDR      r0,|L1.216|
00006a  8800              LDRH     r0,[r0,#0]  ; m_evt_buffer_size
00006c  9000              STR      r0,[sp,#0]
;;;86     
;;;87             // Pull event from stack
;;;88             err_code = sd_ble_evt_get(m_evt_buffer, &evt_len);
00006e  4669              MOV      r1,sp
000070  4818              LDR      r0,|L1.212|
000072  6800              LDR      r0,[r0,#0]  ; m_evt_buffer
000074  df50              SVC      #0x50
000076  4604              MOV      r4,r0
;;;89             if (err_code == NRF_ERROR_NOT_FOUND)
000078  2c05              CMP      r4,#5
00007a  d100              BNE      |L1.126|
;;;90             {
;;;91                 break;
00007c  e00e              B        |L1.156|
                  |L1.126|
;;;92             }
;;;93             else if (err_code != NRF_SUCCESS)
00007e  2c00              CMP      r4,#0
000080  d006              BEQ      |L1.144|
;;;94             {
;;;95                 APP_ERROR_HANDLER(err_code);
000082  bf00              NOP      
000084  a218              ADR      r2,|L1.232|
000086  215f              MOVS     r1,#0x5f
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       app_error_handler
00008e  bf00              NOP      
                  |L1.144|
;;;96             }
;;;97             
;;;98             // Call application's BLE stack event handler
;;;99             m_evt_handler((ble_evt_t *)m_evt_buffer);
000090  4810              LDR      r0,|L1.212|
000092  6800              LDR      r0,[r0,#0]  ; m_evt_buffer
000094  4911              LDR      r1,|L1.220|
000096  6809              LDR      r1,[r1,#0]  ; m_evt_handler
000098  4788              BLX      r1
;;;100        }
00009a  e7e5              B        |L1.104|
                  |L1.156|
00009c  bf00              NOP                            ;91
;;;101    }
00009e  bd38              POP      {r3-r5,pc}
;;;102    
                          ENDP

                  SWI2_IRQHandler PROC
;;;107     */
;;;108    void SWI2_IRQHandler(void)
0000a0  b570              PUSH     {r4-r6,lr}
;;;109    {
;;;110        if (m_evt_schedule_func != NULL)
0000a2  480f              LDR      r0,|L1.224|
0000a4  6800              LDR      r0,[r0,#0]  ; m_evt_schedule_func
0000a6  2800              CMP      r0,#0
0000a8  d010              BEQ      |L1.204|
;;;111        {
;;;112            uint32_t err_code = m_evt_schedule_func();
0000aa  480d              LDR      r0,|L1.224|
0000ac  6800              LDR      r0,[r0,#0]  ; m_evt_schedule_func
0000ae  4780              BLX      r0
0000b0  4604              MOV      r4,r0
;;;113            APP_ERROR_CHECK(err_code);
0000b2  bf00              NOP      
0000b4  4625              MOV      r5,r4
0000b6  2d00              CMP      r5,#0
0000b8  d006              BEQ      |L1.200|
0000ba  bf00              NOP      
0000bc  a20a              ADR      r2,|L1.232|
0000be  2171              MOVS     r1,#0x71
0000c0  4628              MOV      r0,r5
0000c2  f7fffffe          BL       app_error_handler
0000c6  bf00              NOP      
                  |L1.200|
0000c8  bf00              NOP      
;;;114        }
0000ca  e001              B        |L1.208|
                  |L1.204|
;;;115        else
;;;116        {
;;;117            intern_ble_stack_events_execute();
0000cc  f7fffffe          BL       intern_ble_stack_events_execute
                  |L1.208|
;;;118        }
;;;119    }
0000d0  bd70              POP      {r4-r6,pc}
                          ENDP

0000d2  0000              DCW      0x0000
                  |L1.212|
                          DCD      m_evt_buffer
                  |L1.216|
                          DCD      m_evt_buffer_size
                  |L1.220|
                          DCD      m_evt_handler
                  |L1.224|
                          DCD      m_evt_schedule_func
                  |L1.228|
                          DCD      softdevice_assertion_handler
                  |L1.232|
0000e8  2e2e5c2e          DCB      "..\\..\\..\\Software\\Source\\ble_lib\\ble_stack_handle"
0000ec  2e5c2e2e
0000f0  5c536f66
0000f4  74776172
0000f8  655c536f
0000fc  75726365
000100  5c626c65
000104  5f6c6962
000108  5c626c65
00010c  5f737461
000110  636b5f68
000114  616e646c
000118  65      
000119  722e6300          DCB      "r.c",0
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  m_evt_handler
                          DCD      0x00000000
                  m_evt_schedule_func
                          DCD      0x00000000
                  m_evt_buffer
                          DCD      0x00000000
                  m_evt_buffer_size
00000c  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\ble_lib\\ble_stack_handler.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_ble_stack_handler_c_a000a69f____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_ble_stack_handler_c_a000a69f____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_ble_stack_handler_c_a000a69f____REVSH|
#line 130
|__asm___19_ble_stack_handler_c_a000a69f____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
