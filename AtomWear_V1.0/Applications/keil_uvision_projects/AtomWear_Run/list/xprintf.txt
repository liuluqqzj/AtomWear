; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\xprintf.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\xprintf.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\xprintf.crf ..\..\..\Software\Source\xprintf\xprintf.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  xputc PROC
;;;27     
;;;28     void xputc (char c)
000000  b510              PUSH     {r4,lr}
;;;29     {
000002  4604              MOV      r4,r0
;;;30     	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
000004  bf00              NOP      
;;;31     
;;;32     	if (outptr) {
000006  48e3              LDR      r0,|L1.916|
000008  6800              LDR      r0,[r0,#0]  ; outptr
00000a  2800              CMP      r0,#0
00000c  d008              BEQ      |L1.32|
;;;33     		*outptr++ = (unsigned char)c;
00000e  48e1              LDR      r0,|L1.916|
000010  6800              LDR      r0,[r0,#0]  ; outptr
000012  7004              STRB     r4,[r0,#0]
000014  48df              LDR      r0,|L1.916|
000016  6800              LDR      r0,[r0,#0]  ; outptr
000018  1c40              ADDS     r0,r0,#1
00001a  49de              LDR      r1,|L1.916|
00001c  6008              STR      r0,[r1,#0]  ; outptr
                  |L1.30|
;;;34     		return;
;;;35     	}
;;;36     
;;;37             //xUARTCharPut(xUART1_BASE, (unsigned char)c);
;;;38             simple_uart_put( c);
;;;39     	//if (xfunc_out) xfunc_out((unsigned char)c);
;;;40     }
00001e  bd10              POP      {r4,pc}
                  |L1.32|
000020  4620              MOV      r0,r4                 ;38
000022  f7fffffe          BL       simple_uart_put
000026  bf00              NOP      
000028  e7f9              B        |L1.30|
;;;41     
                          ENDP

                  xputs PROC
;;;47     
;;;48     void xputs (					/* Put a string to the default device */
00002a  b510              PUSH     {r4,lr}
;;;49     	const char* str				/* Pointer to the string */
;;;50     )
;;;51     {
00002c  4604              MOV      r4,r0
;;;52     	while (*str)
00002e  e003              B        |L1.56|
                  |L1.48|
;;;53     		xputc(*str++);
000030  7820              LDRB     r0,[r4,#0]
000032  1c64              ADDS     r4,r4,#1
000034  f7fffffe          BL       xputc
                  |L1.56|
000038  7820              LDRB     r0,[r4,#0]            ;52
00003a  2800              CMP      r0,#0                 ;52
00003c  d1f8              BNE      |L1.48|
;;;54     }
00003e  bd10              POP      {r4,pc}
;;;55     
                          ENDP

                  xfputs PROC
;;;56     
;;;57     void xfputs (					/* Put a string to the specified device */
000040  b570              PUSH     {r4-r6,lr}
;;;58     	void(*func)(unsigned char),	/* Pointer to the output function */
;;;59     	const char*	str				/* Pointer to the string */
;;;60     )
;;;61     {
000042  4605              MOV      r5,r0
000044  460c              MOV      r4,r1
;;;62     	void (*pf)(unsigned char);
;;;63     
;;;64     
;;;65     	pf = xfunc_out;		/* Save current output device */
000046  48d4              LDR      r0,|L1.920|
000048  6806              LDR      r6,[r0,#0]  ; xfunc_out
;;;66     	xfunc_out = func;	/* Switch output to specified device */
00004a  6005              STR      r5,[r0,#0]  ; xfunc_out
;;;67     	while (*str)		/* Put the string */
00004c  e003              B        |L1.86|
                  |L1.78|
;;;68     		xputc(*str++);
00004e  7820              LDRB     r0,[r4,#0]
000050  1c64              ADDS     r4,r4,#1
000052  f7fffffe          BL       xputc
                  |L1.86|
000056  7820              LDRB     r0,[r4,#0]            ;67
000058  2800              CMP      r0,#0                 ;67
00005a  d1f8              BNE      |L1.78|
;;;69     	xfunc_out = pf;		/* Restore output device */
00005c  48ce              LDR      r0,|L1.920|
00005e  6006              STR      r6,[r0,#0]  ; xfunc_out
;;;70     }
000060  bd70              POP      {r4-r6,pc}
;;;71     
                          ENDP

                  xvprintf PROC
;;;91     static
;;;92     void xvprintf (
000062  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;93     	const char*	fmt,	/* Pointer to the format string */
;;;94     	va_list arp			/* Pointer to arguments */
;;;95     )
;;;96     {
000064  b08b              SUB      sp,sp,#0x2c
000066  4605              MOV      r5,r0
;;;97     	unsigned int r, i, j, w, f;
;;;98     	unsigned long v;
;;;99     	char s[16], c, d, *p;
;;;100    
;;;101    
;;;102    	for (;;) {
000068  bf00              NOP      
                  |L1.106|
;;;103    		c = *fmt++;					/* Get a char */
00006a  782c              LDRB     r4,[r5,#0]
00006c  1c6d              ADDS     r5,r5,#1
;;;104    		if (!c) break;				/* End of format? */
00006e  2c00              CMP      r4,#0
000070  d100              BNE      |L1.116|
000072  e105              B        |L1.640|
                  |L1.116|
;;;105    		if (c != '%') {				/* Pass through it if not a % sequense */
000074  2c25              CMP      r4,#0x25
000076  d003              BEQ      |L1.128|
;;;106    			xputc(c); continue;
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       xputc
00007e  e7f4              B        |L1.106|
                  |L1.128|
;;;107    		}
;;;108    		f = 0;
000080  2700              MOVS     r7,#0
;;;109    		c = *fmt++;					/* Get first char of the sequense */
000082  782c              LDRB     r4,[r5,#0]
000084  1c6d              ADDS     r5,r5,#1
;;;110    		if (c == '0') {				/* Flag: '0' padded */
000086  2c30              CMP      r4,#0x30
000088  d103              BNE      |L1.146|
;;;111    			f = 1; c = *fmt++;
00008a  2701              MOVS     r7,#1
00008c  782c              LDRB     r4,[r5,#0]
00008e  1c6d              ADDS     r5,r5,#1
000090  e004              B        |L1.156|
                  |L1.146|
;;;112    		} else {
;;;113    			if (c == '-') {			/* Flag: left justified */
000092  2c2d              CMP      r4,#0x2d
000094  d102              BNE      |L1.156|
;;;114    				f = 2; c = *fmt++;
000096  2702              MOVS     r7,#2
000098  782c              LDRB     r4,[r5,#0]
00009a  1c6d              ADDS     r5,r5,#1
                  |L1.156|
;;;115    			}
;;;116    		}
;;;117    		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
00009c  2000              MOVS     r0,#0
00009e  9007              STR      r0,[sp,#0x1c]
0000a0  e007              B        |L1.178|
                  |L1.162|
;;;118    			w = w * 10 + c - '0';
0000a2  210a              MOVS     r1,#0xa
0000a4  9807              LDR      r0,[sp,#0x1c]
0000a6  4348              MULS     r0,r1,r0
0000a8  1900              ADDS     r0,r0,r4
0000aa  3830              SUBS     r0,r0,#0x30
0000ac  9007              STR      r0,[sp,#0x1c]
0000ae  782c              LDRB     r4,[r5,#0]            ;117
0000b0  1c6d              ADDS     r5,r5,#1              ;117
                  |L1.178|
0000b2  2c30              CMP      r4,#0x30              ;117
0000b4  db01              BLT      |L1.186|
0000b6  2c39              CMP      r4,#0x39              ;117
0000b8  ddf3              BLE      |L1.162|
                  |L1.186|
;;;119    		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
0000ba  2c6c              CMP      r4,#0x6c
0000bc  d001              BEQ      |L1.194|
0000be  2c4c              CMP      r4,#0x4c
0000c0  d103              BNE      |L1.202|
                  |L1.194|
;;;120    			f |= 4; c = *fmt++;
0000c2  2004              MOVS     r0,#4
0000c4  4307              ORRS     r7,r7,r0
0000c6  782c              LDRB     r4,[r5,#0]
0000c8  1c6d              ADDS     r5,r5,#1
                  |L1.202|
;;;121    		}
;;;122    		if (!c) break;				/* End of format? */
0000ca  2c00              CMP      r4,#0
0000cc  d100              BNE      |L1.208|
0000ce  e0d7              B        |L1.640|
                  |L1.208|
;;;123    		d = c;
0000d0  4626              MOV      r6,r4
;;;124    		if (d >= 'a') d -= 0x20;
0000d2  2e61              CMP      r6,#0x61
0000d4  db02              BLT      |L1.220|
0000d6  4630              MOV      r0,r6
0000d8  3820              SUBS     r0,r0,#0x20
0000da  b2c6              UXTB     r6,r0
                  |L1.220|
;;;125    		switch (d) {				/* Type is... */
0000dc  2e4f              CMP      r6,#0x4f
0000de  d045              BEQ      |L1.364|
0000e0  dc06              BGT      |L1.240|
0000e2  2e42              CMP      r6,#0x42
0000e4  d03f              BEQ      |L1.358|
0000e6  2e43              CMP      r6,#0x43
0000e8  d035              BEQ      |L1.342|
0000ea  2e44              CMP      r6,#0x44
0000ec  d148              BNE      |L1.384|
0000ee  e040              B        |L1.370|
                  |L1.240|
0000f0  2e53              CMP      r6,#0x53
0000f2  d004              BEQ      |L1.254|
0000f4  2e55              CMP      r6,#0x55
0000f6  d03d              BEQ      |L1.372|
0000f8  2e58              CMP      r6,#0x58
0000fa  d141              BNE      |L1.384|
0000fc  e03d              B        |L1.378|
                  |L1.254|
;;;126    		case 'S' :					/* String */
;;;127    			p = va_arg(arp, char*);
0000fe  980c              LDR      r0,[sp,#0x30]
000100  6800              LDR      r0,[r0,#0]
000102  9001              STR      r0,[sp,#4]
000104  980c              LDR      r0,[sp,#0x30]
000106  1d00              ADDS     r0,r0,#4
000108  900c              STR      r0,[sp,#0x30]
;;;128    			for (j = 0; p[j]; j++) ;
00010a  2000              MOVS     r0,#0
00010c  9008              STR      r0,[sp,#0x20]
00010e  e002              B        |L1.278|
                  |L1.272|
000110  9808              LDR      r0,[sp,#0x20]
000112  1c40              ADDS     r0,r0,#1
000114  9008              STR      r0,[sp,#0x20]
                  |L1.278|
000116  9908              LDR      r1,[sp,#0x20]
000118  9801              LDR      r0,[sp,#4]
00011a  5c40              LDRB     r0,[r0,r1]
00011c  2800              CMP      r0,#0
00011e  d1f7              BNE      |L1.272|
;;;129    			while (!(f & 2) && j++ < w) xputc(' ');
000120  e002              B        |L1.296|
                  |L1.290|
000122  2020              MOVS     r0,#0x20
000124  f7fffffe          BL       xputc
                  |L1.296|
000128  2002              MOVS     r0,#2
00012a  4207              TST      r7,r0
00012c  d105              BNE      |L1.314|
00012e  9808              LDR      r0,[sp,#0x20]
000130  1c41              ADDS     r1,r0,#1
000132  9108              STR      r1,[sp,#0x20]
000134  9907              LDR      r1,[sp,#0x1c]
000136  4288              CMP      r0,r1
000138  d3f3              BCC      |L1.290|
                  |L1.314|
;;;130    			xputs(p);
00013a  9801              LDR      r0,[sp,#4]
00013c  f7fffffe          BL       xputs
;;;131    			while (j++ < w) xputc(' ');
000140  e002              B        |L1.328|
                  |L1.322|
000142  2020              MOVS     r0,#0x20
000144  f7fffffe          BL       xputc
                  |L1.328|
000148  9808              LDR      r0,[sp,#0x20]
00014a  1c41              ADDS     r1,r0,#1
00014c  9108              STR      r1,[sp,#0x20]
00014e  9907              LDR      r1,[sp,#0x1c]
000150  4288              CMP      r0,r1
000152  d3f6              BCC      |L1.322|
;;;132    			continue;
000154  e789              B        |L1.106|
                  |L1.342|
;;;133    		case 'C' :					/* Character */
;;;134    			xputc((char)va_arg(arp, int)); continue;
000156  990c              LDR      r1,[sp,#0x30]
000158  780a              LDRB     r2,[r1,#0]
00015a  1d09              ADDS     r1,r1,#4
00015c  b2d0              UXTB     r0,r2
00015e  910c              STR      r1,[sp,#0x30]
000160  f7fffffe          BL       xputc
000164  e781              B        |L1.106|
                  |L1.358|
;;;135    		case 'B' :					/* Binary */
;;;136    			r = 2; break;
000166  2002              MOVS     r0,#2
000168  900a              STR      r0,[sp,#0x28]
00016a  e00d              B        |L1.392|
                  |L1.364|
;;;137    		case 'O' :					/* Octal */
;;;138    			r = 8; break;
00016c  2008              MOVS     r0,#8
00016e  900a              STR      r0,[sp,#0x28]
000170  e00a              B        |L1.392|
                  |L1.370|
;;;139    		case 'D' :					/* Signed decimal */
;;;140    		case 'U' :					/* Unsigned decimal */
000172  bf00              NOP      
                  |L1.372|
;;;141    			r = 10; break;
000174  200a              MOVS     r0,#0xa
000176  900a              STR      r0,[sp,#0x28]
000178  e006              B        |L1.392|
                  |L1.378|
;;;142    		case 'X' :					/* Hexdecimal */
;;;143    			r = 16; break;
00017a  2010              MOVS     r0,#0x10
00017c  900a              STR      r0,[sp,#0x28]
00017e  e003              B        |L1.392|
                  |L1.384|
;;;144    		default:					/* Unknown type (passthrough) */
;;;145    			xputc(c); continue;
000180  4620              MOV      r0,r4
000182  f7fffffe          BL       xputc
000186  e770              B        |L1.106|
                  |L1.392|
000188  bf00              NOP                            ;136
;;;146    		}
;;;147    
;;;148    		/* Get an argument and put it in numeral */
;;;149    		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
00018a  2004              MOVS     r0,#4
00018c  4207              TST      r7,r0
00018e  d005              BEQ      |L1.412|
000190  980c              LDR      r0,[sp,#0x30]
000192  6800              LDR      r0,[r0,#0]
000194  990c              LDR      r1,[sp,#0x30]
000196  1d09              ADDS     r1,r1,#4
000198  910c              STR      r1,[sp,#0x30]
00019a  e00c              B        |L1.438|
                  |L1.412|
00019c  2e44              CMP      r6,#0x44
00019e  d105              BNE      |L1.428|
0001a0  980c              LDR      r0,[sp,#0x30]
0001a2  6800              LDR      r0,[r0,#0]
0001a4  990c              LDR      r1,[sp,#0x30]
0001a6  1d09              ADDS     r1,r1,#4
0001a8  910c              STR      r1,[sp,#0x30]
0001aa  e004              B        |L1.438|
                  |L1.428|
0001ac  980c              LDR      r0,[sp,#0x30]
0001ae  6800              LDR      r0,[r0,#0]
0001b0  990c              LDR      r1,[sp,#0x30]
0001b2  1d09              ADDS     r1,r1,#4
0001b4  910c              STR      r1,[sp,#0x30]
                  |L1.438|
0001b6  9006              STR      r0,[sp,#0x18]
;;;150    		if (d == 'D' && (v & 0x80000000)) {
0001b8  2e44              CMP      r6,#0x44
0001ba  d108              BNE      |L1.462|
0001bc  9806              LDR      r0,[sp,#0x18]
0001be  0fc0              LSRS     r0,r0,#31
0001c0  07c0              LSLS     r0,r0,#31
0001c2  d004              BEQ      |L1.462|
;;;151    			v = 0 - v;
0001c4  9806              LDR      r0,[sp,#0x18]
0001c6  4240              RSBS     r0,r0,#0
0001c8  9006              STR      r0,[sp,#0x18]
;;;152    			f |= 8;
0001ca  2008              MOVS     r0,#8
0001cc  4307              ORRS     r7,r7,r0
                  |L1.462|
;;;153    		}
;;;154    		i = 0;
0001ce  2000              MOVS     r0,#0
0001d0  9009              STR      r0,[sp,#0x24]
;;;155    		do {
0001d2  bf00              NOP      
                  |L1.468|
;;;156    			d = (char)(v % r); v /= r;
0001d4  990a              LDR      r1,[sp,#0x28]
0001d6  9806              LDR      r0,[sp,#0x18]
0001d8  f7fffffe          BL       __aeabi_uidivmod
0001dc  b2ce              UXTB     r6,r1
0001de  990a              LDR      r1,[sp,#0x28]
0001e0  9806              LDR      r0,[sp,#0x18]
0001e2  f7fffffe          BL       __aeabi_uidivmod
0001e6  9006              STR      r0,[sp,#0x18]
;;;157    			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
0001e8  2e09              CMP      r6,#9
0001ea  dd06              BLE      |L1.506|
0001ec  2c78              CMP      r4,#0x78
0001ee  d101              BNE      |L1.500|
0001f0  2027              MOVS     r0,#0x27
0001f2  e000              B        |L1.502|
                  |L1.500|
0001f4  2007              MOVS     r0,#7
                  |L1.502|
0001f6  1980              ADDS     r0,r0,r6
0001f8  b2c6              UXTB     r6,r0
                  |L1.506|
;;;158    			s[i++] = d + '0';
0001fa  4630              MOV      r0,r6
0001fc  3030              ADDS     r0,r0,#0x30
0001fe  b2c2              UXTB     r2,r0
000200  9809              LDR      r0,[sp,#0x24]
000202  1c41              ADDS     r1,r0,#1
000204  9109              STR      r1,[sp,#0x24]
000206  a902              ADD      r1,sp,#8
000208  540a              STRB     r2,[r1,r0]
;;;159    		} while (v && i < sizeof(s));
00020a  9806              LDR      r0,[sp,#0x18]
00020c  2800              CMP      r0,#0
00020e  d002              BEQ      |L1.534|
000210  9809              LDR      r0,[sp,#0x24]
000212  2810              CMP      r0,#0x10
000214  d3de              BCC      |L1.468|
                  |L1.534|
;;;160    		if (f & 8) s[i++] = '-';
000216  2008              MOVS     r0,#8
000218  4207              TST      r7,r0
00021a  d005              BEQ      |L1.552|
00021c  222d              MOVS     r2,#0x2d
00021e  9809              LDR      r0,[sp,#0x24]
000220  1c41              ADDS     r1,r0,#1
000222  9109              STR      r1,[sp,#0x24]
000224  a902              ADD      r1,sp,#8
000226  540a              STRB     r2,[r1,r0]
                  |L1.552|
;;;161    		j = i; d = (f & 1) ? '0' : ' ';
000228  9809              LDR      r0,[sp,#0x24]
00022a  9008              STR      r0,[sp,#0x20]
00022c  07f8              LSLS     r0,r7,#31
00022e  0fc0              LSRS     r0,r0,#31
000230  d001              BEQ      |L1.566|
000232  2030              MOVS     r0,#0x30
000234  e000              B        |L1.568|
                  |L1.566|
000236  2020              MOVS     r0,#0x20
                  |L1.568|
000238  4606              MOV      r6,r0
;;;162    		while (!(f & 2) && j++ < w) xputc(d);
00023a  e002              B        |L1.578|
                  |L1.572|
00023c  4630              MOV      r0,r6
00023e  f7fffffe          BL       xputc
                  |L1.578|
000242  2002              MOVS     r0,#2
000244  4207              TST      r7,r0
000246  d105              BNE      |L1.596|
000248  9808              LDR      r0,[sp,#0x20]
00024a  1c41              ADDS     r1,r0,#1
00024c  9108              STR      r1,[sp,#0x20]
00024e  9907              LDR      r1,[sp,#0x1c]
000250  4288              CMP      r0,r1
000252  d3f3              BCC      |L1.572|
                  |L1.596|
;;;163    		do xputc(s[--i]); while(i);
000254  bf00              NOP      
                  |L1.598|
000256  9909              LDR      r1,[sp,#0x24]
000258  1e49              SUBS     r1,r1,#1
00025a  aa02              ADD      r2,sp,#8
00025c  9109              STR      r1,[sp,#0x24]
00025e  5c50              LDRB     r0,[r2,r1]
000260  f7fffffe          BL       xputc
000264  9809              LDR      r0,[sp,#0x24]
000266  2800              CMP      r0,#0
000268  d1f5              BNE      |L1.598|
;;;164    		while (j++ < w) xputc(' ');
00026a  e002              B        |L1.626|
                  |L1.620|
00026c  2020              MOVS     r0,#0x20
00026e  f7fffffe          BL       xputc
                  |L1.626|
000272  9808              LDR      r0,[sp,#0x20]
000274  1c41              ADDS     r1,r0,#1
000276  9108              STR      r1,[sp,#0x20]
000278  9907              LDR      r1,[sp,#0x1c]
00027a  4288              CMP      r0,r1
00027c  d3f6              BCC      |L1.620|
00027e  e6f4              B        |L1.106|
                  |L1.640|
000280  bf00              NOP                            ;104
;;;165    	}
;;;166    }
000282  b00d              ADD      sp,sp,#0x34
000284  bdf0              POP      {r4-r7,pc}
;;;167    
                          ENDP

                  xprintf PROC
;;;168    
;;;169    void xprintf (			/* Put a formatted string to the default device */
000286  b40f              PUSH     {r0-r3}
;;;170    	const char*	fmt,	/* Pointer to the format string */
;;;171    	...					/* Optional arguments */
;;;172    )
;;;173    {
000288  b508              PUSH     {r3,lr}
;;;174    	va_list arp;
;;;175    
;;;176    
;;;177    	va_start(arp, fmt);
00028a  a803              ADD      r0,sp,#0xc
00028c  9000              STR      r0,[sp,#0]
;;;178    	xvprintf(fmt, arp);
00028e  9900              LDR      r1,[sp,#0]
000290  9802              LDR      r0,[sp,#8]
000292  f7fffffe          BL       xvprintf
;;;179    	va_end(arp);
000296  2000              MOVS     r0,#0
000298  9000              STR      r0,[sp,#0]
;;;180    }
00029a  b001              ADD      sp,sp,#4
00029c  bc08              POP      {r3}
00029e  b004              ADD      sp,sp,#0x10
0002a0  4718              BX       r3
;;;181    
                          ENDP

                  xsprintf PROC
;;;182    
;;;183    void xsprintf (			/* Put a formatted string to the memory */
0002a2  b40f              PUSH     {r0-r3}
;;;184    	char* buff,			/* Pointer to the output buffer */
;;;185    	const char*	fmt,	/* Pointer to the format string */
;;;186    	...					/* Optional arguments */
;;;187    )
;;;188    {
0002a4  b538              PUSH     {r3-r5,lr}
0002a6  4604              MOV      r4,r0
;;;189    	va_list arp;
;;;190    
;;;191    
;;;192    	outptr = buff;		/* Switch destination for memory */
0002a8  483a              LDR      r0,|L1.916|
0002aa  6004              STR      r4,[r0,#0]  ; outptr
;;;193    
;;;194    	va_start(arp, fmt);
0002ac  a806              ADD      r0,sp,#0x18
0002ae  9000              STR      r0,[sp,#0]
;;;195    	xvprintf(fmt, arp);
0002b0  9900              LDR      r1,[sp,#0]
0002b2  9805              LDR      r0,[sp,#0x14]
0002b4  f7fffffe          BL       xvprintf
;;;196    	va_end(arp);
0002b8  2000              MOVS     r0,#0
0002ba  9000              STR      r0,[sp,#0]
;;;197    
;;;198    	*outptr = 0;		/* Terminate output string with a \0 */
0002bc  4935              LDR      r1,|L1.916|
0002be  6809              LDR      r1,[r1,#0]  ; outptr
0002c0  7008              STRB     r0,[r1,#0]
;;;199    	outptr = 0;			/* Switch destination for device */
0002c2  4934              LDR      r1,|L1.916|
0002c4  6008              STR      r0,[r1,#0]  ; outptr
;;;200    }
0002c6  bc38              POP      {r3-r5}
0002c8  bc08              POP      {r3}
0002ca  b004              ADD      sp,sp,#0x10
0002cc  4718              BX       r3
;;;201    
                          ENDP

                  xfprintf PROC
;;;202    
;;;203    void xfprintf (					/* Put a formatted string to the specified device */
0002ce  b40f              PUSH     {r0-r3}
;;;204    	void(*func)(unsigned char),	/* Pointer to the output function */
;;;205    	const char*	fmt,			/* Pointer to the format string */
;;;206    	...							/* Optional arguments */
;;;207    )
;;;208    {
0002d0  b538              PUSH     {r3-r5,lr}
0002d2  4604              MOV      r4,r0
;;;209    	va_list arp;
;;;210    	void (*pf)(unsigned char);
;;;211    
;;;212    
;;;213    	pf = xfunc_out;		/* Save current output device */
0002d4  4830              LDR      r0,|L1.920|
0002d6  6805              LDR      r5,[r0,#0]  ; xfunc_out
;;;214    	xfunc_out = func;	/* Switch output to specified device */
0002d8  6004              STR      r4,[r0,#0]  ; xfunc_out
;;;215    
;;;216    	va_start(arp, fmt);
0002da  a806              ADD      r0,sp,#0x18
0002dc  9000              STR      r0,[sp,#0]
;;;217    	xvprintf(fmt, arp);
0002de  9900              LDR      r1,[sp,#0]
0002e0  9805              LDR      r0,[sp,#0x14]
0002e2  f7fffffe          BL       xvprintf
;;;218    	va_end(arp);
0002e6  2000              MOVS     r0,#0
0002e8  9000              STR      r0,[sp,#0]
;;;219    
;;;220    	xfunc_out = pf;		/* Restore output device */
0002ea  482b              LDR      r0,|L1.920|
0002ec  6005              STR      r5,[r0,#0]  ; xfunc_out
;;;221    }
0002ee  bc38              POP      {r3-r5}
0002f0  bc08              POP      {r3}
0002f2  b004              ADD      sp,sp,#0x10
0002f4  4718              BX       r3
;;;222    
                          ENDP

                  put_dump PROC
;;;228    
;;;229    void put_dump (
0002f6  b5ff              PUSH     {r0-r7,lr}
;;;230    	const void* buff,		/* Pointer to the array to be dumped */
;;;231    	unsigned long addr,		/* Heading address value */
;;;232    	int len,				/* Number of items to be dumped */
;;;233    	int width				/* Size of the items (DF_CHAR, DF_SHORT, DF_LONG) */
;;;234    )
;;;235    {
0002f8  b083              SUB      sp,sp,#0xc
0002fa  4607              MOV      r7,r0
0002fc  4615              MOV      r5,r2
;;;236    	int i;
;;;237    	const unsigned char *bp;
;;;238    	const unsigned short *sp;
;;;239    	const unsigned long *lp;
;;;240    
;;;241    
;;;242    	xprintf("%08lX ", addr);		/* address */
0002fe  a027              ADR      r0,|L1.924|
000300  9904              LDR      r1,[sp,#0x10]
000302  f7fffffe          BL       xprintf
;;;243    
;;;244    	switch (width) {
000306  9806              LDR      r0,[sp,#0x18]
000308  2801              CMP      r0,#1
00030a  d004              BEQ      |L1.790|
00030c  2802              CMP      r0,#2
00030e  d021              BEQ      |L1.852|
000310  2804              CMP      r0,#4
000312  d138              BNE      |L1.902|
000314  e02b              B        |L1.878|
                  |L1.790|
;;;245    	case DW_CHAR:
;;;246    		bp = buff;
000316  463e              MOV      r6,r7
;;;247    		for (i = 0; i < len; i++)		/* Hexdecimal dump */
000318  2400              MOVS     r4,#0
00031a  e004              B        |L1.806|
                  |L1.796|
;;;248    			xprintf(" %02X", bp[i]);
00031c  5d31              LDRB     r1,[r6,r4]
00031e  a021              ADR      r0,|L1.932|
000320  f7fffffe          BL       xprintf
000324  1c64              ADDS     r4,r4,#1              ;247
                  |L1.806|
000326  42ac              CMP      r4,r5                 ;247
000328  dbf8              BLT      |L1.796|
;;;249    		xputc(' ');
00032a  2020              MOVS     r0,#0x20
00032c  f7fffffe          BL       xputc
;;;250    		for (i = 0; i < len; i++)		/* ASCII dump */
000330  2400              MOVS     r4,#0
000332  e00c              B        |L1.846|
                  |L1.820|
;;;251    			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
000334  5d31              LDRB     r1,[r6,r4]
000336  2920              CMP      r1,#0x20
000338  db04              BLT      |L1.836|
00033a  5d31              LDRB     r1,[r6,r4]
00033c  297e              CMP      r1,#0x7e
00033e  dc01              BGT      |L1.836|
000340  5d31              LDRB     r1,[r6,r4]
000342  e000              B        |L1.838|
                  |L1.836|
000344  212e              MOVS     r1,#0x2e
                  |L1.838|
000346  4608              MOV      r0,r1
000348  f7fffffe          BL       xputc
00034c  1c64              ADDS     r4,r4,#1              ;250
                  |L1.846|
00034e  42ac              CMP      r4,r5                 ;250
000350  dbf0              BLT      |L1.820|
;;;252    		break;
000352  e018              B        |L1.902|
                  |L1.852|
;;;253    	case DW_SHORT:
;;;254    		sp = buff;
000354  9702              STR      r7,[sp,#8]
;;;255    		do								/* Hexdecimal dump */
000356  bf00              NOP      
                  |L1.856|
;;;256    			xprintf(" %04X", *sp++);
000358  9802              LDR      r0,[sp,#8]
00035a  8801              LDRH     r1,[r0,#0]
00035c  1c80              ADDS     r0,r0,#2
00035e  9002              STR      r0,[sp,#8]
000360  a012              ADR      r0,|L1.940|
000362  f7fffffe          BL       xprintf
;;;257    		while (--len);
000366  1e68              SUBS     r0,r5,#1
000368  0005              MOVS     r5,r0
00036a  d1f5              BNE      |L1.856|
;;;258    		break;
00036c  e00b              B        |L1.902|
                  |L1.878|
;;;259    	case DW_LONG:
;;;260    		lp = buff;
00036e  9701              STR      r7,[sp,#4]
;;;261    		do								/* Hexdecimal dump */
000370  bf00              NOP      
                  |L1.882|
;;;262    			xprintf(" %08LX", *lp++);
000372  9801              LDR      r0,[sp,#4]
000374  c802              LDM      r0!,{r1}
000376  9001              STR      r0,[sp,#4]
000378  a00e              ADR      r0,|L1.948|
00037a  f7fffffe          BL       xprintf
;;;263    		while (--len);
00037e  1e68              SUBS     r0,r5,#1
000380  0005              MOVS     r5,r0
000382  d1f6              BNE      |L1.882|
;;;264    		break;
000384  bf00              NOP      
                  |L1.902|
000386  bf00              NOP                            ;252
;;;265    	}
;;;266    
;;;267    	xputc('\n');
000388  200a              MOVS     r0,#0xa
00038a  f7fffffe          BL       xputc
;;;268    }
00038e  b007              ADD      sp,sp,#0x1c
000390  bdf0              POP      {r4-r7,pc}
;;;269    
                          ENDP

000392  0000              DCW      0x0000
                  |L1.916|
                          DCD      outptr
                  |L1.920|
                          DCD      xfunc_out
                  |L1.924|
00039c  2530386c          DCB      "%08lX ",0
0003a0  582000  
0003a3  00                DCB      0
                  |L1.932|
0003a4  20253032          DCB      " %02X",0
0003a8  5800    
0003aa  00                DCB      0
0003ab  00                DCB      0
                  |L1.940|
0003ac  20253034          DCB      " %04X",0
0003b0  5800    
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L1.948|
0003b4  20253038          DCB      " %08LX",0
0003b8  4c5800  
0003bb  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  xfunc_out
                          DCD      0x00000000
                  outptr
                          DCD      0x00000000
