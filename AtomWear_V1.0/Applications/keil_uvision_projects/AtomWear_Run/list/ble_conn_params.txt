; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\ble_conn_params.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ble_conn_params.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\ble_conn_params.crf ..\..\..\Software\Source\ble_lib\ble_conn_params.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  is_conn_params_ok PROC
;;;30     
;;;31     static bool is_conn_params_ok(ble_gap_conn_params_t * p_conn_params)
000000  4601              MOV      r1,r0
;;;32     {
;;;33         // Check if interval is within the acceptable range.
;;;34         // NOTE: Using max_conn_interval in the received event data because this contains
;;;35         //       the client's connection interval.
;;;36         if (
000002  8848              LDRH     r0,[r1,#2]
000004  4ab7              LDR      r2,|L1.740|
000006  8812              LDRH     r2,[r2,#0]  ; m_preferred_conn_params
000008  4290              CMP      r0,r2
00000a  db06              BLT      |L1.26|
;;;37             (p_conn_params->max_conn_interval >= m_preferred_conn_params.min_conn_interval)
;;;38             && 
;;;39             (p_conn_params->max_conn_interval <= m_preferred_conn_params.max_conn_interval)
00000c  8848              LDRH     r0,[r1,#2]
00000e  4ab5              LDR      r2,|L1.740|
000010  8852              LDRH     r2,[r2,#2]  ; m_preferred_conn_params
000012  4290              CMP      r0,r2
000014  dc01              BGT      |L1.26|
;;;40         )
;;;41         {
;;;42             return true;
000016  2001              MOVS     r0,#1
                  |L1.24|
;;;43         }
;;;44         else
;;;45         {
;;;46             return false;
;;;47         }
;;;48     }
000018  4770              BX       lr
                  |L1.26|
00001a  2000              MOVS     r0,#0                 ;46
00001c  e7fc              B        |L1.24|
;;;49     
                          ENDP

                  update_timeout_handler PROC
;;;50     
;;;51     static void update_timeout_handler(void * p_context)
00001e  b538              PUSH     {r3-r5,lr}
;;;52     {
000020  4605              MOV      r5,r0
;;;53         UNUSED_PARAMETER(p_context);
;;;54     
;;;55         if (m_conn_handle != BLE_CONN_HANDLE_INVALID)
000022  48b1              LDR      r0,|L1.744|
000024  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000026  49b1              LDR      r1,|L1.748|
000028  4288              CMP      r0,r1
00002a  d03b              BEQ      |L1.164|
;;;56         {
;;;57             // Check if we have reached the maximum number of attempts
;;;58             m_update_count++;
00002c  48b0              LDR      r0,|L1.752|
00002e  7800              LDRB     r0,[r0,#0]  ; m_update_count
000030  1c40              ADDS     r0,r0,#1
000032  49af              LDR      r1,|L1.752|
000034  7008              STRB     r0,[r1,#0]
;;;59             if (m_update_count <= m_conn_params_config.max_conn_params_update_count)
000036  48af              LDR      r0,|L1.756|
000038  7b00              LDRB     r0,[r0,#0xc]  ; m_conn_params_config
00003a  7809              LDRB     r1,[r1,#0]  ; m_update_count
00003c  4288              CMP      r0,r1
00003e  db0f              BLT      |L1.96|
;;;60             {
;;;61                 uint32_t err_code;
;;;62                 
;;;63                 // Parameters are not ok, send connection parameters update request.
;;;64                 err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
000040  49a8              LDR      r1,|L1.740|
000042  48a9              LDR      r0,|L1.744|
000044  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000046  df65              SVC      #0x65
000048  4604              MOV      r4,r0
;;;65                 if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
00004a  2c00              CMP      r4,#0
00004c  d007              BEQ      |L1.94|
00004e  48a9              LDR      r0,|L1.756|
000050  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000052  2800              CMP      r0,#0
000054  d003              BEQ      |L1.94|
;;;66                 {
;;;67                     m_conn_params_config.error_handler(err_code);
000056  48a7              LDR      r0,|L1.756|
000058  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00005a  4620              MOV      r0,r4
00005c  4788              BLX      r1
                  |L1.94|
;;;68                 }
;;;69             }
00005e  e021              B        |L1.164|
                  |L1.96|
;;;70             else
;;;71             {
;;;72                 m_update_count = 0;
000060  2000              MOVS     r0,#0
000062  49a3              LDR      r1,|L1.752|
000064  7008              STRB     r0,[r1,#0]
;;;73                 
;;;74                 // Negotiation failed, disconnect automatically if this has been configured
;;;75                 if (m_conn_params_config.disconnect_on_fail)
000066  48a3              LDR      r0,|L1.756|
000068  7c00              LDRB     r0,[r0,#0x10]  ; m_conn_params_config
00006a  2800              CMP      r0,#0
00006c  d00f              BEQ      |L1.142|
;;;76                 {
;;;77                     uint32_t err_code;
;;;78                     
;;;79                     err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
00006e  213b              MOVS     r1,#0x3b
000070  489d              LDR      r0,|L1.744|
000072  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000074  df66              SVC      #0x66
000076  4604              MOV      r4,r0
;;;80                     if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
000078  2c00              CMP      r4,#0
00007a  d007              BEQ      |L1.140|
00007c  489d              LDR      r0,|L1.756|
00007e  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000080  2800              CMP      r0,#0
000082  d003              BEQ      |L1.140|
;;;81                     {
;;;82                         m_conn_params_config.error_handler(err_code);
000084  489b              LDR      r0,|L1.756|
000086  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
000088  4620              MOV      r0,r4
00008a  4788              BLX      r1
                  |L1.140|
;;;83                     }
;;;84                 }
00008c  bf00              NOP      
                  |L1.142|
;;;85                 
;;;86                 // Notify the application that the procedure has failed
;;;87                 if (m_conn_params_config.evt_handler != NULL)
00008e  4899              LDR      r0,|L1.756|
000090  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000092  2800              CMP      r0,#0
000094  d006              BEQ      |L1.164|
;;;88                 {
;;;89                     ble_conn_params_evt_t evt;
;;;90                     
;;;91                     evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
000096  2000              MOVS     r0,#0
000098  9000              STR      r0,[sp,#0]
;;;92                     m_conn_params_config.evt_handler(&evt);
00009a  4896              LDR      r0,|L1.756|
00009c  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
00009e  4668              MOV      r0,sp
0000a0  4788              BLX      r1
;;;93                 }
0000a2  bf00              NOP      
                  |L1.164|
;;;94             }
;;;95         }
;;;96     }
0000a4  bd38              POP      {r3-r5,pc}
;;;97     
                          ENDP

                  ble_conn_params_init PROC
;;;98     
;;;99     uint32_t ble_conn_params_init(const ble_conn_params_init_t * p_init)
0000a6  b570              PUSH     {r4-r6,lr}
;;;100    {
0000a8  4605              MOV      r5,r0
;;;101        uint32_t err_code;
;;;102        
;;;103        m_conn_params_config = *p_init;
0000aa  221c              MOVS     r2,#0x1c
0000ac  4629              MOV      r1,r5
0000ae  4891              LDR      r0,|L1.756|
0000b0  f7fffffe          BL       __aeabi_memcpy4
;;;104        m_change_param = false;
0000b4  2000              MOVS     r0,#0
0000b6  4990              LDR      r1,|L1.760|
0000b8  7008              STRB     r0,[r1,#0]
;;;105        if (p_init->p_conn_params != NULL)
0000ba  6828              LDR      r0,[r5,#0]
0000bc  2800              CMP      r0,#0
0000be  d00b              BEQ      |L1.216|
;;;106        {
;;;107            m_preferred_conn_params = *p_init->p_conn_params;
0000c0  2208              MOVS     r2,#8
0000c2  4888              LDR      r0,|L1.740|
0000c4  6829              LDR      r1,[r5,#0]
0000c6  f7fffffe          BL       __aeabi_memcpy
;;;108            
;;;109            // Set the connection params in stack
;;;110            err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
0000ca  4886              LDR      r0,|L1.740|
0000cc  df6a              SVC      #0x6a
0000ce  4604              MOV      r4,r0
;;;111            if (err_code != NRF_SUCCESS)
0000d0  2c00              CMP      r4,#0
0000d2  d008              BEQ      |L1.230|
;;;112            {
;;;113                return err_code;
0000d4  4620              MOV      r0,r4
                  |L1.214|
;;;114            }
;;;115        }
;;;116        else
;;;117        {
;;;118            // Fetch the connection params from stack
;;;119            err_code = sd_ble_gap_ppcp_get(&m_preferred_conn_params);
;;;120            if (err_code != NRF_SUCCESS)
;;;121            {
;;;122                return err_code;
;;;123            }
;;;124        }
;;;125    
;;;126        m_conn_handle  = BLE_CONN_HANDLE_INVALID;
;;;127        m_update_count = 0;
;;;128        
;;;129        return app_timer_create(&m_conn_params_timer_id,
;;;130                                APP_TIMER_MODE_SINGLE_SHOT,
;;;131                                update_timeout_handler);
;;;132    }
0000d6  bd70              POP      {r4-r6,pc}
                  |L1.216|
0000d8  4882              LDR      r0,|L1.740|
0000da  df6b              SVC      #0x6b                 ;119
0000dc  4604              MOV      r4,r0                 ;119
0000de  2c00              CMP      r4,#0                 ;120
0000e0  d001              BEQ      |L1.230|
0000e2  4620              MOV      r0,r4                 ;122
0000e4  e7f7              B        |L1.214|
                  |L1.230|
0000e6  2000              MOVS     r0,#0                 ;126
0000e8  43c0              MVNS     r0,r0                 ;126
0000ea  497f              LDR      r1,|L1.744|
0000ec  8008              STRH     r0,[r1,#0]            ;126
0000ee  2000              MOVS     r0,#0                 ;127
0000f0  497f              LDR      r1,|L1.752|
0000f2  7008              STRB     r0,[r1,#0]            ;127
0000f4  4a81              LDR      r2,|L1.764|
0000f6  2100              MOVS     r1,#0                 ;129
0000f8  4881              LDR      r0,|L1.768|
0000fa  f7fffffe          BL       app_timer_create
0000fe  e7ea              B        |L1.214|
;;;133    
                          ENDP

                  ble_conn_params_stop PROC
;;;134    
;;;135    uint32_t ble_conn_params_stop(void)
000100  b510              PUSH     {r4,lr}
;;;136    {
;;;137        return app_timer_stop(m_conn_params_timer_id);
000102  487f              LDR      r0,|L1.768|
000104  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
000106  f7fffffe          BL       app_timer_stop
;;;138    }
00010a  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  conn_params_negotiation PROC
;;;140    
;;;141    static void conn_params_negotiation(void)
00010c  b538              PUSH     {r3-r5,lr}
;;;142    {
;;;143        // Start negotiation if the received connection parameters are not acceptable
;;;144        if (!is_conn_params_ok(&m_current_conn_params))
00010e  487d              LDR      r0,|L1.772|
000110  f7fffffe          BL       is_conn_params_ok
000114  2800              CMP      r0,#0
000116  d129              BNE      |L1.364|
;;;145        {
;;;146            uint32_t err_code;
;;;147            uint32_t timeout_ticks;
;;;148            
;;;149            if (m_change_param)
000118  4877              LDR      r0,|L1.760|
00011a  7800              LDRB     r0,[r0,#0]  ; m_change_param
00011c  2800              CMP      r0,#0
00011e  d00a              BEQ      |L1.310|
;;;150            {
;;;151                // Notify the application that the procedure has failed
;;;152                if (m_conn_params_config.evt_handler != NULL)
000120  4874              LDR      r0,|L1.756|
000122  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000124  2800              CMP      r0,#0
000126  d020              BEQ      |L1.362|
;;;153                {
;;;154                    ble_conn_params_evt_t evt;
;;;155                    
;;;156                    evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
000128  2000              MOVS     r0,#0
00012a  9000              STR      r0,[sp,#0]
;;;157                    m_conn_params_config.evt_handler(&evt);
00012c  4871              LDR      r0,|L1.756|
00012e  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
000130  4668              MOV      r0,sp
000132  4788              BLX      r1
;;;158                }
000134  e019              B        |L1.362|
                  |L1.310|
;;;159            }
;;;160            else
;;;161            {
;;;162                if (m_update_count == 0)
000136  486e              LDR      r0,|L1.752|
000138  7800              LDRB     r0,[r0,#0]  ; m_update_count
00013a  2800              CMP      r0,#0
00013c  d102              BNE      |L1.324|
;;;163                {
;;;164                    // First connection parameter update
;;;165                    timeout_ticks = m_conn_params_config.first_conn_params_update_delay;
00013e  486d              LDR      r0,|L1.756|
000140  6845              LDR      r5,[r0,#4]  ; m_conn_params_config
000142  e001              B        |L1.328|
                  |L1.324|
;;;166                }
;;;167                else
;;;168                {
;;;169                    timeout_ticks = m_conn_params_config.next_conn_params_update_delay;
000144  486b              LDR      r0,|L1.756|
000146  6885              LDR      r5,[r0,#8]  ; m_conn_params_config
                  |L1.328|
;;;170                }
;;;171    
;;;172                err_code = app_timer_start(m_conn_params_timer_id, timeout_ticks, NULL);
000148  2200              MOVS     r2,#0
00014a  4629              MOV      r1,r5
00014c  486c              LDR      r0,|L1.768|
00014e  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
000150  f7fffffe          BL       app_timer_start
000154  4604              MOV      r4,r0
;;;173                if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
000156  2c00              CMP      r4,#0
000158  d007              BEQ      |L1.362|
00015a  4866              LDR      r0,|L1.756|
00015c  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
00015e  2800              CMP      r0,#0
000160  d003              BEQ      |L1.362|
;;;174                {
;;;175                    m_conn_params_config.error_handler(err_code);
000162  4864              LDR      r0,|L1.756|
000164  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
000166  4620              MOV      r0,r4
000168  4788              BLX      r1
                  |L1.362|
;;;176                }
;;;177            }
;;;178        }
00016a  e00a              B        |L1.386|
                  |L1.364|
;;;179        else
;;;180        {
;;;181            // Notify the application that the procedure has succeded
;;;182            if (m_conn_params_config.evt_handler != NULL)
00016c  4861              LDR      r0,|L1.756|
00016e  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000170  2800              CMP      r0,#0
000172  d006              BEQ      |L1.386|
;;;183            {
;;;184                ble_conn_params_evt_t evt;
;;;185                
;;;186                evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
000174  2001              MOVS     r0,#1
000176  9000              STR      r0,[sp,#0]
;;;187                m_conn_params_config.evt_handler(&evt);
000178  485e              LDR      r0,|L1.756|
00017a  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
00017c  4668              MOV      r0,sp
00017e  4788              BLX      r1
;;;188            }
000180  bf00              NOP      
                  |L1.386|
;;;189        }
;;;190        m_change_param = false;
000182  2000              MOVS     r0,#0
000184  495c              LDR      r1,|L1.760|
000186  7008              STRB     r0,[r1,#0]
;;;191    }
000188  bd38              POP      {r3-r5,pc}
;;;192    
                          ENDP

                  on_connect PROC
;;;193    
;;;194    static void on_connect(ble_evt_t * p_ble_evt)
00018a  b510              PUSH     {r4,lr}
;;;195    {
00018c  4604              MOV      r4,r0
;;;196        // Save connection parameters
;;;197        m_conn_handle         = p_ble_evt->evt.gap_evt.conn_handle;
00018e  88a0              LDRH     r0,[r4,#4]
000190  4955              LDR      r1,|L1.744|
000192  8008              STRH     r0,[r1,#0]
;;;198        m_current_conn_params = p_ble_evt->evt.gap_evt.params.connected.conn_params;
000194  2208              MOVS     r2,#8
000196  4621              MOV      r1,r4
000198  310e              ADDS     r1,r1,#0xe
00019a  485a              LDR      r0,|L1.772|
00019c  f7fffffe          BL       __aeabi_memcpy
;;;199        m_update_count        = 0;  // Connection parameter negotiation should re-start every connection
0001a0  2000              MOVS     r0,#0
0001a2  4953              LDR      r1,|L1.752|
0001a4  7008              STRB     r0,[r1,#0]
;;;200        
;;;201        // Check if we shall handle negotiation on connect
;;;202        if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
0001a6  4853              LDR      r0,|L1.756|
0001a8  89c0              LDRH     r0,[r0,#0xe]  ; m_conn_params_config
0001aa  2800              CMP      r0,#0
0001ac  d101              BNE      |L1.434|
;;;203        {
;;;204            conn_params_negotiation();
0001ae  f7fffffe          BL       conn_params_negotiation
                  |L1.434|
;;;205        }
;;;206    }
0001b2  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  on_disconnect PROC
;;;208    
;;;209    static void on_disconnect(ble_evt_t * p_ble_evt)
0001b4  b570              PUSH     {r4-r6,lr}
;;;210    {
0001b6  4605              MOV      r5,r0
;;;211        uint32_t err_code;
;;;212    
;;;213        m_conn_handle = BLE_CONN_HANDLE_INVALID;
0001b8  2000              MOVS     r0,#0
0001ba  43c0              MVNS     r0,r0
0001bc  494a              LDR      r1,|L1.744|
0001be  8008              STRH     r0,[r1,#0]
;;;214    
;;;215        // Stop timer if running
;;;216        m_update_count = 0; // Connection parameters updates should happen during every connection
0001c0  2000              MOVS     r0,#0
0001c2  494b              LDR      r1,|L1.752|
0001c4  7008              STRB     r0,[r1,#0]
;;;217        
;;;218        err_code = app_timer_stop(m_conn_params_timer_id);
0001c6  484e              LDR      r0,|L1.768|
0001c8  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
0001ca  f7fffffe          BL       app_timer_stop
0001ce  4604              MOV      r4,r0
;;;219        if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
0001d0  2c00              CMP      r4,#0
0001d2  d007              BEQ      |L1.484|
0001d4  4847              LDR      r0,|L1.756|
0001d6  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
0001d8  2800              CMP      r0,#0
0001da  d003              BEQ      |L1.484|
;;;220        {
;;;221            m_conn_params_config.error_handler(err_code);
0001dc  4845              LDR      r0,|L1.756|
0001de  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
0001e0  4620              MOV      r0,r4
0001e2  4788              BLX      r1
                  |L1.484|
;;;222        }
;;;223    }
0001e4  bd70              POP      {r4-r6,pc}
;;;224    
                          ENDP

                  on_write PROC
;;;225    
;;;226    static void on_write(ble_evt_t * p_ble_evt)
0001e6  b570              PUSH     {r4-r6,lr}
;;;227    {
0001e8  4605              MOV      r5,r0
;;;228        ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
0001ea  1dac              ADDS     r4,r5,#6
;;;229    
;;;230        // Check if this the correct CCCD
;;;231        if (
0001ec  8820              LDRH     r0,[r4,#0]
0001ee  4941              LDR      r1,|L1.756|
0001f0  89c9              LDRH     r1,[r1,#0xe]  ; m_conn_params_config
0001f2  4288              CMP      r0,r1
0001f4  d120              BNE      |L1.568|
;;;232            (p_evt_write->handle == m_conn_params_config.start_on_notify_cccd_handle)
;;;233            &&
;;;234            (p_evt_write->len == 2)
0001f6  8b20              LDRH     r0,[r4,#0x18]
0001f8  2802              CMP      r0,#2
0001fa  d11d              BNE      |L1.568|
;;;235        )
;;;236        {
;;;237            // Check if this is a 'start notification'
;;;238            if (ble_srv_is_notification_enabled(p_evt_write->data))
0001fc  bf00              NOP      
0001fe  bf00              NOP      
000200  7ea1              LDRB     r1,[r4,#0x1a]
000202  7ee2              LDRB     r2,[r4,#0x1b]
000204  0212              LSLS     r2,r2,#8
000206  4311              ORRS     r1,r1,r2
000208  4608              MOV      r0,r1
00020a  07c1              LSLS     r1,r0,#31
00020c  0fc9              LSRS     r1,r1,#31
00020e  2900              CMP      r1,#0
000210  d002              BEQ      |L1.536|
;;;239            {
;;;240                // Do connection parameter negotiation if necessary
;;;241                conn_params_negotiation();
000212  f7fffffe          BL       conn_params_negotiation
000216  e00f              B        |L1.568|
                  |L1.536|
;;;242            }
;;;243            else
;;;244            {
;;;245                uint32_t err_code;
;;;246    
;;;247                // Stop timer if running
;;;248                err_code = app_timer_stop(m_conn_params_timer_id);
000218  4839              LDR      r0,|L1.768|
00021a  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
00021c  f7fffffe          BL       app_timer_stop
000220  4606              MOV      r6,r0
;;;249                if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
000222  2e00              CMP      r6,#0
000224  d007              BEQ      |L1.566|
000226  4833              LDR      r0,|L1.756|
000228  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
00022a  2800              CMP      r0,#0
00022c  d003              BEQ      |L1.566|
;;;250                {
;;;251                    m_conn_params_config.error_handler(err_code);
00022e  4831              LDR      r0,|L1.756|
000230  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
000232  4630              MOV      r0,r6
000234  4788              BLX      r1
                  |L1.566|
;;;252                }
;;;253            }
000236  bf00              NOP      
                  |L1.568|
;;;254        }
;;;255    }
000238  bd70              POP      {r4-r6,pc}
;;;256    
                          ENDP

                  on_conn_params_update PROC
;;;257    
;;;258    static void on_conn_params_update(ble_evt_t * p_ble_evt)
00023a  b510              PUSH     {r4,lr}
;;;259    {
00023c  4604              MOV      r4,r0
;;;260        // Copy the parameters
;;;261        m_current_conn_params = p_ble_evt->evt.gap_evt.params.conn_param_update.conn_params;
00023e  2208              MOVS     r2,#8
000240  1da1              ADDS     r1,r4,#6
000242  4830              LDR      r0,|L1.772|
000244  f7fffffe          BL       __aeabi_memcpy
;;;262    
;;;263        conn_params_negotiation();
000248  f7fffffe          BL       conn_params_negotiation
;;;264    }
00024c  bd10              POP      {r4,pc}
;;;265    
                          ENDP

                  ble_conn_params_on_ble_evt PROC
;;;266    
;;;267    void ble_conn_params_on_ble_evt(ble_evt_t * p_ble_evt)
00024e  b510              PUSH     {r4,lr}
;;;268    {
000250  4604              MOV      r4,r0
;;;269        switch (p_ble_evt->header.evt_id)
000252  8820              LDRH     r0,[r4,#0]
000254  2810              CMP      r0,#0x10
000256  d006              BEQ      |L1.614|
000258  2811              CMP      r0,#0x11
00025a  d008              BEQ      |L1.622|
00025c  2812              CMP      r0,#0x12
00025e  d00e              BEQ      |L1.638|
000260  2850              CMP      r0,#0x50
000262  d110              BNE      |L1.646|
000264  e007              B        |L1.630|
                  |L1.614|
;;;270        {
;;;271            case BLE_GAP_EVT_CONNECTED:
;;;272                on_connect(p_ble_evt);
000266  4620              MOV      r0,r4
000268  f7fffffe          BL       on_connect
;;;273                break;
00026c  e00c              B        |L1.648|
                  |L1.622|
;;;274                
;;;275            case BLE_GAP_EVT_DISCONNECTED:
;;;276                on_disconnect(p_ble_evt);
00026e  4620              MOV      r0,r4
000270  f7fffffe          BL       on_disconnect
;;;277                break;
000274  e008              B        |L1.648|
                  |L1.630|
;;;278                
;;;279            case BLE_GATTS_EVT_WRITE:
;;;280                on_write(p_ble_evt);
000276  4620              MOV      r0,r4
000278  f7fffffe          BL       on_write
;;;281                break;
00027c  e004              B        |L1.648|
                  |L1.638|
;;;282                
;;;283            case BLE_GAP_EVT_CONN_PARAM_UPDATE:
;;;284                on_conn_params_update(p_ble_evt);
00027e  4620              MOV      r0,r4
000280  f7fffffe          BL       on_conn_params_update
;;;285                break;
000284  e000              B        |L1.648|
                  |L1.646|
;;;286                
;;;287            default:
;;;288                break;
000286  bf00              NOP      
                  |L1.648|
000288  bf00              NOP                            ;273
;;;289        }
;;;290    }
00028a  bd10              POP      {r4,pc}
;;;291    
                          ENDP

                  ble_conn_params_change_conn_params PROC
;;;292    uint32_t ble_conn_params_change_conn_params(ble_gap_conn_params_t *new_params)
00028c  b538              PUSH     {r3-r5,lr}
;;;293    {
00028e  4604              MOV      r4,r0
;;;294        uint32_t err_code;
;;;295    
;;;296        m_preferred_conn_params = *new_params;
000290  2208              MOVS     r2,#8
000292  4621              MOV      r1,r4
000294  4813              LDR      r0,|L1.740|
000296  f7fffffe          BL       __aeabi_memcpy
;;;297        // Set the connection params in stack
;;;298        err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
00029a  4812              LDR      r0,|L1.740|
00029c  df6a              SVC      #0x6a
00029e  4605              MOV      r5,r0
;;;299        if (err_code == NRF_SUCCESS)
0002a0  2d00              CMP      r5,#0
0002a2  d11c              BNE      |L1.734|
;;;300        {
;;;301            if (!is_conn_params_ok(&m_current_conn_params))
0002a4  4817              LDR      r0,|L1.772|
0002a6  f7fffffe          BL       is_conn_params_ok
0002aa  2800              CMP      r0,#0
0002ac  d10b              BNE      |L1.710|
;;;302            {
;;;303                m_change_param = true;
0002ae  2001              MOVS     r0,#1
0002b0  4911              LDR      r1,|L1.760|
0002b2  7008              STRB     r0,[r1,#0]
;;;304                err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
0002b4  490b              LDR      r1,|L1.740|
0002b6  480c              LDR      r0,|L1.744|
0002b8  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
0002ba  df65              SVC      #0x65
0002bc  4605              MOV      r5,r0
;;;305                m_update_count = 1;
0002be  2001              MOVS     r0,#1
0002c0  490b              LDR      r1,|L1.752|
0002c2  7008              STRB     r0,[r1,#0]
0002c4  e00b              B        |L1.734|
                  |L1.710|
;;;306            }
;;;307            else
;;;308            {
;;;309                // Notify the application that the procedure has succeded
;;;310                if (m_conn_params_config.evt_handler != NULL)
0002c6  480b              LDR      r0,|L1.756|
0002c8  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
0002ca  2800              CMP      r0,#0
0002cc  d006              BEQ      |L1.732|
;;;311                {
;;;312                    ble_conn_params_evt_t evt;
;;;313                    
;;;314                    evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
0002ce  2001              MOVS     r0,#1
0002d0  9000              STR      r0,[sp,#0]
;;;315                    m_conn_params_config.evt_handler(&evt);
0002d2  4808              LDR      r0,|L1.756|
0002d4  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
0002d6  4668              MOV      r0,sp
0002d8  4788              BLX      r1
;;;316                }
0002da  bf00              NOP      
                  |L1.732|
;;;317                err_code = NRF_SUCCESS;
0002dc  2500              MOVS     r5,#0
                  |L1.734|
;;;318            }
;;;319        }
;;;320        return err_code;
0002de  4628              MOV      r0,r5
;;;321    }
0002e0  bd38              POP      {r3-r5,pc}
                          ENDP

0002e2  0000              DCW      0x0000
                  |L1.740|
                          DCD      m_preferred_conn_params
                  |L1.744|
                          DCD      m_conn_handle
                  |L1.748|
                          DCD      0x0000ffff
                  |L1.752|
                          DCD      m_update_count
                  |L1.756|
                          DCD      m_conn_params_config
                  |L1.760|
                          DCD      m_change_param
                  |L1.764|
                          DCD      update_timeout_handler
                  |L1.768|
                          DCD      m_conn_params_timer_id
                  |L1.772|
                          DCD      m_current_conn_params

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_conn_params_config
                          %        28

                          AREA ||.data||, DATA, ALIGN=2

                  m_change_param
000000  0000              DCB      0x00,0x00
                  m_preferred_conn_params
000002  0000              DCB      0x00,0x00
                          DCD      0x00000000
000008  0000              DCB      0x00,0x00
                  m_update_count
00000a  0000              DCB      0x00,0x00
                  m_conn_handle
00000c  0000              DCB      0x00,0x00
                  m_current_conn_params
00000e  0000              DCB      0x00,0x00
                          DCD      0x00000000
000014  00000000          DCB      0x00,0x00,0x00,0x00
                  m_conn_params_timer_id
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\ble_lib\\ble_conn_params.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_ble_conn_params_c_2dcac06e____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_ble_conn_params_c_2dcac06e____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_ble_conn_params_c_2dcac06e____REVSH|
#line 130
|__asm___17_ble_conn_params_c_2dcac06e____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
