; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\mma8452q.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\mma8452q.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\mma8452q.crf ..\..\..\Software\Source\mma8452q\mma8452q.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IIC_RegWrite PROC
;;;13     \*********************************************************/
;;;14     void IIC_RegWrite(byte address, byte reg, byte val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;15     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;16     	byte send[2];
;;;17     	
;;;18     	address = (address<<1) & 0xFE;
000008  0060              LSLS     r0,r4,#1
00000a  21fe              MOVS     r1,#0xfe
00000c  4008              ANDS     r0,r0,r1
00000e  4604              MOV      r4,r0
;;;19     	send[0] = reg; 
000010  4668              MOV      r0,sp
000012  7005              STRB     r5,[r0,#0]
;;;20     	send[1] = val;
000014  7046              STRB     r6,[r0,#1]
;;;21     	
;;;22     	twi_master_transfer(address, send, 2, TWI_ISSUE_STOP);
000016  2301              MOVS     r3,#1
000018  2202              MOVS     r2,#2
00001a  4669              MOV      r1,sp
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       twi_master_transfer
;;;23     }
000022  bdf8              POP      {r3-r7,pc}
;;;24     
                          ENDP

                  IIC_RegRead PROC
;;;27     \*********************************************************/
;;;28     byte IIC_RegRead(byte address, byte reg)
000024  b513              PUSH     {r0,r1,r4,lr}
;;;29     {
000026  b082              SUB      sp,sp,#8
000028  4604              MOV      r4,r0
;;;30     	byte b;
;;;31     	
;;;32     	address = (address<<1) & 0xFE;
00002a  0060              LSLS     r0,r4,#1
00002c  21fe              MOVS     r1,#0xfe
00002e  4008              ANDS     r0,r0,r1
000030  4604              MOV      r4,r0
;;;33     	twi_master_transfer(address, &reg, 1, TWI_DONT_ISSUE_STOP); // write
000032  2300              MOVS     r3,#0
000034  2201              MOVS     r2,#1
000036  a903              ADD      r1,sp,#0xc
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       twi_master_transfer
;;;34     	
;;;35     	address = address | 0x01;
00003e  2001              MOVS     r0,#1
000040  4304              ORRS     r4,r4,r0
;;;36     	twi_master_transfer(address, &b, 1, TWI_ISSUE_STOP); // read
000042  2301              MOVS     r3,#1
000044  461a              MOV      r2,r3
000046  a901              ADD      r1,sp,#4
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       twi_master_transfer
;;;37     	
;;;38     	return b;
00004e  4668              MOV      r0,sp
000050  7900              LDRB     r0,[r0,#4]
;;;39     }
000052  b004              ADD      sp,sp,#0x10
000054  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  IIC_RegReadN PROC
;;;43     \*********************************************************/
;;;44     void IIC_RegReadN(byte address, byte reg, uint8_t len, uint8_t *value)
000056  b57f              PUSH     {r0-r6,lr}
;;;45     {
000058  4604              MOV      r4,r0
00005a  4616              MOV      r6,r2
00005c  461d              MOV      r5,r3
;;;46     	
;;;47     	address = (address<<1) & 0xFE;
00005e  0060              LSLS     r0,r4,#1
000060  21fe              MOVS     r1,#0xfe
000062  4008              ANDS     r0,r0,r1
000064  4604              MOV      r4,r0
;;;48     	twi_master_transfer(address, &reg, 1, TWI_DONT_ISSUE_STOP); // write
000066  2300              MOVS     r3,#0
000068  2201              MOVS     r2,#1
00006a  a901              ADD      r1,sp,#4
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       twi_master_transfer
;;;49     	
;;;50     	address = address | 0x01;
000072  2001              MOVS     r0,#1
000074  4304              ORRS     r4,r4,r0
;;;51     	twi_master_transfer(address, value, len, TWI_ISSUE_STOP); // read
000076  2301              MOVS     r3,#1
000078  4632              MOV      r2,r6
00007a  4629              MOV      r1,r5
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       twi_master_transfer
;;;52     }
000082  bd7f              POP      {r0-r6,pc}
;;;53     
                          ENDP

                  MMA845x_Active PROC
;;;56     \*********************************************************/
;;;57     void MMA845x_Active ()
000084  b510              PUSH     {r4,lr}
;;;58     {
;;;59       IIC_RegWrite(SlaveAddressIIC, CTRL_REG1, (IIC_RegRead(SlaveAddressIIC, CTRL_REG1) | ACTIVE_MASK));
000086  212a              MOVS     r1,#0x2a
000088  4863              LDR      r0,|L1.536|
00008a  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
00008c  f7fffffe          BL       IIC_RegRead
000090  2101              MOVS     r1,#1
000092  4308              ORRS     r0,r0,r1
000094  4604              MOV      r4,r0
000096  4622              MOV      r2,r4
000098  212a              MOVS     r1,#0x2a
00009a  485f              LDR      r0,|L1.536|
00009c  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
00009e  f7fffffe          BL       IIC_RegWrite
;;;60     }
0000a2  bd10              POP      {r4,pc}
;;;61     
                          ENDP

                  MMA845x_Standby PROC
;;;64     \*********************************************************/
;;;65     void MMA845x_Standby (void)
0000a4  b510              PUSH     {r4,lr}
;;;66     {
;;;67       byte n;
;;;68       /*
;;;69       **  Read current value of System Control 1 Register.
;;;70       **  Put sensor into Standby Mode.
;;;71       **  Return with previous value of System Control 1 Register.
;;;72       */
;;;73       n = IIC_RegRead(SlaveAddressIIC, CTRL_REG1);
0000a6  212a              MOVS     r1,#0x2a
0000a8  485b              LDR      r0,|L1.536|
0000aa  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
0000ac  f7fffffe          BL       IIC_RegRead
0000b0  4604              MOV      r4,r0
;;;74       IIC_RegWrite(SlaveAddressIIC, CTRL_REG1, n & ~ACTIVE_MASK);
0000b2  0862              LSRS     r2,r4,#1
0000b4  0052              LSLS     r2,r2,#1
0000b6  212a              MOVS     r1,#0x2a
0000b8  4857              LDR      r0,|L1.536|
0000ba  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
0000bc  f7fffffe          BL       IIC_RegWrite
;;;75     }
0000c0  bd10              POP      {r4,pc}
;;;76     
                          ENDP

                  MMA845x_Init PROC
;;;79     \*********************************************************/
;;;80     void MMA845x_Init (void)
0000c2  b510              PUSH     {r4,lr}
;;;81     {
;;;82     	if(IIC_RegRead(SlaveAddressIIC, WHO_AM_I_REG) == 0x2A)
0000c4  210d              MOVS     r1,#0xd
0000c6  4854              LDR      r0,|L1.536|
0000c8  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
0000ca  f7fffffe          BL       IIC_RegRead
0000ce  282a              CMP      r0,#0x2a
0000d0  d103              BNE      |L1.218|
;;;83     	{
;;;84     		xprintf("read MMA8452Q ID successful!\r\n");
0000d2  a052              ADR      r0,|L1.540|
0000d4  f7fffffe          BL       xprintf
0000d8  e002              B        |L1.224|
                  |L1.218|
;;;85     	}
;;;86     	else
;;;87     	{
;;;88     		xprintf("read MMA8452Q ID failed!\r\n");
0000da  a058              ADR      r0,|L1.572|
0000dc  f7fffffe          BL       xprintf
                  |L1.224|
;;;89     	}
;;;90     	
;;;91       MMA845x_Standby();
0000e0  f7fffffe          BL       MMA845x_Standby
;;;92       /*
;;;93       **  Configure sensor for:
;;;94       **    - Sleep Mode Poll Rate of 50Hz (20ms)
;;;95       **    - System Output Data Rate of 200Hz (5ms)
;;;96       **    - Full Scale of +/-2g
;;;97       */
;;;98     //   IIC_RegWrite(SlaveAddressIIC, CTRL_REG1, ASLP_RATE_20MS+DATA_RATE_5MS);
;;;99     //   IIC_RegWrite(SlaveAddressIIC, XYZ_DATA_CFG_REG, FULL_SCALE_2G);
;;;100    	IIC_RegWrite(SlaveAddressIIC, CTRL_REG1, 0x14);
0000e4  2214              MOVS     r2,#0x14
0000e6  212a              MOVS     r1,#0x2a
0000e8  484b              LDR      r0,|L1.536|
0000ea  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
0000ec  f7fffffe          BL       IIC_RegWrite
;;;101    	IIC_RegWrite(SlaveAddressIIC, CTRL_REG2, 0x12);
0000f0  2212              MOVS     r2,#0x12
0000f2  212b              MOVS     r1,#0x2b
0000f4  4848              LDR      r0,|L1.536|
0000f6  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
0000f8  f7fffffe          BL       IIC_RegWrite
;;;102    	IIC_RegWrite(SlaveAddressIIC, XYZ_DATA_CFG_REG, FULL_SCALE_2G);
0000fc  2200              MOVS     r2,#0
0000fe  210e              MOVS     r1,#0xe
000100  4845              LDR      r0,|L1.536|
000102  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
000104  f7fffffe          BL       IIC_RegWrite
;;;103    }
000108  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  numberConvert PROC
;;;105    int16_t numberConvert(byte msb, byte lsb)
00010a  b510              PUSH     {r4,lr}
;;;106    {
00010c  4602              MOV      r2,r0
;;;107    	int16_t acce;
;;;108    	
;;;109    	acce = msb;
00010e  4610              MOV      r0,r2
;;;110    	acce <<= 4;
000110  0100              LSLS     r0,r0,#4
;;;111    	acce += (lsb>>4);
000112  110b              ASRS     r3,r1,#4
000114  1818              ADDS     r0,r3,r0
;;;112    	
;;;113    	if(acce & 0x0800)
000116  2301              MOVS     r3,#1
000118  02db              LSLS     r3,r3,#11
00011a  4218              TST      r0,r3
00011c  d00a              BEQ      |L1.308|
;;;114        {
;;;115            acce = ~acce;
00011e  43c0              MVNS     r0,r0
;;;116            acce &= ~0xf000;    
000120  240f              MOVS     r4,#0xf
000122  0324              LSLS     r4,r4,#12
000124  4603              MOV      r3,r0
000126  43a3              BICS     r3,r3,r4
000128  b218              SXTH     r0,r3
;;;117            acce++;
00012a  1c43              ADDS     r3,r0,#1
00012c  b218              SXTH     r0,r3
;;;118            acce = -acce;
00012e  4243              RSBS     r3,r0,#0
000130  b218              SXTH     r0,r3
                  |L1.306|
;;;119            return acce;	  
;;;120        }
;;;121        else
;;;122        {
;;;123            return acce;
;;;124        }	
;;;125    }
000132  bd10              POP      {r4,pc}
                  |L1.308|
000134  bf00              NOP                            ;123
000136  e7fc              B        |L1.306|
;;;126    
                          ENDP

                  mma8452q_get_mo_value PROC
;;;128    
;;;129    uint16_t mma8452q_get_mo_value(void)
000138  b5f0              PUSH     {r4-r7,lr}
;;;130    {
00013a  b087              SUB      sp,sp,#0x1c
;;;131        int16_t x_value, y_value, z_value;
;;;132    	byte value[6];
;;;133        
;;;134        uint32_t m_acce = 0;
00013c  2400              MOVS     r4,#0
;;;135    
;;;136        if(IIC_RegRead(SlaveAddressIIC, STATUS_00_REG)&0x08)
00013e  2100              MOVS     r1,#0
000140  4835              LDR      r0,|L1.536|
000142  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
000144  f7fffffe          BL       IIC_RegRead
000148  2108              MOVS     r1,#8
00014a  4208              TST      r0,r1
00014c  d030              BEQ      |L1.432|
;;;137    	{
;;;138    		IIC_RegReadN(SlaveAddressIIC, OUT_X_MSB_REG, 6, value);
00014e  ab04              ADD      r3,sp,#0x10
000150  2206              MOVS     r2,#6
000152  2101              MOVS     r1,#1
000154  4830              LDR      r0,|L1.536|
000156  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
000158  f7fffffe          BL       IIC_RegReadN
;;;139    
;;;140    		x_value = numberConvert(value[0], value[1]);
00015c  466a              MOV      r2,sp
00015e  7c51              LDRB     r1,[r2,#0x11]
000160  7c10              LDRB     r0,[r2,#0x10]
000162  f7fffffe          BL       numberConvert
000166  4605              MOV      r5,r0
;;;141    		y_value = numberConvert(value[2], value[3]);
000168  466a              MOV      r2,sp
00016a  7cd1              LDRB     r1,[r2,#0x13]
00016c  7c90              LDRB     r0,[r2,#0x12]
00016e  f7fffffe          BL       numberConvert
000172  4606              MOV      r6,r0
;;;142    		z_value = numberConvert(value[4], value[5]);
000174  466a              MOV      r2,sp
000176  7d51              LDRB     r1,[r2,#0x15]
000178  7d10              LDRB     r0,[r2,#0x14]
00017a  f7fffffe          BL       numberConvert
00017e  4607              MOV      r7,r0
;;;143        
;;;144            m_acce = 0;
000180  bf00              NOP      
;;;145            m_acce += x_value*x_value;
000182  4628              MOV      r0,r5
000184  4368              MULS     r0,r5,r0
000186  1904              ADDS     r4,r0,r4
;;;146            m_acce += y_value*y_value;
000188  4630              MOV      r0,r6
00018a  4370              MULS     r0,r6,r0
00018c  1904              ADDS     r4,r0,r4
;;;147            m_acce += z_value*z_value;
00018e  4638              MOV      r0,r7
000190  4378              MULS     r0,r7,r0
000192  1904              ADDS     r4,r0,r4
;;;148            
;;;149            return (uint16_t)sqrt(m_acce);
000194  4620              MOV      r0,r4
000196  f7fffffe          BL       __aeabi_ui2d
00019a  9101              STR      r1,[sp,#4]
00019c  9000              STR      r0,[sp,#0]
00019e  f7fffffe          BL       sqrt
0001a2  9103              STR      r1,[sp,#0xc]
0001a4  9002              STR      r0,[sp,#8]
0001a6  f7fffffe          BL       __aeabi_d2uiz
0001aa  b280              UXTH     r0,r0
                  |L1.428|
;;;150        }
;;;151        
;;;152        else
;;;153            return 0;
;;;154    }
0001ac  b007              ADD      sp,sp,#0x1c
0001ae  bdf0              POP      {r4-r7,pc}
                  |L1.432|
0001b0  2000              MOVS     r0,#0                 ;153
0001b2  e7fb              B        |L1.428|
;;;155    
                          ENDP

                  mma8452q_test PROC
;;;156    
;;;157    void mma8452q_test(void)
0001b4  b51c              PUSH     {r2-r4,lr}
;;;158    {
;;;159    	int16_t x_value, y_value, z_value;
;;;160    	byte value[6];
;;;161    	
;;;162    	MMA845x_Init();
0001b6  f7fffffe          BL       MMA845x_Init
;;;163    	MMA845x_Active();	
0001ba  f7fffffe          BL       MMA845x_Active
;;;164    	
;;;165        
;;;166    //     while(1)
;;;167    //     {
;;;168    //         xprintf("mo_value:%d\r\n", mma8452q_get_mo_value());
;;;169    // 		nrf_delay_ms(500);
;;;170    //     }
;;;171        
;;;172    	while(1)
0001be  e02a              B        |L1.534|
                  |L1.448|
;;;173    	{
;;;174    		if(IIC_RegRead(SlaveAddressIIC, STATUS_00_REG)&0x08)
0001c0  2100              MOVS     r1,#0
0001c2  4815              LDR      r0,|L1.536|
0001c4  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
0001c6  f7fffffe          BL       IIC_RegRead
0001ca  2108              MOVS     r1,#8
0001cc  4208              TST      r0,r1
0001ce  d022              BEQ      |L1.534|
;;;175    		{
;;;176    			IIC_RegReadN(SlaveAddressIIC, OUT_X_MSB_REG, 6, value);
0001d0  466b              MOV      r3,sp
0001d2  2206              MOVS     r2,#6
0001d4  2101              MOVS     r1,#1
0001d6  4810              LDR      r0,|L1.536|
0001d8  7800              LDRB     r0,[r0,#0]  ; SlaveAddressIIC
0001da  f7fffffe          BL       IIC_RegReadN
;;;177    
;;;178    			x_value = numberConvert(value[0], value[1]);
0001de  466a              MOV      r2,sp
0001e0  7851              LDRB     r1,[r2,#1]
0001e2  7810              LDRB     r0,[r2,#0]
0001e4  f7fffffe          BL       numberConvert
0001e8  4605              MOV      r5,r0
;;;179    			y_value = numberConvert(value[2], value[3]);
0001ea  466a              MOV      r2,sp
0001ec  78d1              LDRB     r1,[r2,#3]
0001ee  7890              LDRB     r0,[r2,#2]
0001f0  f7fffffe          BL       numberConvert
0001f4  4606              MOV      r6,r0
;;;180    			z_value = numberConvert(value[4], value[5]);
0001f6  466a              MOV      r2,sp
0001f8  7951              LDRB     r1,[r2,#5]
0001fa  7910              LDRB     r0,[r2,#4]
0001fc  f7fffffe          BL       numberConvert
000200  4604              MOV      r4,r0
;;;181    			
;;;182    	// 		xprintf("%d,%d,%d,%d,%d,%d\r\n", value[0], value[1], value[2], value[3], value[4], value[5]);
;;;183    			xprintf("%d,%d,%d\r\n", x_value, y_value, z_value);
000202  4623              MOV      r3,r4
000204  4632              MOV      r2,r6
000206  4629              MOV      r1,r5
000208  a013              ADR      r0,|L1.600|
00020a  f7fffffe          BL       xprintf
;;;184    			nrf_delay_ms(1000);
00020e  207d              MOVS     r0,#0x7d
000210  00c0              LSLS     r0,r0,#3
000212  f7fffffe          BL       nrf_delay_ms
                  |L1.534|
000216  e7d3              B        |L1.448|
;;;185    		}
;;;186    	}
;;;187    }
                          ENDP

                  |L1.536|
                          DCD      SlaveAddressIIC
                  |L1.540|
00021c  72656164          DCB      "read MMA8452Q ID successful!\r\n",0
000220  204d4d41
000224  38343532
000228  51204944
00022c  20737563
000230  63657373
000234  66756c21
000238  0d0a00  
00023b  00                DCB      0
                  |L1.572|
00023c  72656164          DCB      "read MMA8452Q ID failed!\r\n",0
000240  204d4d41
000244  38343532
000248  51204944
00024c  20666169
000250  6c656421
000254  0d0a00  
000257  00                DCB      0
                  |L1.600|
000258  25642c25          DCB      "%d,%d,%d\r\n",0
00025c  642c2564
000260  0d0a00  
000263  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  SlaveAddressIIC
000000  1c                DCB      0x1c

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\mma8452q\\mma8452q.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_mma8452q_c_a6cb04c5____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_mma8452q_c_a6cb04c5____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_mma8452q_c_a6cb04c5____REVSH|
#line 130
|__asm___10_mma8452q_c_a6cb04c5____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_mma8452q_c_a6cb04c5__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___10_mma8452q_c_a6cb04c5__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
