; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\pwr_ctrl.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\pwr_ctrl.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\pwr_ctrl.crf ..\..\..\Software\Source\sys_work_handle\pwr_ctrl.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  battery_level_in_percent PROC
;;;65     */
;;;66     static __INLINE uint8_t battery_level_in_percent(const uint16_t mvolts)
000000  b570              PUSH     {r4-r6,lr}
;;;67     {
000002  4604              MOV      r4,r0
;;;68         uint8_t battery_level;
;;;69     
;;;70         if (mvolts >= 3000)
000004  48a0              LDR      r0,|L1.648|
000006  4284              CMP      r4,r0
000008  db01              BLT      |L1.14|
;;;71         {
;;;72             battery_level = 100;
00000a  2564              MOVS     r5,#0x64
00000c  e040              B        |L1.144|
                  |L1.14|
;;;73         }
;;;74         else if (mvolts > 2900)
00000e  489e              LDR      r0,|L1.648|
000010  3864              SUBS     r0,r0,#0x64
000012  4284              CMP      r4,r0
000014  dd0b              BLE      |L1.46|
;;;75         {
;;;76             battery_level = 100 - ((3000 - mvolts) * 58) / 100;
000016  499c              LDR      r1,|L1.648|
000018  1b09              SUBS     r1,r1,r4
00001a  223a              MOVS     r2,#0x3a
00001c  4351              MULS     r1,r2,r1
00001e  4608              MOV      r0,r1
000020  2164              MOVS     r1,#0x64
000022  f7fffffe          BL       __aeabi_idivmod
000026  2164              MOVS     r1,#0x64
000028  1a08              SUBS     r0,r1,r0
00002a  b2c5              UXTB     r5,r0
00002c  e030              B        |L1.144|
                  |L1.46|
;;;77         }
;;;78         else if (mvolts > 2740)
00002e  4897              LDR      r0,|L1.652|
000030  4284              CMP      r4,r0
000032  dd0c              BLE      |L1.78|
;;;79         {
;;;80             battery_level = 42 - ((2900 - mvolts) * 24) / 160;
000034  4994              LDR      r1,|L1.648|
000036  3964              SUBS     r1,r1,#0x64
000038  1b09              SUBS     r1,r1,r4
00003a  2218              MOVS     r2,#0x18
00003c  4351              MULS     r1,r2,r1
00003e  4608              MOV      r0,r1
000040  21a0              MOVS     r1,#0xa0
000042  f7fffffe          BL       __aeabi_idivmod
000046  212a              MOVS     r1,#0x2a
000048  1a08              SUBS     r0,r1,r0
00004a  b2c5              UXTB     r5,r0
00004c  e020              B        |L1.144|
                  |L1.78|
;;;81         }
;;;82         else if (mvolts > 2440)
00004e  4890              LDR      r0,|L1.656|
000050  4284              CMP      r4,r0
000052  dd0c              BLE      |L1.110|
;;;83         {
;;;84             battery_level = 18 - ((2740 - mvolts) * 12) / 300;
000054  498d              LDR      r1,|L1.652|
000056  1b09              SUBS     r1,r1,r4
000058  220c              MOVS     r2,#0xc
00005a  4351              MULS     r1,r2,r1
00005c  4608              MOV      r0,r1
00005e  21ff              MOVS     r1,#0xff
000060  312d              ADDS     r1,r1,#0x2d
000062  f7fffffe          BL       __aeabi_idivmod
000066  2112              MOVS     r1,#0x12
000068  1a08              SUBS     r0,r1,r0
00006a  b2c5              UXTB     r5,r0
00006c  e010              B        |L1.144|
                  |L1.110|
;;;85         }
;;;86         else if (mvolts > 2100)
00006e  4889              LDR      r0,|L1.660|
000070  4284              CMP      r4,r0
000072  dd0c              BLE      |L1.142|
;;;87         {
;;;88             battery_level = 6 - ((2440 - mvolts) * 6) / 340;
000074  4986              LDR      r1,|L1.656|
000076  1b09              SUBS     r1,r1,r4
000078  2206              MOVS     r2,#6
00007a  4351              MULS     r1,r2,r1
00007c  4608              MOV      r0,r1
00007e  21ff              MOVS     r1,#0xff
000080  3155              ADDS     r1,r1,#0x55
000082  f7fffffe          BL       __aeabi_idivmod
000086  2106              MOVS     r1,#6
000088  1a08              SUBS     r0,r1,r0
00008a  b2c5              UXTB     r5,r0
00008c  e000              B        |L1.144|
                  |L1.142|
;;;89         }
;;;90         else
;;;91         {
;;;92             battery_level = 0;
00008e  2500              MOVS     r5,#0
                  |L1.144|
;;;93         }
;;;94     
;;;95         return battery_level;
000090  4628              MOV      r0,r5
;;;96     }
000092  bd70              POP      {r4-r6,pc}
;;;97     
                          ENDP

                  ADC_IRQHandler PROC
;;;103     */
;;;104    void ADC_IRQHandler(void)
000094  b570              PUSH     {r4-r6,lr}
;;;105    {
;;;106        uint8_t     adc_result;
;;;107        uint16_t    batt_lvl_in_milli_volts;
;;;108        uint8_t     percentage_batt_lvl;
;;;109    
;;;110        if (NRF_ADC->EVENTS_END != 0)
000096  4880              LDR      r0,|L1.664|
000098  6800              LDR      r0,[r0,#0]
00009a  2800              CMP      r0,#0
00009c  d022              BEQ      |L1.228|
;;;111        {
;;;112            NRF_ADC->EVENTS_END     = 0;
00009e  2000              MOVS     r0,#0
0000a0  497d              LDR      r1,|L1.664|
0000a2  6008              STR      r0,[r1,#0]
;;;113    
;;;114            adc_result              = NRF_ADC->RESULT;
0000a4  487d              LDR      r0,|L1.668|
0000a6  6880              LDR      r0,[r0,#8]
0000a8  b2c4              UXTB     r4,r0
;;;115            NRF_ADC->TASKS_STOP     = 1;
0000aa  2001              MOVS     r0,#1
0000ac  497c              LDR      r1,|L1.672|
0000ae  6048              STR      r0,[r1,#4]
;;;116    
;;;117            // battery value
;;;118            batt_lvl_in_milli_volts = ADC_RESULT_IN_MILLI_VOLTS(adc_result); //+
0000b0  214b              MOVS     r1,#0x4b
0000b2  0109              LSLS     r1,r1,#4
0000b4  4361              MULS     r1,r4,r1
0000b6  4608              MOV      r0,r1
0000b8  21ff              MOVS     r1,#0xff
0000ba  f7fffffe          BL       __aeabi_idivmod
0000be  0041              LSLS     r1,r0,#1
0000c0  1840              ADDS     r0,r0,r1
0000c2  b285              UXTH     r5,r0
;;;119            //DIODE_FWD_VOLT_DROP_MILLIVOLTS;
;;;120            // battery percentage
;;;121            percentage_batt_lvl     = battery_level_in_percent(batt_lvl_in_milli_volts);
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       battery_level_in_percent
0000ca  4606              MOV      r6,r0
;;;122    
;;;123            xprintf("the adc_result is %d. \r\n", adc_result);
0000cc  4621              MOV      r1,r4
0000ce  a075              ADR      r0,|L1.676|
0000d0  f7fffffe          BL       xprintf
;;;124            xprintf("the battery's voltage value is %d.\r\n", batt_lvl_in_milli_volts );
0000d4  4629              MOV      r1,r5
0000d6  a07a              ADR      r0,|L1.704|
0000d8  f7fffffe          BL       xprintf
;;;125            xprintf("the percentage of the battery is %d %. \r\n", percentage_batt_lvl );
0000dc  4631              MOV      r1,r6
0000de  a082              ADR      r0,|L1.744|
0000e0  f7fffffe          BL       xprintf
                  |L1.228|
;;;126    
;;;127        }
;;;128    }
0000e4  bd70              POP      {r4-r6,pc}
;;;129    
                          ENDP

                  battery_INT_start PROC
;;;130    // 窮学殊霞。。。。。。。。。。。。。。。。。。。。。。。。。。。。。
;;;131    void battery_INT_start(void)
0000e6  b510              PUSH     {r4,lr}
;;;132    {
;;;133        // Configure ADC, INT enable.
;;;134        NRF_ADC->INTENSET   = ADC_INTENSET_END_Msk;
0000e8  2001              MOVS     r0,#1
0000ea  498a              LDR      r1,|L1.788|
0000ec  6048              STR      r0,[r1,#4]
;;;135        // 8bit, Supply voltage with 1/3 prescaling, Use internal 1.2V bandgap voltage
;;;136        // Analog input pins disabled, Analog external reference inputs disabled.
;;;137        NRF_ADC->CONFIG     = (ADC_CONFIG_RES_8bit                        << ADC_CONFIG_RES_Pos)     |
0000ee  2018              MOVS     r0,#0x18
0000f0  496a              LDR      r1,|L1.668|
0000f2  6048              STR      r0,[r1,#4]
;;;138                              (ADC_CONFIG_INPSEL_SupplyOneThirdPrescaling << ADC_CONFIG_INPSEL_Pos)  |
;;;139                              (ADC_CONFIG_REFSEL_VBG                      << ADC_CONFIG_REFSEL_Pos)  |
;;;140                              (ADC_CONFIG_PSEL_Disabled                   << ADC_CONFIG_PSEL_Pos)    |
;;;141                              (ADC_CONFIG_EXTREFSEL_None                  << ADC_CONFIG_EXTREFSEL_Pos);
;;;142        // Clear an ADC conversion is completed.
;;;143        NRF_ADC->EVENTS_END = 0;
0000f4  2000              MOVS     r0,#0
0000f6  4968              LDR      r1,|L1.664|
0000f8  6008              STR      r0,[r1,#0]
;;;144        // ADC is enabled.
;;;145        NRF_ADC->ENABLE     = ADC_ENABLE_ENABLE_Enabled;
0000fa  2001              MOVS     r0,#1
0000fc  4967              LDR      r1,|L1.668|
0000fe  6008              STR      r0,[r1,#0]
;;;146    
;;;147        // Enable ADC interrupt
;;;148        NVIC_ClearPendingIRQ(ADC_IRQn);
000100  2007              MOVS     r0,#7
000102  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;149    
;;;150        NVIC_EnableIRQ(ADC_IRQn);
000106  2007              MOVS     r0,#7
000108  f7fffffe          BL       NVIC_EnableIRQ
;;;151    
;;;152        NRF_ADC->EVENTS_END  = 0;    // Stop any running conversions.
00010c  2000              MOVS     r0,#0
00010e  4962              LDR      r1,|L1.664|
000110  6008              STR      r0,[r1,#0]
;;;153        NRF_ADC->TASKS_START = 1;    // Start an ADC conversion
000112  2001              MOVS     r0,#1
000114  4962              LDR      r1,|L1.672|
000116  6008              STR      r0,[r1,#0]
;;;154    }
000118  bd10              POP      {r4,pc}
;;;155    
                          ENDP

                  voltage_start PROC
;;;158    //  翌何窮儿殊霞
;;;159    void voltage_start(void)
00011a  b510              PUSH     {r4,lr}
;;;160    {
;;;161        nrf_gpio_cfg_input(5, NRF_GPIO_PIN_NOPULL);
00011c  2100              MOVS     r1,#0
00011e  2005              MOVS     r0,#5
000120  f7fffffe          BL       nrf_gpio_cfg_input
;;;162        nrf_gpio_cfg_input(3, NRF_GPIO_PIN_NOPULL);
000124  2100              MOVS     r1,#0
000126  2003              MOVS     r0,#3
000128  f7fffffe          BL       nrf_gpio_cfg_input
;;;163        // Configure ADC, INT enable.
;;;164        NRF_ADC->INTENSET   = ADC_INTENSET_END_Msk;
00012c  2001              MOVS     r0,#1
00012e  4979              LDR      r1,|L1.788|
000130  6048              STR      r0,[r1,#4]
;;;165        // 8bit, input voltage with 1/3 prescaling, Use external voltage as reference
;;;166        // Analog input pins0, Analog external reference inputs1.
;;;167        NRF_ADC->CONFIG     = (ADC_CONFIG_RES_8bit                                  << ADC_CONFIG_RES_Pos)     |
000132  4879              LDR      r0,|L1.792|
000134  4959              LDR      r1,|L1.668|
000136  6048              STR      r0,[r1,#4]
;;;168                              (ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling      << ADC_CONFIG_INPSEL_Pos)  |
;;;169                              (ADC_CONFIG_REFSEL_VBG           << ADC_CONFIG_REFSEL_Pos)  |
;;;170                              (ADC_CONFIG_PSEL_AnalogInput4                         << ADC_CONFIG_PSEL_Pos)    |
;;;171                              (ADC_CONFIG_EXTREFSEL_None                            << ADC_CONFIG_EXTREFSEL_Pos);
;;;172        // Clear an ADC conversion is completed.
;;;173        NRF_ADC->EVENTS_END = 0;
000138  2000              MOVS     r0,#0
00013a  4957              LDR      r1,|L1.664|
00013c  6008              STR      r0,[r1,#0]
;;;174        // ADC is enabled.
;;;175        NRF_ADC->ENABLE     = ADC_ENABLE_ENABLE_Enabled;
00013e  2001              MOVS     r0,#1
000140  4956              LDR      r1,|L1.668|
000142  6008              STR      r0,[r1,#0]
;;;176    
;;;177        // Enable ADC interrupt
;;;178        NVIC_ClearPendingIRQ(ADC_IRQn);
000144  2007              MOVS     r0,#7
000146  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;179    
;;;180        NVIC_EnableIRQ(ADC_IRQn);
00014a  2007              MOVS     r0,#7
00014c  f7fffffe          BL       NVIC_EnableIRQ
;;;181    
;;;182        NRF_ADC->EVENTS_END  = 0;    // Stop any running conversions.
000150  2000              MOVS     r0,#0
000152  4951              LDR      r1,|L1.664|
000154  6008              STR      r0,[r1,#0]
;;;183        //NRF_ADC->TASKS_START = 1;    // Start an ADC conversion
;;;184    }
000156  bd10              POP      {r4,pc}
;;;185    
                          ENDP

                  battery_self_detect PROC
;;;187    // 蝕字殊霞
;;;188    bool battery_self_detect()
000158  b570              PUSH     {r4-r6,lr}
;;;189    {
;;;190        uint8_t     adc_result;
;;;191        uint16_t    batt_lvl_in_milli_volts;
;;;192    
;;;193        // 8bit, Supply voltage with 1/3 prescaling, Use internal 1.2V bandgap voltage
;;;194        // Analog input pins disabled, Analog external reference inputs disabled.
;;;195        NRF_ADC->CONFIG     = (ADC_CONFIG_RES_8bit                        << ADC_CONFIG_RES_Pos)     |
00015a  2018              MOVS     r0,#0x18
00015c  494f              LDR      r1,|L1.668|
00015e  6048              STR      r0,[r1,#4]
;;;196                              (ADC_CONFIG_INPSEL_SupplyOneThirdPrescaling << ADC_CONFIG_INPSEL_Pos)  |
;;;197                              (ADC_CONFIG_REFSEL_VBG                      << ADC_CONFIG_REFSEL_Pos)  |
;;;198                              (ADC_CONFIG_PSEL_Disabled                   << ADC_CONFIG_PSEL_Pos)    |
;;;199                              (ADC_CONFIG_EXTREFSEL_None                  << ADC_CONFIG_EXTREFSEL_Pos);
;;;200        // Clear an ADC conversion is completed.
;;;201        NRF_ADC->EVENTS_END     = 0;
000160  2000              MOVS     r0,#0
000162  494d              LDR      r1,|L1.664|
000164  6008              STR      r0,[r1,#0]
;;;202        NRF_ADC->ENABLE         = ADC_ENABLE_ENABLE_Enabled;
000166  2001              MOVS     r0,#1
000168  494c              LDR      r1,|L1.668|
00016a  6008              STR      r0,[r1,#0]
;;;203    
;;;204        NRF_ADC->TASKS_START    = 1;
00016c  494c              LDR      r1,|L1.672|
00016e  6008              STR      r0,[r1,#0]
;;;205        while(NRF_ADC->EVENTS_END  == 0);
000170  bf00              NOP      
                  |L1.370|
000172  4849              LDR      r0,|L1.664|
000174  6800              LDR      r0,[r0,#0]
000176  2800              CMP      r0,#0
000178  d0fb              BEQ      |L1.370|
;;;206    
;;;207        NRF_ADC->EVENTS_END     = 0;
00017a  2000              MOVS     r0,#0
00017c  4946              LDR      r1,|L1.664|
00017e  6008              STR      r0,[r1,#0]
;;;208    
;;;209        adc_result              = NRF_ADC->RESULT;
000180  4846              LDR      r0,|L1.668|
000182  6880              LDR      r0,[r0,#8]
000184  b2c4              UXTB     r4,r0
;;;210        NRF_ADC->TASKS_STOP     = 1;
000186  2001              MOVS     r0,#1
000188  4945              LDR      r1,|L1.672|
00018a  6048              STR      r0,[r1,#4]
;;;211    
;;;212        // battery value
;;;213        batt_lvl_in_milli_volts = ADC_RESULT_IN_MILLI_VOLTS(adc_result); //+
00018c  214b              MOVS     r1,#0x4b
00018e  0109              LSLS     r1,r1,#4
000190  4361              MULS     r1,r4,r1
000192  4608              MOV      r0,r1
000194  21ff              MOVS     r1,#0xff
000196  f7fffffe          BL       __aeabi_idivmod
00019a  0041              LSLS     r1,r0,#1
00019c  1840              ADDS     r0,r0,r1
00019e  b285              UXTH     r5,r0
;;;214        //DIODE_FWD_VOLT_DROP_MILLIVOLTS;
;;;215        // battery percentage
;;;216        system_battery_level     = battery_level_in_percent(batt_lvl_in_milli_volts);
0001a0  4628              MOV      r0,r5
0001a2  f7fffffe          BL       battery_level_in_percent
0001a6  495d              LDR      r1,|L1.796|
0001a8  7008              STRB     r0,[r1,#0]
;;;217    
;;;218        xprintf("the adc_result is %d. \r\n", adc_result);
0001aa  4621              MOV      r1,r4
0001ac  a03d              ADR      r0,|L1.676|
0001ae  f7fffffe          BL       xprintf
;;;219        xprintf("the battery's voltage value is %d.\r\n", batt_lvl_in_milli_volts );
0001b2  4629              MOV      r1,r5
0001b4  a042              ADR      r0,|L1.704|
0001b6  f7fffffe          BL       xprintf
;;;220        xprintf("the percentage of the battery is %d %. \r\n", system_battery_level );
0001ba  4858              LDR      r0,|L1.796|
0001bc  7801              LDRB     r1,[r0,#0]  ; system_battery_level
0001be  a04a              ADR      r0,|L1.744|
0001c0  f7fffffe          BL       xprintf
;;;221        if(system_battery_level >6)
0001c4  4855              LDR      r0,|L1.796|
0001c6  7800              LDRB     r0,[r0,#0]  ; system_battery_level
0001c8  2806              CMP      r0,#6
0001ca  dd01              BLE      |L1.464|
;;;222            return true;
0001cc  2001              MOVS     r0,#1
                  |L1.462|
;;;223        return false;
;;;224    }
0001ce  bd70              POP      {r4-r6,pc}
                  |L1.464|
0001d0  2000              MOVS     r0,#0                 ;223
0001d2  e7fc              B        |L1.462|
;;;225    
                          ENDP

                  battery_detect_start PROC
;;;226     
;;;227    void battery_detect_start()
0001d4  2001              MOVS     r0,#1
;;;228    {
;;;229        NRF_ADC->TASKS_START = 1;
0001d6  4932              LDR      r1,|L1.672|
0001d8  6008              STR      r0,[r1,#0]
;;;230    }
0001da  4770              BX       lr
;;;231    
                          ENDP

                  battery_is_available PROC
;;;232    bool battery_is_available()
0001dc  482e              LDR      r0,|L1.664|
;;;233    {
;;;234        if( (NRF_ADC->EVENTS_END) == 0)
0001de  6800              LDR      r0,[r0,#0]
0001e0  2800              CMP      r0,#0
0001e2  d100              BNE      |L1.486|
                  |L1.484|
;;;235            return false;
;;;236        else 
;;;237            return true;
;;;238        
;;;239    }
0001e4  4770              BX       lr
                  |L1.486|
0001e6  2001              MOVS     r0,#1                 ;237
0001e8  e7fc              B        |L1.484|
;;;240    
                          ENDP

                  battery_detect_stop PROC
;;;241    void battery_detect_stop()
0001ea  2000              MOVS     r0,#0
;;;242    {
;;;243        NRF_ADC->EVENTS_END     = 0;
0001ec  492a              LDR      r1,|L1.664|
0001ee  6008              STR      r0,[r1,#0]
;;;244        NRF_ADC->TASKS_STOP     = 1;
0001f0  2001              MOVS     r0,#1
0001f2  492b              LDR      r1,|L1.672|
0001f4  6048              STR      r0,[r1,#4]
;;;245    }
0001f6  4770              BX       lr
;;;246    
                          ENDP

                  get_battery_value PROC
;;;247    uint8_t get_battery_value()
0001f8  b570              PUSH     {r4-r6,lr}
;;;248    {
;;;249        uint8_t     adc_result;
;;;250        uint16_t    batt_lvl_in_milli_volts;
;;;251        
;;;252        NRF_ADC->EVENTS_END     = 0;
0001fa  2000              MOVS     r0,#0
0001fc  4926              LDR      r1,|L1.664|
0001fe  6008              STR      r0,[r1,#0]
;;;253        adc_result              = NRF_ADC->RESULT;
000200  4826              LDR      r0,|L1.668|
000202  6880              LDR      r0,[r0,#8]
000204  b2c4              UXTB     r4,r0
;;;254    
;;;255        batt_lvl_in_milli_volts = ADC_RESULT_IN_MILLI_VOLTS(adc_result); 
000206  214b              MOVS     r1,#0x4b
000208  0109              LSLS     r1,r1,#4
00020a  4361              MULS     r1,r4,r1
00020c  4608              MOV      r0,r1
00020e  21ff              MOVS     r1,#0xff
000210  f7fffffe          BL       __aeabi_idivmod
000214  0041              LSLS     r1,r0,#1
000216  1840              ADDS     r0,r0,r1
000218  b285              UXTH     r5,r0
;;;256        return battery_level_in_percent(batt_lvl_in_milli_volts);
00021a  4628              MOV      r0,r5
00021c  f7fffffe          BL       battery_level_in_percent
;;;257    }
000220  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP

                  system_off_set PROC
;;;259     
;;;260    void system_off_set()
000222  b510              PUSH     {r4,lr}
;;;261    {               
;;;262        NRF_POWER->INTENSET = 0x01;  
000224  2001              MOVS     r0,#1
000226  493e              LDR      r1,|L1.800|
000228  6048              STR      r0,[r1,#4]
;;;263        NRF_POWER->RAMON = NRF_POWER->RAMON|0x000f0000;
00022a  483e              LDR      r0,|L1.804|
00022c  6a40              LDR      r0,[r0,#0x24]
00022e  210f              MOVS     r1,#0xf
000230  0409              LSLS     r1,r1,#16
000232  4308              ORRS     r0,r0,r1
000234  493b              LDR      r1,|L1.804|
000236  6248              STR      r0,[r1,#0x24]
;;;264        nrf_delay_ms(30);
000238  201e              MOVS     r0,#0x1e
00023a  f7fffffe          BL       nrf_delay_ms
;;;265        
;;;266        NRF_POWER->SYSTEMOFF = 0x01;
00023e  2001              MOVS     r0,#1
000240  4938              LDR      r1,|L1.804|
000242  6008              STR      r0,[r1,#0]
;;;267    }
000244  bd10              POP      {r4,pc}
;;;268    
                          ENDP

                  system_on_sleep PROC
;;;269     
;;;270    void system_on_sleep()
000246  b510              PUSH     {r4,lr}
;;;271    {
;;;272        xprintf("system is going to sleep..z..z..Z...\r\n");
000248  a037              ADR      r0,|L1.808|
00024a  f7fffffe          BL       xprintf
;;;273        NRF_POWER->TASKS_LOWPWR = 0x01;
00024e  2001              MOVS     r0,#1
000250  493f              LDR      r1,|L1.848|
000252  63c8              STR      r0,[r1,#0x3c]
;;;274        __WFI();
000254  bf30              WFI      
;;;275    }
000256  bd10              POP      {r4,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;499     */
;;;500    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000258  06c2              LSLS     r2,r0,#27
;;;501    {
;;;502      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
00025a  0ed2              LSRS     r2,r2,#27
00025c  2101              MOVS     r1,#1
00025e  4091              LSLS     r1,r1,r2
000260  4a3c              LDR      r2,|L1.852|
000262  6011              STR      r1,[r2,#0]
;;;503    }
000264  4770              BX       lr
;;;504    
                          ENDP

                  NVIC_ClearPendingIRQ PROC
;;;551     */
;;;552    __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000266  06c2              LSLS     r2,r0,#27
;;;553    {
;;;554      NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
000268  0ed2              LSRS     r2,r2,#27
00026a  2101              MOVS     r1,#1
00026c  4091              LSLS     r1,r1,r2
00026e  4a3a              LDR      r2,|L1.856|
000270  6011              STR      r1,[r2,#0]
;;;555    }
000272  4770              BX       lr
;;;556    
                          ENDP

                  nrf_gpio_cfg_input PROC
;;;140     */
;;;141    static __INLINE void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config)
000274  b510              PUSH     {r4,lr}
;;;142    {
;;;143        /*lint -e{845} // A zero has been given as right argument to operator '|'" */
;;;144        NRF_GPIO->PIN_CNF[pin_number] = (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos)
000276  008a              LSLS     r2,r1,#2
000278  2305              MOVS     r3,#5
00027a  071b              LSLS     r3,r3,#28
00027c  2407              MOVS     r4,#7
00027e  0224              LSLS     r4,r4,#8
000280  191b              ADDS     r3,r3,r4
000282  0084              LSLS     r4,r0,#2
000284  511a              STR      r2,[r3,r4]
;;;145                                            | (GPIO_PIN_CNF_DRIVE_S0S1 << GPIO_PIN_CNF_DRIVE_Pos)
;;;146                                            | (pull_config << GPIO_PIN_CNF_PULL_Pos)
;;;147                                            | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos)
;;;148                                            | (GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);
;;;149    }
000286  bd10              POP      {r4,pc}
;;;150    
                          ENDP

                  |L1.648|
                          DCD      0x00000bb8
                  |L1.652|
                          DCD      0x00000ab4
                  |L1.656|
                          DCD      0x00000988
                  |L1.660|
                          DCD      0x00000834
                  |L1.664|
                          DCD      0x40007100
                  |L1.668|
                          DCD      0x40007500
                  |L1.672|
                          DCD      0x40007000
                  |L1.676|
0002a4  74686520          DCB      "the adc_result is %d. \r\n",0
0002a8  6164635f
0002ac  72657375
0002b0  6c742069
0002b4  73202564
0002b8  2e200d0a
0002bc  00      
0002bd  00                DCB      0
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L1.704|
0002c0  74686520          DCB      "the battery's voltage value is %d.\r\n",0
0002c4  62617474
0002c8  65727927
0002cc  7320766f
0002d0  6c746167
0002d4  65207661
0002d8  6c756520
0002dc  69732025
0002e0  642e0d0a
0002e4  00      
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L1.744|
0002e8  74686520          DCB      "the percentage of the battery is %d %. \r\n",0
0002ec  70657263
0002f0  656e7461
0002f4  6765206f
0002f8  66207468
0002fc  65206261
000300  74746572
000304  79206973
000308  20256420
00030c  252e200d
000310  0a00    
000312  00                DCB      0
000313  00                DCB      0
                  |L1.788|
                          DCD      0x40007300
                  |L1.792|
                          DCD      0x00001008
                  |L1.796|
                          DCD      system_battery_level
                  |L1.800|
                          DCD      0x40000300
                  |L1.804|
                          DCD      0x40000500
                  |L1.808|
000328  73797374          DCB      "system is going to sleep..z..z..Z...\r\n",0
00032c  656d2069
000330  7320676f
000334  696e6720
000338  746f2073
00033c  6c656570
000340  2e2e7a2e
000344  2e7a2e2e
000348  5a2e2e2e
00034c  0d0a00  
00034f  00                DCB      0
                  |L1.848|
                          DCD      0x40000040
                  |L1.852|
                          DCD      0xe000e100
                  |L1.856|
                          DCD      0xe000e280

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\sys_work_handle\\pwr_ctrl.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_pwr_ctrl_c_ba439d72____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_pwr_ctrl_c_ba439d72____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_pwr_ctrl_c_ba439d72____REVSH|
#line 130
|__asm___10_pwr_ctrl_c_ba439d72____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_pwr_ctrl_c_ba439d72__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___10_pwr_ctrl_c_ba439d72__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
