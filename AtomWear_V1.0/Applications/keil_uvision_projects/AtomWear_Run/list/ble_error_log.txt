; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\ble_error_log.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ble_error_log.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\ble_error_log.crf ..\..\..\Software\Source\ble_lib\ble_error_log.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  fetch_stack PROC
;;;30     
;;;31     static void fetch_stack(ble_error_log_data_t * error_log)
000000  b5f8              PUSH     {r3-r7,lr}
;;;32     {
000002  4604              MOV      r4,r0
;;;33         uint32_t * p_stack;
;;;34         uint32_t * initial_sp;
;;;35         uint32_t   length;
;;;36       
;;;37         initial_sp = (uint32_t *) __Vectors;
000004  485a              LDR      r0,|L1.368|
000006  6806              LDR      r6,[r0,#0]  ; __Vectors
;;;38         p_stack    = (uint32_t *) __current_sp();
000008  466d              MOV      r5,sp
;;;39       
;;;40         length = ((uint32_t) initial_sp) - ((uint32_t) p_stack);
00000a  1b77              SUBS     r7,r6,r5
;;;41         memcpy(error_log->stack_info, 
00000c  20ff              MOVS     r0,#0xff
00000e  3001              ADDS     r0,#1
000010  4287              CMP      r7,r0
000012  d900              BLS      |L1.22|
;;;42                p_stack, 
;;;43                (length > STACK_DUMP_LENGTH) ? STACK_DUMP_LENGTH : length);
000014  e000              B        |L1.24|
                  |L1.22|
000016  4638              MOV      r0,r7
                  |L1.24|
000018  4602              MOV      r2,r0
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  3088              ADDS     r0,r0,#0x88
000020  f7fffffe          BL       __aeabi_memcpy4
;;;44     }
000024  bdf8              POP      {r3-r7,pc}
;;;45     
                          ENDP

                  ble_error_log_write PROC
;;;46     
;;;47     uint32_t ble_error_log_write(uint32_t err_code, const uint8_t * p_message, uint16_t line_number)
000026  b5f8              PUSH     {r3-r7,lr}
;;;48     {
000028  4604              MOV      r4,r0
00002a  460f              MOV      r7,r1
00002c  4615              MOV      r5,r2
;;;49         uint8_t  error_log_size;
;;;50     
;;;51         error_log_size              = CEIL_DIV(sizeof(ble_error_log_data_t), sizeof(uint32_t));
00002e  2062              MOVS     r0,#0x62
000030  9000              STR      r0,[sp,#0]
;;;52         m_ble_error_log.failure     = true;
000032  2001              MOVS     r0,#1
000034  494f              LDR      r1,|L1.372|
000036  8008              STRH     r0,[r1,#0]
;;;53         m_ble_error_log.err_code    = err_code;
000038  4608              MOV      r0,r1
00003a  6044              STR      r4,[r0,#4]  ; m_ble_error_log
;;;54         m_ble_error_log.line_number = line_number;
00003c  8045              STRH     r5,[r0,#2]
;;;55     
;;;56         strncpy((char *)m_ble_error_log.message, (const char *)p_message, ERROR_MESSAGE_LENGTH - 1);
00003e  227f              MOVS     r2,#0x7f
000040  4639              MOV      r1,r7
000042  3008              ADDS     r0,r0,#8
000044  f7fffffe          BL       strncpy
;;;57         m_ble_error_log.message[ERROR_MESSAGE_LENGTH - 1] = '\0';
000048  2100              MOVS     r1,#0
00004a  484a              LDR      r0,|L1.372|
00004c  3068              ADDS     r0,r0,#0x68
00004e  77c1              STRB     r1,[r0,#0x1f]
;;;58     
;;;59         fetch_stack(&m_ble_error_log);
000050  3868              SUBS     r0,r0,#0x68
000052  f7fffffe          BL       fetch_stack
;;;60     
;;;61         return ble_flash_page_write(FLASH_PAGE_ERROR_LOG,
000056  4848              LDR      r0,|L1.376|
000058  6940              LDR      r0,[r0,#0x14]
00005a  1c40              ADDS     r0,r0,#1
00005c  d008              BEQ      |L1.112|
00005e  2201              MOVS     r2,#1
000060  0712              LSLS     r2,r2,#28
000062  6912              LDR      r2,[r2,#0x10]
000064  b291              UXTH     r1,r2
000066  4a44              LDR      r2,|L1.376|
000068  6950              LDR      r0,[r2,#0x14]
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  e002              B        |L1.118|
                  |L1.112|
000070  2001              MOVS     r0,#1
000072  0700              LSLS     r0,r0,#28
000074  6940              LDR      r0,[r0,#0x14]
                  |L1.118|
000076  1e80              SUBS     r0,r0,#2
000078  b2c6              UXTB     r6,r0
00007a  493e              LDR      r1,|L1.372|
00007c  4630              MOV      r0,r6
00007e  9a00              LDR      r2,[sp,#0]
000080  f7fffffe          BL       ble_flash_page_write
;;;62                                     (uint32_t *) &m_ble_error_log,
;;;63                                     error_log_size);
;;;64     }
000084  bdf8              POP      {r3-r7,pc}
;;;65     
                          ENDP

                  ble_error_log_read PROC
;;;66     
;;;67     uint32_t ble_error_log_read(ble_error_log_data_t * error_log)
000086  b5f8              PUSH     {r3-r7,lr}
;;;68     {
000088  4604              MOV      r4,r0
;;;69         uint8_t  error_log_size = CEIL_DIV(sizeof(ble_error_log_data_t), sizeof(uint32_t));
00008a  2062              MOVS     r0,#0x62
00008c  9000              STR      r0,[sp,#0]
;;;70         uint32_t err_code       = NRF_SUCCESS;
00008e  2500              MOVS     r5,#0
;;;71         
;;;72         err_code = ble_flash_page_read(FLASH_PAGE_ERROR_LOG, (uint32_t *) error_log, &error_log_size);
000090  4839              LDR      r0,|L1.376|
000092  6940              LDR      r0,[r0,#0x14]
000094  1c40              ADDS     r0,r0,#1
000096  d008              BEQ      |L1.170|
000098  2201              MOVS     r2,#1
00009a  0712              LSLS     r2,r2,#28
00009c  6912              LDR      r2,[r2,#0x10]
00009e  b291              UXTH     r1,r2
0000a0  4a35              LDR      r2,|L1.376|
0000a2  6950              LDR      r0,[r2,#0x14]
0000a4  f7fffffe          BL       __aeabi_uidivmod
0000a8  e002              B        |L1.176|
                  |L1.170|
0000aa  2001              MOVS     r0,#1
0000ac  0700              LSLS     r0,r0,#28
0000ae  6940              LDR      r0,[r0,#0x14]
                  |L1.176|
0000b0  1e80              SUBS     r0,r0,#2
0000b2  b2c6              UXTB     r6,r0
0000b4  466a              MOV      r2,sp
0000b6  4621              MOV      r1,r4
0000b8  4630              MOV      r0,r6
0000ba  f7fffffe          BL       ble_flash_page_read
0000be  4605              MOV      r5,r0
;;;73         
;;;74         // If nothing is in flash; then return NRF_SUCCESS.
;;;75         if (err_code == NRF_ERROR_NOT_FOUND)
0000c0  2d05              CMP      r5,#5
0000c2  d101              BNE      |L1.200|
;;;76         {
;;;77             return NRF_SUCCESS;
0000c4  2000              MOVS     r0,#0
                  |L1.198|
;;;78         }
;;;79     
;;;80         if (err_code != NRF_SUCCESS)
;;;81         {
;;;82             return err_code;
;;;83         }
;;;84     
;;;85         if (!error_log->failure)
;;;86         {
;;;87             return NRF_SUCCESS;
;;;88         }
;;;89     
;;;90         nrf_gpio_pin_set(LOG_LED_PIN_NO); // Notify that a message exists in the log.
;;;91     
;;;92         while (error_log->failure && !m_ble_log_clear_flag)
;;;93         {
;;;94             // Put breakpoint, and read data, then log->failure=false; to continue in debug mode.
;;;95             // In application, define how to clear the error log, 
;;;96             // e.g. read button 6, if pressed, then clear log and continue.
;;;97         }
;;;98         
;;;99         nrf_gpio_pin_clear(LOG_LED_PIN_NO);
;;;100        err_code = ble_flash_page_erase(FLASH_PAGE_ERROR_LOG);
;;;101    
;;;102        return err_code;
;;;103    }
0000c6  bdf8              POP      {r3-r7,pc}
                  |L1.200|
0000c8  2d00              CMP      r5,#0                 ;80
0000ca  d001              BEQ      |L1.208|
0000cc  4628              MOV      r0,r5                 ;82
0000ce  e7fa              B        |L1.198|
                  |L1.208|
0000d0  8820              LDRH     r0,[r4,#0]            ;85
0000d2  2800              CMP      r0,#0                 ;85
0000d4  d100              BNE      |L1.216|
0000d6  e7f6              B        |L1.198|
                  |L1.216|
0000d8  200e              MOVS     r0,#0xe               ;90
0000da  2101              MOVS     r1,#1                 ;90
0000dc  4081              LSLS     r1,r1,r0              ;90
0000de  4a27              LDR      r2,|L1.380|
0000e0  6091              STR      r1,[r2,#8]            ;90
0000e2  bf00              NOP                            ;90
0000e4  bf00              NOP                            ;92
                  |L1.230|
0000e6  8820              LDRH     r0,[r4,#0]            ;92
0000e8  2800              CMP      r0,#0                 ;92
0000ea  d003              BEQ      |L1.244|
0000ec  4824              LDR      r0,|L1.384|
0000ee  7800              LDRB     r0,[r0,#0]            ;92  ; m_ble_log_clear_flag
0000f0  2800              CMP      r0,#0                 ;92
0000f2  d0f8              BEQ      |L1.230|
                  |L1.244|
0000f4  200e              MOVS     r0,#0xe               ;99
0000f6  2101              MOVS     r1,#1                 ;99
0000f8  4081              LSLS     r1,r1,r0              ;99
0000fa  4a20              LDR      r2,|L1.380|
0000fc  60d1              STR      r1,[r2,#0xc]          ;99
0000fe  bf00              NOP                            ;99
000100  481d              LDR      r0,|L1.376|
000102  6940              LDR      r0,[r0,#0x14]         ;100
000104  1c40              ADDS     r0,r0,#1              ;100
000106  d008              BEQ      |L1.282|
000108  2201              MOVS     r2,#1                 ;100
00010a  0712              LSLS     r2,r2,#28             ;100
00010c  6912              LDR      r2,[r2,#0x10]         ;100
00010e  b291              UXTH     r1,r2                 ;100
000110  4a19              LDR      r2,|L1.376|
000112  6950              LDR      r0,[r2,#0x14]         ;100
000114  f7fffffe          BL       __aeabi_uidivmod
000118  e002              B        |L1.288|
                  |L1.282|
00011a  2001              MOVS     r0,#1                 ;100
00011c  0700              LSLS     r0,r0,#28             ;100
00011e  6940              LDR      r0,[r0,#0x14]         ;100
                  |L1.288|
000120  1e80              SUBS     r0,r0,#2              ;100
000122  b2c6              UXTB     r6,r0                 ;100
000124  4630              MOV      r0,r6                 ;100
000126  f7fffffe          BL       ble_flash_page_erase
00012a  4605              MOV      r5,r0                 ;100
00012c  4628              MOV      r0,r5                 ;102
00012e  e7ca              B        |L1.198|
;;;104    
                          ENDP

                  ble_error_log_clear PROC
;;;105    
;;;106    void ble_error_log_clear(void)
000130  2001              MOVS     r0,#1
;;;107    {
;;;108        m_ble_log_clear_flag = 1;
000132  4913              LDR      r1,|L1.384|
000134  7008              STRB     r0,[r1,#0]
;;;109    }
000136  4770              BX       lr
;;;110    
                          ENDP

                  ble_error_log_init PROC
;;;111    
;;;112    void ble_error_log_init(void)
000138  b570              PUSH     {r4-r6,lr}
;;;113    {
;;;114        // Variable made volatile in order to avoid optimization.
;;;115        // If an assert has been seen, and the old stack must be fetched, 
;;;116        // then find the assembly entry of this function in the map file 
;;;117        // and set 'read_error_log = true' in the debugger to break execution.
;;;118        volatile bool read_error_log = false;
00013a  2500              MOVS     r5,#0
;;;119        uint32_t      err_code;
;;;120    
;;;121        if (read_error_log)
00013c  2d00              CMP      r5,#0
00013e  d015              BEQ      |L1.364|
;;;122        {
;;;123            err_code = ble_error_log_read(&m_ble_error_log);
000140  480c              LDR      r0,|L1.372|
000142  f7fffffe          BL       ble_error_log_read
000146  4604              MOV      r4,r0
;;;124            APP_ERROR_CHECK_BOOL(err_code == NRF_SUCCESS || err_code == NRF_ERROR_NOT_FOUND);
000148  bf00              NOP      
00014a  2c00              CMP      r4,#0
00014c  d001              BEQ      |L1.338|
00014e  2c05              CMP      r4,#5
000150  d101              BNE      |L1.342|
                  |L1.338|
000152  2001              MOVS     r0,#1
000154  e000              B        |L1.344|
                  |L1.342|
000156  2000              MOVS     r0,#0
                  |L1.344|
000158  4606              MOV      r6,r0
00015a  2e00              CMP      r6,#0
00015c  d105              BNE      |L1.362|
00015e  bf00              NOP      
000160  a208              ADR      r2,|L1.388|
000162  217c              MOVS     r1,#0x7c
000164  f7fffffe          BL       app_error_handler
000168  bf00              NOP      
                  |L1.362|
00016a  bf00              NOP      
                  |L1.364|
;;;125        }
;;;126    }
00016c  bd70              POP      {r4-r6,pc}
                          ENDP

00016e  0000              DCW      0x0000
                  |L1.368|
                          DCD      __Vectors
                  |L1.372|
                          DCD      m_ble_error_log
                  |L1.376|
                          DCD      0x10001000
                  |L1.380|
                          DCD      0x50000500
                  |L1.384|
                          DCD      m_ble_log_clear_flag
                  |L1.388|
000184  2e2e5c2e          DCB      "..\\..\\..\\Software\\Source\\ble_lib\\ble_error_log.c",0
000188  2e5c2e2e
00018c  5c536f66
000190  74776172
000194  655c536f
000198  75726365
00019c  5c626c65
0001a0  5f6c6962
0001a4  5c626c65
0001a8  5f657272
0001ac  6f725f6c
0001b0  6f672e63
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_ble_error_log
                          %        392

                          AREA ||.data||, DATA, ALIGN=0

                  m_ble_log_clear_flag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\ble_lib\\ble_error_log.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_ble_error_log_c_5061f549____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_ble_error_log_c_5061f549____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_ble_error_log_c_5061f549____REVSH|
#line 130
|__asm___15_ble_error_log_c_5061f549____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
