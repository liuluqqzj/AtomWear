; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\twi_hw_master.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\twi_hw_master.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\twi_hw_master.crf ..\..\..\Software\Source\twi_master\twi_hw_master.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  twi_master_write PROC
;;;29     
;;;30     static bool twi_master_write(uint8_t *data, uint8_t data_length, bool issue_stop_condition)
000000  b530              PUSH     {r4,r5,lr}
;;;31     {
000002  4603              MOV      r3,r0
;;;32         uint32_t timeout = MAX_TIMEOUT_LOOPS;   /* max loops to wait for EVENTS_TXDSENT event*/
000004  4cb7              LDR      r4,|L1.740|
;;;33     
;;;34         if (data_length == 0)
000006  2900              CMP      r1,#0
000008  d101              BNE      |L1.14|
;;;35         {
;;;36             /* Return false for requesting data of size 0 */
;;;37             return false;
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;38         }
;;;39     
;;;40         NRF_TWI1->TXD           = *data++;
;;;41         NRF_TWI1->TASKS_STARTTX = 1;
;;;42     
;;;43         while (true)
;;;44         {
;;;45             while(NRF_TWI1->EVENTS_TXDSENT == 0 && (--timeout))
;;;46             {
;;;47                 // Do nothing.
;;;48             }
;;;49     
;;;50             if (timeout == 0)
;;;51             {
;;;52                 NRF_TWI1->EVENTS_STOPPED = 0; 
;;;53                 NRF_TWI1->TASKS_STOP     = 1; 
;;;54                 
;;;55                 /* Wait until stop sequence is sent */
;;;56                 while(NRF_TWI1->EVENTS_STOPPED == 0) 
;;;57                 { 
;;;58                     // Do nothing.
;;;59                 }
;;;60                 
;;;61                 /* Timeout before receiving event*/
;;;62                 return false;
;;;63             }
;;;64     
;;;65             NRF_TWI1->EVENTS_TXDSENT = 0;
;;;66             if (--data_length == 0)
;;;67             {
;;;68                 break;
;;;69             }
;;;70     
;;;71             NRF_TWI1->TXD = *data++;
;;;72         }
;;;73         
;;;74         if (issue_stop_condition) 
;;;75         { 
;;;76             NRF_TWI1->EVENTS_STOPPED = 0; 
;;;77             NRF_TWI1->TASKS_STOP     = 1; 
;;;78             /* Wait until stop sequence is sent */ 
;;;79             while(NRF_TWI1->EVENTS_STOPPED == 0) 
;;;80             { 
;;;81                 // Do nothing.
;;;82             } 
;;;83         }
;;;84         return true;
;;;85     }
00000c  bd30              POP      {r4,r5,pc}
                  |L1.14|
00000e  7818              LDRB     r0,[r3,#0]            ;40
000010  4db5              LDR      r5,|L1.744|
000012  61e8              STR      r0,[r5,#0x1c]         ;40
000014  1c5b              ADDS     r3,r3,#1              ;40
000016  2001              MOVS     r0,#1                 ;41
000018  4db4              LDR      r5,|L1.748|
00001a  60a8              STR      r0,[r5,#8]            ;41
00001c  e022              B        |L1.100|
                  |L1.30|
00001e  bf00              NOP                            ;45
                  |L1.32|
000020  48b3              LDR      r0,|L1.752|
000022  69c0              LDR      r0,[r0,#0x1c]         ;45
000024  2800              CMP      r0,#0                 ;45
000026  d102              BNE      |L1.46|
000028  1e60              SUBS     r0,r4,#1              ;45
00002a  0004              MOVS     r4,r0                 ;45
00002c  d1f8              BNE      |L1.32|
                  |L1.46|
00002e  2c00              CMP      r4,#0                 ;50
000030  d10c              BNE      |L1.76|
000032  2000              MOVS     r0,#0                 ;52
000034  4dae              LDR      r5,|L1.752|
000036  6068              STR      r0,[r5,#4]            ;52
000038  2001              MOVS     r0,#1                 ;53
00003a  4dac              LDR      r5,|L1.748|
00003c  6168              STR      r0,[r5,#0x14]         ;53
00003e  bf00              NOP                            ;56
                  |L1.64|
000040  48ab              LDR      r0,|L1.752|
000042  6840              LDR      r0,[r0,#4]            ;56
000044  2800              CMP      r0,#0                 ;56
000046  d0fb              BEQ      |L1.64|
000048  2000              MOVS     r0,#0                 ;62
00004a  e7df              B        |L1.12|
                  |L1.76|
00004c  2000              MOVS     r0,#0                 ;65
00004e  4da8              LDR      r5,|L1.752|
000050  61e8              STR      r0,[r5,#0x1c]         ;65
000052  1e48              SUBS     r0,r1,#1              ;66
000054  b2c0              UXTB     r0,r0                 ;66
000056  0001              MOVS     r1,r0                 ;66
000058  d100              BNE      |L1.92|
00005a  e004              B        |L1.102|
                  |L1.92|
00005c  7818              LDRB     r0,[r3,#0]            ;71
00005e  4da2              LDR      r5,|L1.744|
000060  61e8              STR      r0,[r5,#0x1c]         ;71
000062  1c5b              ADDS     r3,r3,#1              ;71
                  |L1.100|
000064  e7db              B        |L1.30|
                  |L1.102|
000066  bf00              NOP                            ;68
000068  2a00              CMP      r2,#0                 ;74
00006a  d00a              BEQ      |L1.130|
00006c  2000              MOVS     r0,#0                 ;76
00006e  4da0              LDR      r5,|L1.752|
000070  6068              STR      r0,[r5,#4]            ;76
000072  2001              MOVS     r0,#1                 ;77
000074  4d9d              LDR      r5,|L1.748|
000076  6168              STR      r0,[r5,#0x14]         ;77
000078  bf00              NOP                            ;79
                  |L1.122|
00007a  489d              LDR      r0,|L1.752|
00007c  6840              LDR      r0,[r0,#4]            ;79
00007e  2800              CMP      r0,#0                 ;79
000080  d0fb              BEQ      |L1.122|
                  |L1.130|
000082  2001              MOVS     r0,#1                 ;84
000084  e7c2              B        |L1.12|
;;;86     
                          ENDP

                  twi_master_read PROC
;;;161    
;;;162    static bool twi_master_read(uint8_t *data, uint8_t data_length, bool issue_stop_condition)
000086  b530              PUSH     {r4,r5,lr}
;;;163    {
000088  4603              MOV      r3,r0
00008a  4614              MOV      r4,r2
;;;164        uint32_t timeout = MAX_TIMEOUT_LOOPS;   /* max loops to wait for RXDREADY event*/
00008c  4a95              LDR      r2,|L1.740|
;;;165    
;;;166        if (data_length == 0)
00008e  2900              CMP      r1,#0
000090  d101              BNE      |L1.150|
;;;167        {
;;;168            /* Return false for requesting data of size 0 */
;;;169            return false;
000092  2000              MOVS     r0,#0
                  |L1.148|
;;;170        }
;;;171        NRF_TWI1->EVENTS_RXDREADY = 0;
;;;172        NRF_TWI1->TASKS_STARTRX   = 1;
;;;173        
;;;174        while (true)
;;;175        {
;;;176            while((NRF_TWI1->EVENTS_RXDREADY == 0) && (--timeout))
;;;177            {    
;;;178                // Do nothing.
;;;179            }
;;;180            NRF_TWI1->EVENTS_RXDREADY = 0;
;;;181    
;;;182            if (timeout == 0)
;;;183            {
;;;184                /* Wait until stop sequence is sent */ 
;;;185                NRF_TWI1->EVENTS_STOPPED = 0; 
;;;186                NRF_TWI1->TASKS_STOP     = 1; 
;;;187                while(NRF_TWI1->EVENTS_STOPPED == 0) 
;;;188                { 
;;;189                    // Do nothing.
;;;190                }
;;;191                return false;
;;;192            }
;;;193    
;;;194            *data++ = NRF_TWI1->RXD;
;;;195    
;;;196            /* Configure PPI to stop TWI master before we get last BB event */
;;;197            if (--data_length == 0)
;;;198            {
;;;199                NRF_TWI1->EVENTS_STOPPED = 0;
;;;200                NRF_TWI1->TASKS_STOP = 1;
;;;201                break;
;;;202            }
;;;203        }
;;;204    
;;;205        /* Wait until stop sequence is sent */
;;;206        while(NRF_TWI1->EVENTS_STOPPED == 0)
;;;207        {
;;;208            // Do nothing.
;;;209        }
;;;210        return true;
;;;211    }
000094  bd30              POP      {r4,r5,pc}
                  |L1.150|
000096  2000              MOVS     r0,#0                 ;171
000098  4d95              LDR      r5,|L1.752|
00009a  60a8              STR      r0,[r5,#8]            ;171
00009c  2001              MOVS     r0,#1                 ;172
00009e  4d93              LDR      r5,|L1.748|
0000a0  6028              STR      r0,[r5,#0]            ;172
0000a2  e025              B        |L1.240|
                  |L1.164|
0000a4  bf00              NOP                            ;176
                  |L1.166|
0000a6  4892              LDR      r0,|L1.752|
0000a8  6880              LDR      r0,[r0,#8]            ;176
0000aa  2800              CMP      r0,#0                 ;176
0000ac  d102              BNE      |L1.180|
0000ae  1e50              SUBS     r0,r2,#1              ;176
0000b0  0002              MOVS     r2,r0                 ;176
0000b2  d1f8              BNE      |L1.166|
                  |L1.180|
0000b4  2000              MOVS     r0,#0                 ;180
0000b6  4d8e              LDR      r5,|L1.752|
0000b8  60a8              STR      r0,[r5,#8]            ;180
0000ba  2a00              CMP      r2,#0                 ;182
0000bc  d10a              BNE      |L1.212|
0000be  6068              STR      r0,[r5,#4]            ;185
0000c0  2001              MOVS     r0,#1                 ;186
0000c2  4d8a              LDR      r5,|L1.748|
0000c4  6168              STR      r0,[r5,#0x14]         ;186
0000c6  bf00              NOP                            ;187
                  |L1.200|
0000c8  4889              LDR      r0,|L1.752|
0000ca  6840              LDR      r0,[r0,#4]            ;187
0000cc  2800              CMP      r0,#0                 ;187
0000ce  d0fb              BEQ      |L1.200|
0000d0  2000              MOVS     r0,#0                 ;191
0000d2  e7df              B        |L1.148|
                  |L1.212|
0000d4  4884              LDR      r0,|L1.744|
0000d6  6980              LDR      r0,[r0,#0x18]         ;194
0000d8  7018              STRB     r0,[r3,#0]            ;194
0000da  1c5b              ADDS     r3,r3,#1              ;194
0000dc  1e48              SUBS     r0,r1,#1              ;197
0000de  b2c0              UXTB     r0,r0                 ;197
0000e0  0001              MOVS     r1,r0                 ;197
0000e2  d105              BNE      |L1.240|
0000e4  4d82              LDR      r5,|L1.752|
0000e6  6068              STR      r0,[r5,#4]            ;199
0000e8  2001              MOVS     r0,#1                 ;200
0000ea  4d80              LDR      r5,|L1.748|
0000ec  6168              STR      r0,[r5,#0x14]         ;200
0000ee  e000              B        |L1.242|
                  |L1.240|
0000f0  e7d8              B        |L1.164|
                  |L1.242|
0000f2  bf00              NOP                            ;201
0000f4  bf00              NOP                            ;206
                  |L1.246|
0000f6  487e              LDR      r0,|L1.752|
0000f8  6840              LDR      r0,[r0,#4]            ;206
0000fa  2800              CMP      r0,#0                 ;206
0000fc  d0fb              BEQ      |L1.246|
0000fe  2001              MOVS     r0,#1                 ;210
000100  e7c8              B        |L1.148|
;;;212    
                          ENDP

                  twi_master_clear_bus PROC
;;;221     */
;;;222    static bool twi_master_clear_bus(void)
000102  b5f8              PUSH     {r3-r7,lr}
;;;223    {
;;;224        uint32_t twi_state;
;;;225        bool bus_clear;
;;;226        uint32_t clk_pin_config;
;;;227        uint32_t data_pin_config;
;;;228            
;;;229        // Save and disable TWI hardware so software can take control over the pins
;;;230        twi_state        = NRF_TWI1->ENABLE;
000104  4878              LDR      r0,|L1.744|
000106  6805              LDR      r5,[r0,#0]
;;;231        NRF_TWI1->ENABLE = TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos;
000108  2000              MOVS     r0,#0
00010a  4977              LDR      r1,|L1.744|
00010c  6008              STR      r0,[r1,#0]
;;;232        
;;;233        clk_pin_config                                        =  \
00010e  0508              LSLS     r0,r1,#20
000110  2107              MOVS     r1,#7
000112  0209              LSLS     r1,r1,#8
000114  1840              ADDS     r0,r0,r1
000116  69c6              LDR      r6,[r0,#0x1c]
;;;234                NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_CLOCK_PIN_NUMBER];    
;;;235        NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_CLOCK_PIN_NUMBER] =   \
000118  4876              LDR      r0,|L1.756|
00011a  2105              MOVS     r1,#5
00011c  0709              LSLS     r1,r1,#28
00011e  2207              MOVS     r2,#7
000120  0212              LSLS     r2,r2,#8
000122  1889              ADDS     r1,r1,r2
000124  61c8              STR      r0,[r1,#0x1c]
;;;236                (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) \
;;;237              | (GPIO_PIN_CNF_DRIVE_S0D1     << GPIO_PIN_CNF_DRIVE_Pos) \
;;;238              | (GPIO_PIN_CNF_PULL_Pullup    << GPIO_PIN_CNF_PULL_Pos)  \
;;;239              | (GPIO_PIN_CNF_INPUT_Connect  << GPIO_PIN_CNF_INPUT_Pos) \
;;;240              | (GPIO_PIN_CNF_DIR_Output     << GPIO_PIN_CNF_DIR_Pos);    
;;;241    
;;;242        data_pin_config                                      = \
000126  2005              MOVS     r0,#5
000128  0700              LSLS     r0,r0,#28
00012a  4611              MOV      r1,r2
00012c  1840              ADDS     r0,r0,r1
00012e  6a00              LDR      r0,[r0,#0x20]
000130  9000              STR      r0,[sp,#0]
;;;243            NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_DATA_PIN_NUMBER];
;;;244        NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_DATA_PIN_NUMBER] = \
000132  4870              LDR      r0,|L1.756|
000134  2105              MOVS     r1,#5
000136  0709              LSLS     r1,r1,#28
000138  1889              ADDS     r1,r1,r2
00013a  6208              STR      r0,[r1,#0x20]
;;;245            (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) \
;;;246          | (GPIO_PIN_CNF_DRIVE_S0D1     << GPIO_PIN_CNF_DRIVE_Pos) \
;;;247          | (GPIO_PIN_CNF_PULL_Pullup    << GPIO_PIN_CNF_PULL_Pos)  \
;;;248          | (GPIO_PIN_CNF_INPUT_Connect  << GPIO_PIN_CNF_INPUT_Pos) \
;;;249          | (GPIO_PIN_CNF_DIR_Output     << GPIO_PIN_CNF_DIR_Pos);    
;;;250          
;;;251        TWI_SDA_HIGH();
00013c  bf00              NOP      
00013e  20ff              MOVS     r0,#0xff
000140  3001              ADDS     r0,#1
000142  496d              LDR      r1,|L1.760|
000144  6088              STR      r0,[r1,#8]
000146  bf00              NOP      
;;;252        TWI_SCL_HIGH();
000148  bf00              NOP      
00014a  2080              MOVS     r0,#0x80
00014c  6088              STR      r0,[r1,#8]
00014e  bf00              NOP      
;;;253        TWI_DELAY();
000150  2004              MOVS     r0,#4
000152  f7fffffe          BL       __asm___15_twi_hw_master_c_959ec897__nrf_delay_us
;;;254    
;;;255        if ((TWI_SDA_READ() == 1) && (TWI_SCL_READ() == 1))
000156  4868              LDR      r0,|L1.760|
000158  6900              LDR      r0,[r0,#0x10]
00015a  05c0              LSLS     r0,r0,#23
00015c  0fc0              LSRS     r0,r0,#31
00015e  d006              BEQ      |L1.366|
000160  4865              LDR      r0,|L1.760|
000162  6900              LDR      r0,[r0,#0x10]
000164  0600              LSLS     r0,r0,#24
000166  0fc0              LSRS     r0,r0,#31
000168  d001              BEQ      |L1.366|
;;;256        {
;;;257            bus_clear = true;
00016a  2401              MOVS     r4,#1
00016c  e01f              B        |L1.430|
                  |L1.366|
;;;258        }
;;;259        else
;;;260        {
;;;261            uint_fast8_t i;
;;;262            bus_clear = false;
00016e  2400              MOVS     r4,#0
;;;263    
;;;264            // Clock max 18 pulses worst case scenario(9 for master to send the rest of command and 9 for slave to respond) to SCL line and wait for SDA come high
;;;265            for (i=18; i--;)
000170  2712              MOVS     r7,#0x12
000172  e016              B        |L1.418|
                  |L1.372|
;;;266            {
;;;267                TWI_SCL_LOW();
000174  bf00              NOP      
000176  2080              MOVS     r0,#0x80
000178  495f              LDR      r1,|L1.760|
00017a  60c8              STR      r0,[r1,#0xc]
00017c  bf00              NOP      
;;;268                TWI_DELAY();
00017e  2004              MOVS     r0,#4
000180  f7fffffe          BL       __asm___15_twi_hw_master_c_959ec897__nrf_delay_us
;;;269                TWI_SCL_HIGH();
000184  bf00              NOP      
000186  2080              MOVS     r0,#0x80
000188  495b              LDR      r1,|L1.760|
00018a  6088              STR      r0,[r1,#8]
00018c  bf00              NOP      
;;;270                TWI_DELAY();
00018e  2004              MOVS     r0,#4
000190  f7fffffe          BL       __asm___15_twi_hw_master_c_959ec897__nrf_delay_us
;;;271    
;;;272                if (TWI_SDA_READ() == 1)
000194  4858              LDR      r0,|L1.760|
000196  6900              LDR      r0,[r0,#0x10]
000198  05c0              LSLS     r0,r0,#23
00019a  0fc0              LSRS     r0,r0,#31
00019c  d001              BEQ      |L1.418|
;;;273                {
;;;274                    bus_clear = true;
00019e  2401              MOVS     r4,#1
;;;275                    break;
0001a0  e003              B        |L1.426|
                  |L1.418|
0001a2  4638              MOV      r0,r7                 ;265
0001a4  1e7f              SUBS     r7,r7,#1              ;265
0001a6  2800              CMP      r0,#0                 ;265
0001a8  d1e4              BNE      |L1.372|
                  |L1.426|
0001aa  bf00              NOP      
;;;276                }
;;;277            }
;;;278        }
0001ac  bf00              NOP      
                  |L1.430|
;;;279        
;;;280        NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_CLOCK_PIN_NUMBER] = clk_pin_config;
0001ae  2005              MOVS     r0,#5
0001b0  0700              LSLS     r0,r0,#28
0001b2  2107              MOVS     r1,#7
0001b4  0209              LSLS     r1,r1,#8
0001b6  1840              ADDS     r0,r0,r1
0001b8  61c6              STR      r6,[r0,#0x1c]
;;;281        NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_DATA_PIN_NUMBER]  = data_pin_config;
0001ba  2105              MOVS     r1,#5
0001bc  0709              LSLS     r1,r1,#28
0001be  2207              MOVS     r2,#7
0001c0  0212              LSLS     r2,r2,#8
0001c2  1889              ADDS     r1,r1,r2
0001c4  9800              LDR      r0,[sp,#0]
0001c6  6208              STR      r0,[r1,#0x20]
;;;282    
;;;283        NRF_TWI1->ENABLE = twi_state;
0001c8  4847              LDR      r0,|L1.744|
0001ca  6005              STR      r5,[r0,#0]
;;;284    
;;;285        return bus_clear;
0001cc  4620              MOV      r0,r4
;;;286    }
0001ce  bdf8              POP      {r3-r7,pc}
;;;287    
                          ENDP

                  twi_master_init PROC
;;;290     */
;;;291    bool twi_master_init(void)
0001d0  b510              PUSH     {r4,lr}
;;;292    {
;;;293        /* To secure correct signal levels on the pins used by the TWI
;;;294           master when the system is in OFF mode, and when the TWI master is 
;;;295           disabled, these pins must be configured in the GPIO peripheral.
;;;296        */
;;;297        NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_CLOCK_PIN_NUMBER] =     \
0001d2  4848              LDR      r0,|L1.756|
0001d4  1e40              SUBS     r0,r0,#1
0001d6  2105              MOVS     r1,#5
0001d8  0709              LSLS     r1,r1,#28
0001da  2207              MOVS     r2,#7
0001dc  0212              LSLS     r2,r2,#8
0001de  1889              ADDS     r1,r1,r2
0001e0  61c8              STR      r0,[r1,#0x1c]
;;;298            (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) \
;;;299          | (GPIO_PIN_CNF_DRIVE_S0D1     << GPIO_PIN_CNF_DRIVE_Pos) \
;;;300          | (GPIO_PIN_CNF_PULL_Pullup    << GPIO_PIN_CNF_PULL_Pos)  \
;;;301          | (GPIO_PIN_CNF_INPUT_Connect  << GPIO_PIN_CNF_INPUT_Pos) \
;;;302          | (GPIO_PIN_CNF_DIR_Input      << GPIO_PIN_CNF_DIR_Pos);   
;;;303    
;;;304        NRF_GPIO->PIN_CNF[TWI_MASTER_CONFIG_DATA_PIN_NUMBER] =      \
0001e2  2105              MOVS     r1,#5
0001e4  0709              LSLS     r1,r1,#28
0001e6  1889              ADDS     r1,r1,r2
0001e8  6208              STR      r0,[r1,#0x20]
;;;305            (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) \
;;;306          | (GPIO_PIN_CNF_DRIVE_S0D1     << GPIO_PIN_CNF_DRIVE_Pos) \
;;;307          | (GPIO_PIN_CNF_PULL_Pullup    << GPIO_PIN_CNF_PULL_Pos)  \
;;;308          | (GPIO_PIN_CNF_INPUT_Connect  << GPIO_PIN_CNF_INPUT_Pos) \
;;;309          | (GPIO_PIN_CNF_DIR_Input      << GPIO_PIN_CNF_DIR_Pos);    
;;;310    
;;;311        NRF_TWI1->EVENTS_RXDREADY = 0;
0001ea  2000              MOVS     r0,#0
0001ec  4940              LDR      r1,|L1.752|
0001ee  6088              STR      r0,[r1,#8]
;;;312        NRF_TWI1->EVENTS_TXDSENT  = 0;
0001f0  61c8              STR      r0,[r1,#0x1c]
;;;313        NRF_TWI1->PSELSCL         = TWI_MASTER_CONFIG_CLOCK_PIN_NUMBER;
0001f2  2007              MOVS     r0,#7
0001f4  493c              LDR      r1,|L1.744|
0001f6  6088              STR      r0,[r1,#8]
;;;314        NRF_TWI1->PSELSDA         = TWI_MASTER_CONFIG_DATA_PIN_NUMBER;
0001f8  2008              MOVS     r0,#8
0001fa  60c8              STR      r0,[r1,#0xc]
;;;315        NRF_TWI1->FREQUENCY       = TWI_FREQUENCY_FREQUENCY_K400 << TWI_FREQUENCY_FREQUENCY_Pos;
0001fc  20cd              MOVS     r0,#0xcd
0001fe  04c0              LSLS     r0,r0,#19
000200  6248              STR      r0,[r1,#0x24]
;;;316       // NRF_PPI->CH[0].EEP        = (uint32_t)&NRF_TWI1->EVENTS_BB;
;;;317       // NRF_PPI->CH[0].TEP        = (uint32_t)&NRF_TWI1->TASKS_SUSPEND;
;;;318       // NRF_PPI->CHENCLR          = PPI_CHENCLR_CH0_Msk;
;;;319        NRF_TWI1->ENABLE          = TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos;
000202  2005              MOVS     r0,#5
000204  6008              STR      r0,[r1,#0]
;;;320    
;;;321        return twi_master_clear_bus();
000206  f7fffffe          BL       twi_master_clear_bus
;;;322    }
00020a  bd10              POP      {r4,pc}
;;;323    
                          ENDP

                  twi_master_transfer PROC
;;;326     */ 
;;;327    bool twi_master_transfer(uint8_t address, uint8_t *data, uint8_t data_length, bool issue_stop_condition)
00020c  b5f8              PUSH     {r3-r7,lr}
;;;328    {
00020e  4604              MOV      r4,r0
000210  460e              MOV      r6,r1
000212  4615              MOV      r5,r2
000214  461f              MOV      r7,r3
;;;329        bool transfer_succeeded = false;
000216  2000              MOVS     r0,#0
000218  9000              STR      r0,[sp,#0]
;;;330        if (data_length > 0 && twi_master_clear_bus())
00021a  2d00              CMP      r5,#0
00021c  dd17              BLE      |L1.590|
00021e  f7fffffe          BL       twi_master_clear_bus
000222  2800              CMP      r0,#0
000224  d013              BEQ      |L1.590|
;;;331        {
;;;332            NRF_TWI1->ADDRESS = (address >> 1);
000226  1060              ASRS     r0,r4,#1
000228  492f              LDR      r1,|L1.744|
00022a  3180              ADDS     r1,r1,#0x80
00022c  6088              STR      r0,[r1,#8]
;;;333    
;;;334            if ((address & TWI_READ_BIT))
00022e  07e0              LSLS     r0,r4,#31
000230  0fc0              LSRS     r0,r0,#31
000232  d006              BEQ      |L1.578|
;;;335            {
;;;336                transfer_succeeded = twi_master_read(data, data_length, issue_stop_condition);
000234  463a              MOV      r2,r7
000236  4629              MOV      r1,r5
000238  4630              MOV      r0,r6
00023a  f7fffffe          BL       twi_master_read
00023e  9000              STR      r0,[sp,#0]
000240  e005              B        |L1.590|
                  |L1.578|
;;;337            }
;;;338            else
;;;339            {
;;;340                transfer_succeeded = twi_master_write(data, data_length, issue_stop_condition);
000242  463a              MOV      r2,r7
000244  4629              MOV      r1,r5
000246  4630              MOV      r0,r6
000248  f7fffffe          BL       twi_master_write
00024c  9000              STR      r0,[sp,#0]
                  |L1.590|
;;;341            }
;;;342        }
;;;343        return transfer_succeeded;
00024e  9800              LDR      r0,[sp,#0]
;;;344    }
000250  bdf8              POP      {r3-r7,pc}
;;;345    
                          ENDP

                  IIC_write PROC
;;;348    
;;;349    char IIC_write(uint8_t device_addr, uint8_t register_addr, uint8_t *register_data, uint8_t write_length)
000252  b5ff              PUSH     {r0-r7,lr}
;;;350    {
000254  b083              SUB      sp,sp,#0xc
000256  4606              MOV      r6,r0
000258  460f              MOV      r7,r1
00025a  461c              MOV      r4,r3
;;;351        uint8_t send[10], i;
;;;352        if( (write_length > 9) || (write_length < 1) )
00025c  2c09              CMP      r4,#9
00025e  dc01              BGT      |L1.612|
000260  2c01              CMP      r4,#1
000262  da05              BGE      |L1.624|
                  |L1.612|
;;;353        {
;;;354            xprintf("write length error.\r\n");
000264  a025              ADR      r0,|L1.764|
000266  f7fffffe          BL       xprintf
;;;355            return false;
00026a  2000              MOVS     r0,#0
                  |L1.620|
;;;356        }
;;;357        else
;;;358        {
;;;359            device_addr = (device_addr << 1) & 0xFE;
;;;360            send[0] = register_addr;
;;;361            
;;;362            for(i = 1; i <= write_length; i++)
;;;363            {
;;;364                send[i] = register_data[i-1];
;;;365            }
;;;366            
;;;367            twi_master_transfer(device_addr, send, write_length + 1, TWI_ISSUE_STOP); 
;;;368            return true;
;;;369        }
;;;370    }
00026c  b007              ADD      sp,sp,#0x1c
00026e  bdf0              POP      {r4-r7,pc}
                  |L1.624|
000270  0070              LSLS     r0,r6,#1              ;359
000272  21fe              MOVS     r1,#0xfe              ;359
000274  4008              ANDS     r0,r0,r1              ;359
000276  4606              MOV      r6,r0                 ;359
000278  4668              MOV      r0,sp                 ;360
00027a  7007              STRB     r7,[r0,#0]            ;360
00027c  2501              MOVS     r5,#1                 ;362
00027e  e006              B        |L1.654|
                  |L1.640|
000280  1e68              SUBS     r0,r5,#1              ;364
000282  9905              LDR      r1,[sp,#0x14]         ;364
000284  5c08              LDRB     r0,[r1,r0]            ;364
000286  4669              MOV      r1,sp                 ;364
000288  5548              STRB     r0,[r1,r5]            ;364
00028a  1c68              ADDS     r0,r5,#1              ;362
00028c  b2c5              UXTB     r5,r0                 ;362
                  |L1.654|
00028e  42a5              CMP      r5,r4                 ;362
000290  ddf6              BLE      |L1.640|
000292  1c60              ADDS     r0,r4,#1              ;367
000294  b2c2              UXTB     r2,r0                 ;367
000296  2301              MOVS     r3,#1                 ;367
000298  4669              MOV      r1,sp                 ;367
00029a  4630              MOV      r0,r6                 ;367
00029c  f7fffffe          BL       twi_master_transfer
0002a0  2001              MOVS     r0,#1                 ;368
0002a2  e7e3              B        |L1.620|
;;;371    
                          ENDP

                  IIC_read PROC
;;;372    
;;;373    char IIC_read(uint8_t device_addr, uint8_t register_addr, uint8_t *register_data, uint8_t read_length)
0002a4  b57f              PUSH     {r0-r6,lr}
;;;374    {
0002a6  4604              MOV      r4,r0
0002a8  4616              MOV      r6,r2
0002aa  461d              MOV      r5,r3
;;;375        if(read_length < 1)
0002ac  2d01              CMP      r5,#1
0002ae  da05              BGE      |L1.700|
;;;376        {
;;;377            xprintf("read length error.\r\n");
0002b0  a018              ADR      r0,|L1.788|
0002b2  f7fffffe          BL       xprintf
;;;378            return false;
0002b6  2000              MOVS     r0,#0
                  |L1.696|
;;;379        }
;;;380        else
;;;381        {
;;;382            device_addr = (device_addr << 1) & 0xFE;
;;;383            twi_master_transfer(device_addr, &register_addr, 1, TWI_DONT_ISSUE_STOP); // write
;;;384            
;;;385            device_addr = device_addr | 0x01;
;;;386            twi_master_transfer(device_addr, register_data, read_length, TWI_ISSUE_STOP); // read
;;;387            return true;
;;;388        }
;;;389    }
0002b8  b004              ADD      sp,sp,#0x10
0002ba  bd70              POP      {r4-r6,pc}
                  |L1.700|
0002bc  0060              LSLS     r0,r4,#1              ;382
0002be  21fe              MOVS     r1,#0xfe              ;382
0002c0  4008              ANDS     r0,r0,r1              ;382
0002c2  4604              MOV      r4,r0                 ;382
0002c4  2300              MOVS     r3,#0                 ;383
0002c6  2201              MOVS     r2,#1                 ;383
0002c8  a901              ADD      r1,sp,#4              ;383
0002ca  4620              MOV      r0,r4                 ;383
0002cc  f7fffffe          BL       twi_master_transfer
0002d0  2001              MOVS     r0,#1                 ;385
0002d2  4304              ORRS     r4,r4,r0              ;385
0002d4  2301              MOVS     r3,#1                 ;386
0002d6  462a              MOV      r2,r5                 ;386
0002d8  4631              MOV      r1,r6                 ;386
0002da  4620              MOV      r0,r4                 ;386
0002dc  f7fffffe          BL       twi_master_transfer
0002e0  2001              MOVS     r0,#1                 ;387
0002e2  e7e9              B        |L1.696|
;;;390    
                          ENDP

                  |L1.740|
                          DCD      0x00004e20
                  |L1.744|
                          DCD      0x40004500
                  |L1.748|
                          DCD      0x40004000
                  |L1.752|
                          DCD      0x40004100
                  |L1.756|
                          DCD      0x0000060d
                  |L1.760|
                          DCD      0x50000500
                  |L1.764|
0002fc  77726974          DCB      "write length error.\r\n",0
000300  65206c65
000304  6e677468
000308  20657272
00030c  6f722e0d
000310  0a00    
000312  00                DCB      0
000313  00                DCB      0
                  |L1.788|
000314  72656164          DCB      "read length error.\r\n",0
000318  206c656e
00031c  67746820
000320  6572726f
000324  722e0d0a
000328  00      
000329  00                DCB      0
00032a  00                DCB      0
00032b  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\twi_master\\twi_hw_master.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_twi_hw_master_c_959ec897____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_twi_hw_master_c_959ec897____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_twi_hw_master_c_959ec897____REVSH|
#line 130
|__asm___15_twi_hw_master_c_959ec897____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_twi_hw_master_c_959ec897__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___15_twi_hw_master_c_959ec897__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
