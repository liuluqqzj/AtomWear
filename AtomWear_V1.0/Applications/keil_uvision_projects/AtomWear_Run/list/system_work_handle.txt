; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\system_work_handle.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\system_work_handle.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\system_work_handle.crf ..\..\..\Software\Source\sys_work_handle\system_work_handle.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  system_startup PROC
;;;34     /*--------------------------- start timer, start working -------------------------*/
;;;35     void system_startup(void)
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37         TIMER1_OPEN();
000002  f7fffffe          BL       TIMER1_OPEN
;;;38     }
000006  bd10              POP      {r4,pc}
;;;39     
                          ENDP

                  system_user_sleep_mode_init PROC
;;;40     /*--------------------------- user sleep init -------------------------*/
;;;41     void system_user_sleep_mode_init(void)
000008  b510              PUSH     {r4,lr}
;;;42     {
;;;43         xprintf("\r\nenter the user sleep mode...\r\n");
00000a  a07a              ADR      r0,|L1.500|
00000c  f7fffffe          BL       xprintf
;;;44     }
000010  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  system_user_sleep_mode_operate PROC
;;;46     /*--------------------------- user sleep operate -------------------------*/
;;;47     void system_user_sleep_mode_operate(void)
000012  4770              BX       lr
;;;48     { }
;;;49     
                          ENDP

                  system_ble_work_mode_init PROC
;;;50     /*--------------------------- ble work init -------------------------*/
;;;51     void system_ble_work_mode_init(void)
000014  b510              PUSH     {r4,lr}
;;;52     {
;;;53         ble_prepare();
000016  f7fffffe          BL       ble_prepare
;;;54         ble_start();
00001a  f7fffffe          BL       ble_start
;;;55     }
00001e  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  system_ble_work_mode_operate PROC
;;;57     /*--------------------------- ble mode operate -------------------------*/
;;;58     void system_ble_work_mode_operate(void)
000020  b510              PUSH     {r4,lr}
;;;59     {
;;;60         if(BL.E.TIME_OUT_STATE == true || BL.E.END_TRANS_STATE == true)  // time out
000022  487d              LDR      r0,|L1.536|
000024  7800              LDRB     r0,[r0,#0]  ; BL
000026  0700              LSLS     r0,r0,#28
000028  0fc0              LSRS     r0,r0,#31
00002a  d104              BNE      |L1.54|
00002c  487a              LDR      r0,|L1.536|
00002e  7800              LDRB     r0,[r0,#0]  ; BL
000030  0740              LSLS     r0,r0,#29
000032  0fc0              LSRS     r0,r0,#31
000034  d002              BEQ      |L1.60|
                  |L1.54|
;;;61         {
;;;62             ble_close();
000036  f7fffffe          BL       ble_close
00003a  e001              B        |L1.64|
                  |L1.60|
;;;63         }
;;;64         else
;;;65         {
;;;66             ble_rec_handle();
00003c  f7fffffe          BL       ble_rec_handle
                  |L1.64|
;;;67         }
;;;68     
;;;69         // ble_data_operate;
;;;70     }
000040  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  system_mcu_sleep_mode_init PROC
;;;72     /*--------------------------- system sleep init -------------------------*/
;;;73     void system_mcu_sleep_mode_init(void)
000042  4770              BX       lr
;;;74     {
;;;75     }
;;;76     
                          ENDP

                  system_mcu_sleep_mode_operate PROC
;;;77     /*---------------------------   -------------------------*/
;;;78     void system_mcu_sleep_mode_operate(void)
000044  b510              PUSH     {r4,lr}
;;;79     {
;;;80         TIMER1_INT_CLOSE();
000046  f7fffffe          BL       TIMER1_INT_CLOSE
;;;81         RTC1_COUNTER_START();
00004a  f7fffffe          BL       RTC1_COUNTER_START
;;;82         
;;;83         //shake_dect_open();   
;;;84         system_on_sleep();   
00004e  f7fffffe          BL       system_on_sleep
;;;85         //shake_dect_close();
;;;86        
;;;87         RTC1_COUNTER_STOP();
000052  f7fffffe          BL       RTC1_COUNTER_STOP
;;;88         TIMER1_INT_OPEN();
000056  f7fffffe          BL       TIMER1_INT_OPEN
;;;89     }
00005a  bd10              POP      {r4,pc}
;;;90     
                          ENDP

                  system_sleep_countdown_detect PROC
;;;103    /*---------------------------   -------------------------*/
;;;104    void system_sleep_countdown_detect()
00005c  b510              PUSH     {r4,lr}
;;;105    {
;;;106        // 5min sleep 5*60 = 300 *1s
;;;107        if(( get_sleep_countdown() >= SYSTEM_SLEEP_DEADLINE) && (get_work_mode() == SYSTEM_DEFAULT_MODE))
00005e  f7fffffe          BL       get_sleep_countdown
000062  21ff              MOVS     r1,#0xff
000064  312d              ADDS     r1,r1,#0x2d
000066  4288              CMP      r0,r1
000068  d307              BCC      |L1.122|
00006a  f7fffffe          BL       get_work_mode
00006e  2801              CMP      r0,#1
000070  d103              BNE      |L1.122|
;;;108        {
;;;109            clear_sleep_countdown();
000072  f7fffffe          BL       clear_sleep_countdown
;;;110            system_mcu_sleep_mode_operate();
000076  f7fffffe          BL       system_mcu_sleep_mode_operate
                  |L1.122|
;;;111        }
;;;112    }
00007a  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  system_low_battery PROC
;;;115    /*---------------------------  -------------------------*/
;;;116    void system_low_battery()
00007c  b510              PUSH     {r4,lr}
;;;117    {
;;;118        uint8_t i = 10;
00007e  240a              MOVS     r4,#0xa
;;;119        // Configure LED-pins as outputs
;;;120        nrf_gpio_cfg_output(RED_LED);
000080  2012              MOVS     r0,#0x12
000082  f7fffffe          BL       nrf_gpio_cfg_output
;;;121    
;;;122        // LED 0 and LED 1 blink alternately.
;;;123        while(i--)
000086  e00d              B        |L1.164|
                  |L1.136|
;;;124        {
;;;125            nrf_gpio_pin_set(RED_LED);
000088  2012              MOVS     r0,#0x12
00008a  f7fffffe          BL       nrf_gpio_pin_set
;;;126            nrf_delay_ms(300);
00008e  20ff              MOVS     r0,#0xff
000090  302d              ADDS     r0,r0,#0x2d
000092  f7fffffe          BL       nrf_delay_ms
;;;127            nrf_gpio_pin_clear(RED_LED);
000096  2012              MOVS     r0,#0x12
000098  f7fffffe          BL       nrf_gpio_pin_clear
;;;128            nrf_delay_ms(300);
00009c  20ff              MOVS     r0,#0xff
00009e  302d              ADDS     r0,r0,#0x2d
0000a0  f7fffffe          BL       nrf_delay_ms
                  |L1.164|
0000a4  4620              MOV      r0,r4                 ;123
0000a6  1e61              SUBS     r1,r4,#1              ;123
0000a8  b2cc              UXTB     r4,r1                 ;123
0000aa  2800              CMP      r0,#0                 ;123
0000ac  d1ec              BNE      |L1.136|
;;;129        }
;;;130        // shutdown...
;;;131        xprintf("The battery is too low...\r\n");
0000ae  a05b              ADR      r0,|L1.540|
0000b0  f7fffffe          BL       xprintf
;;;132        NRF_POWER->SYSTEMOFF = 0x01;
0000b4  2001              MOVS     r0,#1
0000b6  4960              LDR      r1,|L1.568|
0000b8  6008              STR      r0,[r1,#0]
;;;133    }
0000ba  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  system_battery_detect PROC
;;;137    /*-------------------------------   ----------------------------*/
;;;138    void system_battery_detect()
0000bc  b510              PUSH     {r4,lr}
;;;139    {
;;;140        static uint32_t detect_count = 0;
;;;141        uint8_t battery_level;
;;;142        
;;;143        // check every 2 minutes 
;;;144         if(detect_count == 1)
0000be  485f              LDR      r0,|L1.572|
0000c0  6800              LDR      r0,[r0,#0]  ; detect_count
0000c2  2801              CMP      r0,#1
0000c4  d101              BNE      |L1.202|
;;;145         {
;;;146             battery_detect_start();
0000c6  f7fffffe          BL       battery_detect_start
                  |L1.202|
;;;147         }
;;;148         
;;;149         if(battery_is_available() == true)
0000ca  f7fffffe          BL       battery_is_available
0000ce  2800              CMP      r0,#0
0000d0  d011              BEQ      |L1.246|
;;;150         {         
;;;151             battery_level = get_battery_value();
0000d2  f7fffffe          BL       get_battery_value
0000d6  4604              MOV      r4,r0
;;;152             battery_detect_stop();
0000d8  f7fffffe          BL       battery_detect_stop
;;;153             set_battery_level(battery_level);
0000dc  4620              MOV      r0,r4
0000de  f7fffffe          BL       set_battery_level
;;;154             xprintf("             level = %d \r\n", battery_level);
0000e2  4621              MOV      r1,r4
0000e4  a056              ADR      r0,|L1.576|
0000e6  f7fffffe          BL       xprintf
;;;155             
;;;156             if(get_battery_level() < 20)
0000ea  f7fffffe          BL       get_battery_level
0000ee  2814              CMP      r0,#0x14
0000f0  da01              BGE      |L1.246|
;;;157                 system_low_battery();
0000f2  f7fffffe          BL       system_low_battery
                  |L1.246|
;;;158                      
;;;159         }
;;;160             
;;;161        if(detect_count > 1500000*120)
0000f6  4851              LDR      r0,|L1.572|
0000f8  6800              LDR      r0,[r0,#0]  ; detect_count
0000fa  4958              LDR      r1,|L1.604|
0000fc  4288              CMP      r0,r1
0000fe  d905              BLS      |L1.268|
;;;162        {
;;;163            xprintf(" time on..\r\n");
000100  a057              ADR      r0,|L1.608|
000102  f7fffffe          BL       xprintf
;;;164            detect_count = 0;
000106  2000              MOVS     r0,#0
000108  494c              LDR      r1,|L1.572|
00010a  6008              STR      r0,[r1,#0]  ; detect_count
                  |L1.268|
;;;165        }
;;;166        detect_count++;
00010c  484b              LDR      r0,|L1.572|
00010e  6800              LDR      r0,[r0,#0]  ; detect_count
000110  1c40              ADDS     r0,r0,#1
000112  494a              LDR      r1,|L1.572|
000114  6008              STR      r0,[r1,#0]  ; detect_count
;;;167    }
000116  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  system_state_detect PROC
;;;170    /*---------------------------  ------------------------*/
;;;171    void system_state_detect(void)
000118  b510              PUSH     {r4,lr}
;;;172    {
;;;173        system_sleep_countdown_detect();
00011a  f7fffffe          BL       system_sleep_countdown_detect
;;;174        system_battery_detect();
00011e  f7fffffe          BL       system_battery_detect
;;;175    }
000122  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  system_led_flicker_init PROC
;;;178    /*---------------------------   -------------------------*/
;;;179    void system_led_flicker_init()
000124  b510              PUSH     {r4,lr}
;;;180    {
;;;181        // gpio and timer init
;;;182        // timer init
;;;183        nrf_gpio_cfg_output(RED_LED);
000126  2012              MOVS     r0,#0x12
000128  f7fffffe          BL       nrf_gpio_cfg_output
;;;184        nrf_gpio_cfg_output(GREEN_LED);
00012c  2011              MOVS     r0,#0x11
00012e  f7fffffe          BL       nrf_gpio_cfg_output
;;;185        nrf_gpio_pin_clear(RED_LED);
000132  2012              MOVS     r0,#0x12
000134  f7fffffe          BL       nrf_gpio_pin_clear
;;;186        nrf_gpio_pin_clear(GREEN_LED);
000138  2011              MOVS     r0,#0x11
00013a  f7fffffe          BL       nrf_gpio_pin_clear
;;;187    
;;;188    }
00013e  bd10              POP      {r4,pc}
;;;189    
                          ENDP

                  system_HFCLK_init PROC
;;;190    /*---------------------------  -------------------------*/
;;;191    void system_HFCLK_init()
000140  2000              MOVS     r0,#0
;;;192    {
;;;193        // Start 16 MHz crystal oscillator.
;;;194        NRF_CLOCK->EVENTS_HFCLKSTARTED  = 0;    // HFCLK oscillator state = 0.
000142  494b              LDR      r1,|L1.624|
000144  6008              STR      r0,[r1,#0]
;;;195        NRF_CLOCK->TASKS_HFCLKSTART     = 1;    // Start HFCLK clock source
000146  2001              MOVS     r0,#1
000148  0781              LSLS     r1,r0,#30
00014a  6008              STR      r0,[r1,#0]
;;;196    
;;;197        // Wait for the external oscillator to start up.
;;;198        while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0);
00014c  bf00              NOP      
                  |L1.334|
00014e  4848              LDR      r0,|L1.624|
000150  6800              LDR      r0,[r0,#0]
000152  2800              CMP      r0,#0
000154  d0fb              BEQ      |L1.334|
;;;199    }
000156  4770              BX       lr
;;;200    
                          ENDP

                  system_module_init PROC
;;;202    /*---------------------------  -----------------------*/
;;;203    void system_module_init()
000158  b508              PUSH     {r3,lr}
;;;204    {
;;;205        // uart init
;;;206        simple_uart_config(RTS_PIN_NUMBER, TX_PIN_NUMBER, CTS_PIN_NUMBER, RX_PIN_NUMBER, 0); 
00015a  2000              MOVS     r0,#0
00015c  230c              MOVS     r3,#0xc
00015e  4602              MOV      r2,r0
000160  210b              MOVS     r1,#0xb
000162  9000              STR      r0,[sp,#0]
000164  f7fffffe          BL       simple_uart_config
;;;207        xprintf("start up..\r\n");
000168  a042              ADR      r0,|L1.628|
00016a  f7fffffe          BL       xprintf
;;;208        
;;;209        //  
;;;210        system_HFCLK_init();
00016e  f7fffffe          BL       system_HFCLK_init
;;;211    
;;;212        //  
;;;213        if(!system_battery_self_test())
000172  f7fffffe          BL       battery_self_detect
000176  2800              CMP      r0,#0
000178  d101              BNE      |L1.382|
;;;214        {
;;;215            system_low_battery();
00017a  f7fffffe          BL       system_low_battery
                  |L1.382|
;;;216        }
;;;217        //  
;;;218         system_bootloader_check();
00017e  f7fffffe          BL       mcu_bootloader_check
;;;219        //   
;;;220        system_led_flicker_init();
000182  f7fffffe          BL       system_led_flicker_init
;;;221        nrf_gpio_pin_set(RED_LED);
000186  2012              MOVS     r0,#0x12
000188  f7fffffe          BL       nrf_gpio_pin_set
;;;222        //  
;;;223        system_parameter_init();
00018c  f7fffffe          BL       sys_parameters_init
;;;224        //  
;;;225        system_I2C_init();
000190  bf00              NOP      
000192  f7fffffe          BL       twi_master_init
000196  2800              CMP      r0,#0
000198  d101              BNE      |L1.414|
00019a  bf00              NOP      
                  |L1.412|
00019c  e7fe              B        |L1.412|
                  |L1.414|
00019e  bf00              NOP      
;;;226        //  
;;;227        system_gpio_LoToHi_INT_init(ACCE_TAP_PIN_NUMBER);
0001a0  200c              MOVS     r0,#0xc
0001a2  f7fffffe          BL       GPIO_LoToHi_INT_config
;;;228        
;;;229        nrf_delay_ms(2000);
0001a6  207d              MOVS     r0,#0x7d
0001a8  0100              LSLS     r0,r0,#4
0001aa  f7fffffe          BL       nrf_delay_ms
;;;230        nrf_gpio_pin_clear(RED_LED);
0001ae  2012              MOVS     r0,#0x12
0001b0  f7fffffe          BL       nrf_gpio_pin_clear
;;;231        
;;;232        
;;;233    }
0001b4  bd08              POP      {r3,pc}
;;;234    
                          ENDP

                  system_default_work_mode_init PROC
;;;236    /*--------------------------- in step count mode by default -------------------*/
;;;237    void system_default_work_mode_init()
0001b6  b510              PUSH     {r4,lr}
;;;238    {
;;;239        
;;;240        MMA845x_Init();
0001b8  f7fffffe          BL       MMA845x_Init
;;;241    	MMA845x_Active();	
0001bc  f7fffffe          BL       MMA845x_Active
;;;242        pedometer_init();
0001c0  f7fffffe          BL       pedometer_init
;;;243    }
0001c4  bd10              POP      {r4,pc}
;;;244    
                          ENDP

                  system_default_work_mode_operate PROC
;;;245    /*--------------------------- -----------------------*/
;;;246    void system_default_work_mode_operate()
0001c6  b510              PUSH     {r4,lr}
;;;247    {
;;;248        pedometer_startup();
0001c8  f7fffffe          BL       pedometer_startup
;;;249    }
0001cc  bd10              POP      {r4,pc}
                          ENDP

                  nrf_gpio_cfg_output PROC
;;;120     */
;;;121    static __INLINE void nrf_gpio_cfg_output(uint32_t pin_number)
0001ce  2101              MOVS     r1,#1
;;;122    {
;;;123        /*lint -e{845} // A zero has been given as right argument to operator '|'" */
;;;124        NRF_GPIO->PIN_CNF[pin_number] = (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos)
0001d0  2205              MOVS     r2,#5
0001d2  0712              LSLS     r2,r2,#28
0001d4  2307              MOVS     r3,#7
0001d6  021b              LSLS     r3,r3,#8
0001d8  18d2              ADDS     r2,r2,r3
0001da  0083              LSLS     r3,r0,#2
0001dc  50d1              STR      r1,[r2,r3]
;;;125                                                | (GPIO_PIN_CNF_DRIVE_S0S1 << GPIO_PIN_CNF_DRIVE_Pos)
;;;126                                                | (GPIO_PIN_CNF_PULL_Disabled << GPIO_PIN_CNF_PULL_Pos)
;;;127                                                | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos)
;;;128                                                | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
;;;129    }
0001de  4770              BX       lr
;;;130    
                          ENDP

                  nrf_gpio_pin_set PROC
;;;184     */
;;;185    static __INLINE void nrf_gpio_pin_set(uint32_t pin_number)
0001e0  2101              MOVS     r1,#1
;;;186    {
;;;187        NRF_GPIO->OUTSET = (1UL << pin_number);
0001e2  4081              LSLS     r1,r1,r0
0001e4  4a27              LDR      r2,|L1.644|
0001e6  6091              STR      r1,[r2,#8]
;;;188    }
0001e8  4770              BX       lr
;;;189    
                          ENDP

                  nrf_gpio_pin_clear PROC
;;;198     */
;;;199    static __INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
0001ea  2101              MOVS     r1,#1
;;;200    {
;;;201        NRF_GPIO->OUTCLR = (1UL << pin_number);
0001ec  4081              LSLS     r1,r1,r0
0001ee  4a25              LDR      r2,|L1.644|
0001f0  60d1              STR      r1,[r2,#0xc]
;;;202    }
0001f2  4770              BX       lr
;;;203    
                          ENDP

                  |L1.500|
0001f4  0d0a656e          DCB      "\r\nenter the user sleep mode...\r\n",0
0001f8  74657220
0001fc  74686520
000200  75736572
000204  20736c65
000208  6570206d
00020c  6f64652e
000210  2e2e0d0a
000214  00      
000215  00                DCB      0
000216  00                DCB      0
000217  00                DCB      0
                  |L1.536|
                          DCD      ||BL||
                  |L1.540|
00021c  54686520          DCB      "The battery is too low...\r\n",0
000220  62617474
000224  65727920
000228  69732074
00022c  6f6f206c
000230  6f772e2e
000234  2e0d0a00
                  |L1.568|
                          DCD      0x40000500
                  |L1.572|
                          DCD      detect_count
                  |L1.576|
000240  20202020          DCB      "             level = %d \r\n",0
000244  20202020
000248  20202020
00024c  206c6576
000250  656c203d
000254  20256420
000258  0d0a00  
00025b  00                DCB      0
                  |L1.604|
                          DCD      0x0aba9500
                  |L1.608|
000260  2074696d          DCB      " time on..\r\n",0
000264  65206f6e
000268  2e2e0d0a
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L1.624|
                          DCD      0x40000100
                  |L1.628|
000274  73746172          DCB      "start up..\r\n",0
000278  74207570
00027c  2e2e0d0a
000280  00      
000281  00                DCB      0
000282  00                DCB      0
000283  00                DCB      0
                  |L1.644|
                          DCD      0x50000500

                          AREA ||.data||, DATA, ALIGN=2

                  detect_count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\sys_work_handle\\system_work_handle.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_system_work_handle_c_08fd2c65____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_system_work_handle_c_08fd2c65____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_system_work_handle_c_08fd2c65____REVSH|
#line 130
|__asm___20_system_work_handle_c_08fd2c65____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_system_work_handle_c_08fd2c65__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___20_system_work_handle_c_08fd2c65__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
