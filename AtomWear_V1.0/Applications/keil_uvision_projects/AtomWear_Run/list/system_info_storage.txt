; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\system_info_storage.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\system_info_storage.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\system_info_storage.crf ..\..\..\Software\Source\sys_info_storage\system_info_storage.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  pedo_data_ctrl_init PROC
;;;259    /*--------------------------- 计步数据控制初始化 ------------------------------*/
;;;260    void pedo_data_ctrl_init()
000000  b510              PUSH     {r4,lr}
;;;261    {
;;;262        pedo_ctrl.sto_pointer = 0;   // 指向预存储的位置  = 实际的字节数
000002  2000              MOVS     r0,#0
000004  49f0              LDR      r1,|L1.968|
000006  6008              STR      r0,[r1,#0]  ; pedo_ctrl
;;;263        pedo_ctrl.slice_handle = false;
000008  7108              STRB     r0,[r1,#4]
;;;264        
;;;265        pedo_ctrl.diff_count = 0;
00000a  2100              MOVS     r1,#0
00000c  48ee              LDR      r0,|L1.968|
00000e  3040              ADDS     r0,r0,#0x40
000010  7601              STRB     r1,[r0,#0x18]
;;;266        memset(pedo_ctrl.diff_pointer, 0, 20);
000012  2114              MOVS     r1,#0x14
000014  3838              SUBS     r0,r0,#0x38
000016  f7fffffe          BL       __aeabi_memclr4
;;;267        
;;;268        memset(pedo_data, 0, 2048);
00001a  2101              MOVS     r1,#1
00001c  02c9              LSLS     r1,r1,#11
00001e  48eb              LDR      r0,|L1.972|
000020  f7fffffe          BL       __aeabi_memclr4
;;;269    }
000024  bd10              POP      {r4,pc}
;;;270    
                          ENDP

                  sys_parameters_init PROC
;;;70     
;;;71     void sys_parameters_init()
000026  b510              PUSH     {r4,lr}
;;;72     {
;;;73         system_battery_level  = 0;
000028  2000              MOVS     r0,#0
00002a  49e9              LDR      r1,|L1.976|
00002c  7008              STRB     r0,[r1,#0]
;;;74         system_charging_state   = false;
00002e  49e9              LDR      r1,|L1.980|
000030  7008              STRB     r0,[r1,#0]
;;;75     
;;;76         SYSTEM_LOCAL_TIMING   = 0;
000032  49e9              LDR      r1,|L1.984|
000034  6008              STR      r0,[r1,#0]  ; SYSTEM_LOCAL_TIMING
;;;77         SYSTEM_NO_SYNC_TIMING = 0;
000036  49e9              LDR      r1,|L1.988|
000038  6008              STR      r0,[r1,#0]  ; SYSTEM_NO_SYNC_TIMING
;;;78     
;;;79         memset(pedo_data, 0, 2048);
00003a  2101              MOVS     r1,#1
00003c  02c9              LSLS     r1,r1,#11
00003e  48e3              LDR      r0,|L1.972|
000040  f7fffffe          BL       __aeabi_memclr4
;;;80     
;;;81         system_app_version    = 0x0100;      // version 1.0
000044  20ff              MOVS     r0,#0xff
000046  3001              ADDS     r0,#1
000048  49e5              LDR      r1,|L1.992|
00004a  8008              STRH     r0,[r1,#0]
;;;82     
;;;83         pedo_data_ctrl_init();
00004c  f7fffffe          BL       pedo_data_ctrl_init
;;;84     
;;;85         SYSTEM_WORK_MODE      = SYSTEM_DEFAULT_MODE;
000050  2001              MOVS     r0,#1
000052  49e4              LDR      r1,|L1.996|
000054  7008              STRB     r0,[r1,#0]
;;;86     
;;;87         SYSTEM_SLEEP_COUNTDOWN   = 0;
000056  2000              MOVS     r0,#0
000058  49e3              LDR      r1,|L1.1000|
00005a  6008              STR      r0,[r1,#0]  ; SYSTEM_SLEEP_COUNTDOWN
;;;88     }
00005c  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  standard_time_judge PROC
;;;96      */
;;;97     bool standard_time_judge()
00005e  48de              LDR      r0,|L1.984|
;;;98     {
;;;99         if(SYSTEM_LOCAL_TIMING > 0xA39376E1598000)  // 2000/0/0/0
000060  6800              LDR      r0,[r0,#0]  ; SYSTEM_LOCAL_TIMING
000062  2100              MOVS     r1,#0
000064  4ae1              LDR      r2,|L1.1004|
000066  4be2              LDR      r3,|L1.1008|
000068  1a10              SUBS     r0,r2,r0
00006a  418b              SBCS     r3,r3,r1
00006c  da01              BGE      |L1.114|
;;;100            return true;
00006e  2001              MOVS     r0,#1
                  |L1.112|
;;;101    
;;;102        return false;
;;;103    }
000070  4770              BX       lr
                  |L1.114|
000072  2000              MOVS     r0,#0                 ;102
000074  e7fc              B        |L1.112|
;;;104    
                          ENDP

                  get_no_sync_time PROC
;;;105    /*-------------------------- 返回非标准时间 ---------------------------*/
;;;106    uint32_t get_no_sync_time()
000076  48d9              LDR      r0,|L1.988|
;;;107    {
;;;108        return SYSTEM_NO_SYNC_TIMING;
000078  6800              LDR      r0,[r0,#0]  ; SYSTEM_NO_SYNC_TIMING
;;;109    }
00007a  4770              BX       lr
;;;110    
                          ENDP

                  sto_no_sync_time PROC
;;;111    /*-------------------------- 存储非标准时间 ---------------------------*/
;;;112    void sto_no_sync_time()
00007c  48d6              LDR      r0,|L1.984|
;;;113    {
;;;114        SYSTEM_NO_SYNC_TIMING = SYSTEM_LOCAL_TIMING;
00007e  6800              LDR      r0,[r0,#0]  ; SYSTEM_LOCAL_TIMING
000080  49d6              LDR      r1,|L1.988|
000082  6008              STR      r0,[r1,#0]  ; SYSTEM_NO_SYNC_TIMING
;;;115    }
000084  4770              BX       lr
;;;116    
                          ENDP

                  get_system_time PROC
;;;117    /*-------------------------- 返回标准时间 ---------------------------*/
;;;118    uint32_t get_system_time()
000086  48d4              LDR      r0,|L1.984|
;;;119    {
;;;120        return SYSTEM_LOCAL_TIMING;
000088  6800              LDR      r0,[r0,#0]  ; SYSTEM_LOCAL_TIMING
;;;121    }
00008a  4770              BX       lr
;;;122    
                          ENDP

                  system_time_update PROC
;;;123    /*-------------------------- 刷新标准时间 ---------------------------*/
;;;124    void system_time_update()
00008c  48d2              LDR      r0,|L1.984|
;;;125    {
;;;126        SYSTEM_LOCAL_TIMING++;
00008e  6800              LDR      r0,[r0,#0]  ; SYSTEM_LOCAL_TIMING
000090  1c40              ADDS     r0,r0,#1
000092  49d1              LDR      r1,|L1.984|
000094  6008              STR      r0,[r1,#0]  ; SYSTEM_LOCAL_TIMING
;;;127    }
000096  4770              BX       lr
;;;128    
                          ENDP

                  set_system_time PROC
;;;129    /*-------------------------- 同步更正标准时间 ---------------------------*/
;;;130    void set_system_time(uint32_t std_time)
000098  49cf              LDR      r1,|L1.984|
;;;131    {
;;;132        SYSTEM_LOCAL_TIMING = std_time;
00009a  6008              STR      r0,[r1,#0]  ; SYSTEM_LOCAL_TIMING
;;;133    }
00009c  4770              BX       lr
;;;134    
                          ENDP

                  get_sleep_countdown PROC
;;;135    /*-------------------------- 返回系统休眠倒计时 ---------------------------*/
;;;136    uint32_t get_sleep_countdown()
00009e  48d2              LDR      r0,|L1.1000|
;;;137    {
;;;138        return SYSTEM_SLEEP_COUNTDOWN;
0000a0  6800              LDR      r0,[r0,#0]  ; SYSTEM_SLEEP_COUNTDOWN
;;;139    }
0000a2  4770              BX       lr
;;;140    
                          ENDP

                  system_countdown_update PROC
;;;141    /*-------------------------- 刷新系统休眠倒计时 ---------------------------*/
;;;142    void system_countdown_update()
0000a4  48d0              LDR      r0,|L1.1000|
;;;143    {
;;;144        SYSTEM_SLEEP_COUNTDOWN++;
0000a6  6800              LDR      r0,[r0,#0]  ; SYSTEM_SLEEP_COUNTDOWN
0000a8  1c40              ADDS     r0,r0,#1
0000aa  49cf              LDR      r1,|L1.1000|
0000ac  6008              STR      r0,[r1,#0]  ; SYSTEM_SLEEP_COUNTDOWN
;;;145    }
0000ae  4770              BX       lr
;;;146    
                          ENDP

                  clear_sleep_countdown PROC
;;;147    /*-------------------------- 系统休眠倒计时清零 ---------------------------*/
;;;148    void clear_sleep_countdown()
0000b0  2000              MOVS     r0,#0
;;;149    {
;;;150        SYSTEM_SLEEP_COUNTDOWN = 0;
0000b2  49cd              LDR      r1,|L1.1000|
0000b4  6008              STR      r0,[r1,#0]  ; SYSTEM_SLEEP_COUNTDOWN
;;;151    }
0000b6  4770              BX       lr
;;;152    
                          ENDP

                  get_system_app_version PROC
;;;153    /*-------------------------- 返回系统版本号 ---------------------------*/
;;;154    uint16_t get_system_app_version()
0000b8  48c9              LDR      r0,|L1.992|
;;;155    {
;;;156        return system_app_version;
0000ba  8800              LDRH     r0,[r0,#0]  ; system_app_version
;;;157    }
0000bc  4770              BX       lr
;;;158    
                          ENDP

                  set_battery_level PROC
;;;159    /*--------------------------- 设置系统电量信息 -------------------------*/
;;;160    void set_battery_level(uint8_t level)
0000be  49c4              LDR      r1,|L1.976|
;;;161    {
;;;162        system_battery_level = level;
0000c0  7008              STRB     r0,[r1,#0]
;;;163    }
0000c2  4770              BX       lr
;;;164    
                          ENDP

                  get_battery_level PROC
;;;165    /*--------------------------- 返回系统电量信息 -------------------------*/
;;;166    uint8_t get_battery_level()
0000c4  48c2              LDR      r0,|L1.976|
;;;167    {
;;;168        return system_battery_level;
0000c6  7800              LDRB     r0,[r0,#0]  ; system_battery_level
;;;169    }
0000c8  4770              BX       lr
;;;170    
                          ENDP

                  set_charging_level PROC
;;;171    /*--------------------------- 设置系统充电状态 -------------------------*/
;;;172    void set_charging_level(bool state)
0000ca  49c2              LDR      r1,|L1.980|
;;;173    {
;;;174        system_charging_state = state;
0000cc  7008              STRB     r0,[r1,#0]
;;;175    }
0000ce  4770              BX       lr
;;;176    
                          ENDP

                  get_charging_level PROC
;;;177    /*--------------------------- 返回系统充电状态 -------------------------*/
;;;178    bool get_charging_level()
0000d0  48c0              LDR      r0,|L1.980|
;;;179    {
;;;180        return system_charging_state;
0000d2  7800              LDRB     r0,[r0,#0]  ; system_charging_state
;;;181    }
0000d4  4770              BX       lr
;;;182       
                          ENDP

                  work_mode_switch PROC
;;;183    /*--------------------------- 系统工作状态更改 -------------------------*/
;;;184    void work_mode_switch()
0000d6  48c3              LDR      r0,|L1.996|
;;;185    {
;;;186        switch(SYSTEM_WORK_MODE)
0000d8  7800              LDRB     r0,[r0,#0]  ; SYSTEM_WORK_MODE
0000da  2801              CMP      r0,#1
0000dc  d004              BEQ      |L1.232|
0000de  2802              CMP      r0,#2
0000e0  d006              BEQ      |L1.240|
0000e2  2803              CMP      r0,#3
0000e4  d10c              BNE      |L1.256|
0000e6  e007              B        |L1.248|
                  |L1.232|
;;;187        {
;;;188            case SYSTEM_PEDOMETER_MODE :
;;;189                SYSTEM_WORK_MODE = SYSTEM_USER_SLEEP_MODE;
0000e8  2002              MOVS     r0,#2
0000ea  49be              LDR      r1,|L1.996|
0000ec  7008              STRB     r0,[r1,#0]
;;;190            break;
0000ee  e007              B        |L1.256|
                  |L1.240|
;;;191                    
;;;192            case SYSTEM_USER_SLEEP_MODE:
;;;193                 SYSTEM_WORK_MODE = SYSTEM_BLE_WORK_MODE;
0000f0  2003              MOVS     r0,#3
0000f2  49bc              LDR      r1,|L1.996|
0000f4  7008              STRB     r0,[r1,#0]
;;;194            break;
0000f6  e003              B        |L1.256|
                  |L1.248|
;;;195    
;;;196            case SYSTEM_BLE_WORK_MODE:
;;;197                 SYSTEM_WORK_MODE = SYSTEM_PEDOMETER_MODE;
0000f8  2001              MOVS     r0,#1
0000fa  49ba              LDR      r1,|L1.996|
0000fc  7008              STRB     r0,[r1,#0]
;;;198            break;
0000fe  bf00              NOP      
                  |L1.256|
000100  bf00              NOP                            ;190
;;;199         }
;;;200    }
000102  4770              BX       lr
;;;201    
                          ENDP

                  get_work_mode PROC
;;;202    /*--------------------------- 返回系统工作状态 -------------------------*/
;;;203    uint8_t get_work_mode()
000104  48b7              LDR      r0,|L1.996|
;;;204    {
;;;205        return SYSTEM_WORK_MODE;
000106  7800              LDRB     r0,[r0,#0]  ; SYSTEM_WORK_MODE
;;;206    }
000108  4770              BX       lr
;;;207    
                          ENDP

                  work_mode_init PROC
;;;208    /*--------------------------- 初始化系统工作状态 -----------------------*/
;;;209    void work_mode_init()
00010a  2001              MOVS     r0,#1
;;;210    {
;;;211        SYSTEM_WORK_MODE = SYSTEM_DEFAULT_MODE;
00010c  49b5              LDR      r1,|L1.996|
00010e  7008              STRB     r0,[r1,#0]
;;;212    }
000110  4770              BX       lr
;;;213    
                          ENDP

                  get_work_switch_state PROC
;;;214    /*--------------------------- 返回系统切换状态 -------------------------*/
;;;215    bool get_work_switch_state()
000112  48b8              LDR      r0,|L1.1012|
;;;216    {
;;;217        return SYSTEM_WORK_MODE_SWITCH;
000114  7800              LDRB     r0,[r0,#0]  ; SYSTEM_WORK_MODE_SWITCH
;;;218    }
000116  4770              BX       lr
;;;219    
                          ENDP

                  work_switch_set PROC
;;;220    /*--------------------------- 置位系统切换状态 -----------------------*/
;;;221    void work_switch_set()
000118  2001              MOVS     r0,#1
;;;222    {
;;;223        SYSTEM_WORK_MODE_SWITCH = true;
00011a  49b6              LDR      r1,|L1.1012|
00011c  7008              STRB     r0,[r1,#0]
;;;224    }
00011e  4770              BX       lr
;;;225    
                          ENDP

                  work_switch_clear PROC
;;;226    /*--------------------------- 清除系统切换状态 -----------------------*/
;;;227    void work_switch_clear()
000120  2000              MOVS     r0,#0
;;;228    {
;;;229        SYSTEM_WORK_MODE_SWITCH = false;
000122  49b4              LDR      r1,|L1.1012|
000124  7008              STRB     r0,[r1,#0]
;;;230    }
000126  4770              BX       lr
;;;231    
                          ENDP

                  read_back_disable PROC
;;;232    /*--------------------------- 回读保护禁止 -----------------------------*/
;;;233    void read_back_disable()
000128  20ff              MOVS     r0,#0xff
;;;234    {
;;;235         NRF_UICR->RBPCONF = UICR_RBPCONF_PALL_Disabled << UICR_RBPCONF_PALL_Pos;
00012a  0200              LSLS     r0,r0,#8
00012c  49b2              LDR      r1,|L1.1016|
00012e  6048              STR      r0,[r1,#4]
;;;236    }
000130  4770              BX       lr
;;;237    
                          ENDP

                  mcu_bootloader_check PROC
;;;238    /*--------------------------- 系统引导系统检测 ------------------------*/
;;;239    void mcu_bootloader_check()
000132  b510              PUSH     {r4,lr}
;;;240    {    
;;;241        if(bootloader_start_address == BOOTLOADER_ADDRESS_DEFAULT)
000134  48b1              LDR      r0,|L1.1020|
000136  6800              LDR      r0,[r0,#0]  ; bootloader_start_address
000138  1c40              ADDS     r0,r0,#1
00013a  d11b              BNE      |L1.372|
;;;242        {                                                
;;;243            read_back_disable();
00013c  f7fffffe          BL       read_back_disable
;;;244            flash_word_write((uint32_t*)NRF_UICR_BOOT_START_ADDRESS, BOOTLOADER_ADDRESS);                               
000140  2105              MOVS     r1,#5
000142  03c9              LSLS     r1,r1,#15
000144  48ac              LDR      r0,|L1.1016|
000146  3014              ADDS     r0,r0,#0x14
000148  f7fffffe          BL       flash_word_write
;;;245            flash_specword_write((uint32_t*)SYSTEM_PARAMETERS_SETTINGS_ADDRESS, SYSTEM_APP_VALID_OFFSET, SYSTEM_APP_VALID);
00014c  2201              MOVS     r2,#1
00014e  2100              MOVS     r1,#0
000150  20ff              MOVS     r0,#0xff
000152  0280              LSLS     r0,r0,#10
000154  f7fffffe          BL       flash_specword_write
;;;246            
;;;247            xprintf("switch bootloader to 0x28000, begin to reset.\r\n");
000158  a0a9              ADR      r0,|L1.1024|
00015a  f7fffffe          BL       xprintf
;;;248            NVIC_SystemReset();
00015e  bf00              NOP      
000160  f3bf8f4f          DSB      
000164  48b2              LDR      r0,|L1.1072|
000166  49b3              LDR      r1,|L1.1076|
000168  60c8              STR      r0,[r1,#0xc]
00016a  f3bf8f4f          DSB      
00016e  bf00              NOP      
000170  bf00              NOP      
                  |L1.370|
000172  e7fe              B        |L1.370|
                  |L1.372|
;;;249        }
;;;250        
;;;251        xprintf("system app start work...\r\n");
000174  a0b0              ADR      r0,|L1.1080|
000176  f7fffffe          BL       xprintf
;;;252    }
00017a  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  get_pedo_slice_handle_state PROC
;;;271    /*--------------------------- 返回一个运动存储片段的状态 ------------------------*/
;;;272    bool get_pedo_slice_handle_state()
00017c  4892              LDR      r0,|L1.968|
;;;273    {
;;;274        return pedo_ctrl.slice_handle;
00017e  7900              LDRB     r0,[r0,#4]  ; pedo_ctrl
;;;275    }
000180  4770              BX       lr
;;;276    
                          ENDP

                  get_pedo_data_length PROC
;;;277    /*--------------------------- 运动数据的长度 ------------------------------------*/
;;;278    uint32_t get_pedo_data_length()
000182  4891              LDR      r0,|L1.968|
;;;279    {
;;;280        return pedo_ctrl.sto_pointer;
000184  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
;;;281    }
000186  4770              BX       lr
;;;282    
                          ENDP

                  pedo_data_sto_ctrl_erase PROC
;;;284    /*--------------------------- 运动数据擦除 --------------------------------------*/
;;;285    void pedo_data_sto_ctrl_erase()
000188  b510              PUSH     {r4,lr}
;;;286    {
;;;287        pedo_data_ctrl_init();
00018a  f7fffffe          BL       pedo_data_ctrl_init
;;;288    }
00018e  bd10              POP      {r4,pc}
;;;289    
                          ENDP

                  pedo_data_sto_handle PROC
;;;290    /*--------------------------- 运动数据片段存储处理 -------------------------------*/
;;;291    void pedo_data_sto_handle(uint16_t pedo_time, uint16_t pedo_peak, uint16_t pedo_valley)
000190  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;292    {   
000192  4606              MOV      r6,r0
000194  460f              MOV      r7,r1
;;;293        uint32_t the_value;
;;;294        uint8_t  i;
;;;295        if(pedo_ctrl.slice_handle == false)
000196  488c              LDR      r0,|L1.968|
000198  7900              LDRB     r0,[r0,#4]  ; pedo_ctrl
00019a  2800              CMP      r0,#0
00019c  d149              BNE      |L1.562|
;;;296        {   // 新的运动片段开始
;;;297    
;;;298            pedo_ctrl.slice_handle = true;
00019e  2001              MOVS     r0,#1
0001a0  4989              LDR      r1,|L1.968|
0001a2  7108              STRB     r0,[r1,#4]
;;;299    
;;;300            if(standard_time_judge() == true)
0001a4  f7fffffe          BL       standard_time_judge
0001a8  2800              CMP      r0,#0
0001aa  d009              BEQ      |L1.448|
;;;301            {
;;;302                //为标准时间
;;;303                pedo_data[pedo_ctrl.sto_pointer++] = SYSTEM_STANDARD_TIME;
0001ac  2101              MOVS     r1,#1
0001ae  4886              LDR      r0,|L1.968|
0001b0  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
0001b2  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
0001b4  1c40              ADDS     r0,r0,#1
0001b6  4b84              LDR      r3,|L1.968|
0001b8  6018              STR      r0,[r3,#0]  ; pedo_ctrl
0001ba  4884              LDR      r0,|L1.972|
0001bc  5481              STRB     r1,[r0,r2]
0001be  e01a              B        |L1.502|
                  |L1.448|
;;;304            }
;;;305            else
;;;306            {   
;;;307                pedo_data[pedo_ctrl.sto_pointer++] = SYSTEM_RELATIVE_TIME;
0001c0  210c              MOVS     r1,#0xc
0001c2  4881              LDR      r0,|L1.968|
0001c4  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
0001c6  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
0001c8  1c40              ADDS     r0,r0,#1
0001ca  4b7f              LDR      r3,|L1.968|
0001cc  6018              STR      r0,[r3,#0]  ; pedo_ctrl
0001ce  487f              LDR      r0,|L1.972|
0001d0  5481              STRB     r1,[r0,r2]
;;;308                
;;;309                // 预留相对时间差的存储空间
;;;310                pedo_ctrl.diff_pointer[pedo_ctrl.diff_count++] = pedo_ctrl.sto_pointer;
0001d2  4618              MOV      r0,r3
0001d4  6801              LDR      r1,[r0,#0]  ; pedo_ctrl
0001d6  3040              ADDS     r0,r0,#0x40
0001d8  7e02              LDRB     r2,[r0,#0x18]
0001da  7e00              LDRB     r0,[r0,#0x18]
0001dc  1c40              ADDS     r0,r0,#1
0001de  b2c3              UXTB     r3,r0
0001e0  4879              LDR      r0,|L1.968|
0001e2  3040              ADDS     r0,r0,#0x40
0001e4  7603              STRB     r3,[r0,#0x18]
0001e6  0092              LSLS     r2,r2,#2
0001e8  3838              SUBS     r0,r0,#0x38
0001ea  5081              STR      r1,[r0,r2]
;;;311                pedo_ctrl.sto_pointer += 4;
0001ec  3808              SUBS     r0,r0,#8
0001ee  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
0001f0  1d00              ADDS     r0,r0,#4
0001f2  4975              LDR      r1,|L1.968|
0001f4  6008              STR      r0,[r1,#0]  ; pedo_ctrl
                  |L1.502|
;;;312            }
;;;313            
;;;314            // 运动开始时间
;;;315            pedo_data[pedo_ctrl.sto_pointer++] = SYSTEM_SLICE_TIME_START;
0001f6  2106              MOVS     r1,#6
0001f8  4873              LDR      r0,|L1.968|
0001fa  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
0001fc  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
0001fe  1c40              ADDS     r0,r0,#1
000200  4b71              LDR      r3,|L1.968|
000202  6018              STR      r0,[r3,#0]  ; pedo_ctrl
000204  4871              LDR      r0,|L1.972|
000206  5481              STRB     r1,[r0,r2]
;;;316            the_value = get_system_time();
000208  f7fffffe          BL       get_system_time
00020c  4605              MOV      r5,r0
;;;317            for(i = 0; i < 4; i++)
00020e  2400              MOVS     r4,#0
000210  e00d              B        |L1.558|
                  |L1.530|
;;;318            {
;;;319                pedo_data[pedo_ctrl.sto_pointer++] = (the_value >> i*8) & 0xff;
000212  00e1              LSLS     r1,r4,#3
000214  4628              MOV      r0,r5
000216  40c8              LSRS     r0,r0,r1
000218  b2c1              UXTB     r1,r0
00021a  486b              LDR      r0,|L1.968|
00021c  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
00021e  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
000220  1c40              ADDS     r0,r0,#1
000222  4b69              LDR      r3,|L1.968|
000224  6018              STR      r0,[r3,#0]  ; pedo_ctrl
000226  4869              LDR      r0,|L1.972|
000228  5481              STRB     r1,[r0,r2]
00022a  1c60              ADDS     r0,r4,#1              ;317
00022c  b2c4              UXTB     r4,r0                 ;317
                  |L1.558|
00022e  2c04              CMP      r4,#4                 ;317
000230  dbef              BLT      |L1.530|
                  |L1.562|
;;;320            }
;;;321            
;;;322        }
;;;323        
;;;324        // 运动结点存储
;;;325        pedo_data[pedo_ctrl.sto_pointer++] = SYSTEM_PEDO_START;
000232  2104              MOVS     r1,#4
000234  4864              LDR      r0,|L1.968|
000236  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
000238  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
00023a  1c40              ADDS     r0,r0,#1
00023c  4b62              LDR      r3,|L1.968|
00023e  6018              STR      r0,[r3,#0]  ; pedo_ctrl
000240  4862              LDR      r0,|L1.972|
000242  5481              STRB     r1,[r0,r2]
;;;326        the_value = pedo_time;
000244  4635              MOV      r5,r6
;;;327        for(i = 0; i < 2; i++)
000246  2400              MOVS     r4,#0
000248  e00d              B        |L1.614|
                  |L1.586|
;;;328        {
;;;329            pedo_data[pedo_ctrl.sto_pointer++] = (the_value >> i*8) & 0xff;
00024a  00e1              LSLS     r1,r4,#3
00024c  4628              MOV      r0,r5
00024e  40c8              LSRS     r0,r0,r1
000250  b2c1              UXTB     r1,r0
000252  485d              LDR      r0,|L1.968|
000254  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
000256  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
000258  1c40              ADDS     r0,r0,#1
00025a  4b5b              LDR      r3,|L1.968|
00025c  6018              STR      r0,[r3,#0]  ; pedo_ctrl
00025e  485b              LDR      r0,|L1.972|
000260  5481              STRB     r1,[r0,r2]
000262  1c60              ADDS     r0,r4,#1              ;327
000264  b2c4              UXTB     r4,r0                 ;327
                  |L1.614|
000266  2c02              CMP      r4,#2                 ;327
000268  dbef              BLT      |L1.586|
;;;330        }
;;;331        the_value = pedo_peak;
00026a  463d              MOV      r5,r7
;;;332        for(i = 0; i < 2; i++)
00026c  2400              MOVS     r4,#0
00026e  e00d              B        |L1.652|
                  |L1.624|
;;;333        {
;;;334            pedo_data[pedo_ctrl.sto_pointer++] = (the_value >> i*8) & 0xff;
000270  00e1              LSLS     r1,r4,#3
000272  4628              MOV      r0,r5
000274  40c8              LSRS     r0,r0,r1
000276  b2c1              UXTB     r1,r0
000278  4853              LDR      r0,|L1.968|
00027a  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
00027c  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
00027e  1c40              ADDS     r0,r0,#1
000280  4b51              LDR      r3,|L1.968|
000282  6018              STR      r0,[r3,#0]  ; pedo_ctrl
000284  4851              LDR      r0,|L1.972|
000286  5481              STRB     r1,[r0,r2]
000288  1c60              ADDS     r0,r4,#1              ;332
00028a  b2c4              UXTB     r4,r0                 ;332
                  |L1.652|
00028c  2c02              CMP      r4,#2                 ;332
00028e  dbef              BLT      |L1.624|
;;;335        }
;;;336        the_value = pedo_valley;
000290  9d02              LDR      r5,[sp,#8]
;;;337        for(i = 0; i < 2; i++)
000292  2400              MOVS     r4,#0
000294  e00d              B        |L1.690|
                  |L1.662|
;;;338        {
;;;339            pedo_data[pedo_ctrl.sto_pointer++] = (the_value >> i*8) & 0xff;
000296  00e1              LSLS     r1,r4,#3
000298  4628              MOV      r0,r5
00029a  40c8              LSRS     r0,r0,r1
00029c  b2c1              UXTB     r1,r0
00029e  484a              LDR      r0,|L1.968|
0002a0  6802              LDR      r2,[r0,#0]  ; pedo_ctrl
0002a2  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
0002a4  1c40              ADDS     r0,r0,#1
0002a6  4b48              LDR      r3,|L1.968|
0002a8  6018              STR      r0,[r3,#0]  ; pedo_ctrl
0002aa  4848              LDR      r0,|L1.972|
0002ac  5481              STRB     r1,[r0,r2]
0002ae  1c60              ADDS     r0,r4,#1              ;337
0002b0  b2c4              UXTB     r4,r0                 ;337
                  |L1.690|
0002b2  2c02              CMP      r4,#2                 ;337
0002b4  dbef              BLT      |L1.662|
;;;340        }
;;;341       
;;;342    }
0002b6  bdfe              POP      {r1-r7,pc}
;;;343    
                          ENDP

                  pedo_data_end_handle PROC
;;;344    /*--------------------------- 运动数据片段结束处理 ----------------------------*/
;;;345    void pedo_data_end_handle()
0002b8  b530              PUSH     {r4,r5,lr}
;;;346    {
;;;347        uint32_t the_value;
;;;348        uint8_t  i;
;;;349        
;;;350        pedo_data[pedo_ctrl.sto_pointer++] = SYSTEM_SLICE_TIME_STOP;
0002ba  2307              MOVS     r3,#7
0002bc  4842              LDR      r0,|L1.968|
0002be  6804              LDR      r4,[r0,#0]  ; pedo_ctrl
0002c0  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
0002c2  1c40              ADDS     r0,r0,#1
0002c4  4d40              LDR      r5,|L1.968|
0002c6  6028              STR      r0,[r5,#0]  ; pedo_ctrl
0002c8  4840              LDR      r0,|L1.972|
0002ca  5503              STRB     r3,[r0,r4]
;;;351        the_value = get_system_time();
0002cc  f7fffffe          BL       get_system_time
0002d0  4602              MOV      r2,r0
;;;352        for(i = 0; i < 4; i++)
0002d2  2100              MOVS     r1,#0
0002d4  e00d              B        |L1.754|
                  |L1.726|
;;;353        {
;;;354            pedo_data[pedo_ctrl.sto_pointer++] = (the_value >> i*8) & 0xff;
0002d6  00cb              LSLS     r3,r1,#3
0002d8  4610              MOV      r0,r2
0002da  40d8              LSRS     r0,r0,r3
0002dc  b2c3              UXTB     r3,r0
0002de  483a              LDR      r0,|L1.968|
0002e0  6804              LDR      r4,[r0,#0]  ; pedo_ctrl
0002e2  6800              LDR      r0,[r0,#0]  ; pedo_ctrl
0002e4  1c40              ADDS     r0,r0,#1
0002e6  4d38              LDR      r5,|L1.968|
0002e8  6028              STR      r0,[r5,#0]  ; pedo_ctrl
0002ea  4838              LDR      r0,|L1.972|
0002ec  5503              STRB     r3,[r0,r4]
0002ee  1c48              ADDS     r0,r1,#1              ;352
0002f0  b2c1              UXTB     r1,r0                 ;352
                  |L1.754|
0002f2  2904              CMP      r1,#4                 ;352
0002f4  dbef              BLT      |L1.726|
;;;355        }    
;;;356        
;;;357        pedo_ctrl.slice_handle = false;     // 时间片处理结束
0002f6  2000              MOVS     r0,#0
0002f8  4b33              LDR      r3,|L1.968|
0002fa  7118              STRB     r0,[r3,#4]
;;;358    }
0002fc  bd30              POP      {r4,r5,pc}
;;;359    
                          ENDP

                  pedo_time_diff_sto_handle PROC
;;;360    /*--------------------------- 运动时间更新校准 ---------------------------------------*/
;;;361    void pedo_time_diff_sto_handle()
0002fe  b510              PUSH     {r4,lr}
;;;362    {
;;;363        uint32_t time_diff;
;;;364        uint8_t i;
;;;365        // 存在时间是相对时间的运动时间片段
;;;366        if(pedo_ctrl.diff_count > 0)
000300  4a31              LDR      r2,|L1.968|
000302  3240              ADDS     r2,r2,#0x40
000304  7e12              LDRB     r2,[r2,#0x18]
000306  2a00              CMP      r2,#0
000308  dd2d              BLE      |L1.870|
;;;367        {
;;;368            time_diff = SYSTEM_LOCAL_TIMING - SYSTEM_NO_SYNC_TIMING;
00030a  4a33              LDR      r2,|L1.984|
00030c  6812              LDR      r2,[r2,#0]  ; SYSTEM_LOCAL_TIMING
00030e  4b33              LDR      r3,|L1.988|
000310  681b              LDR      r3,[r3,#0]  ; SYSTEM_NO_SYNC_TIMING
000312  1ad1              SUBS     r1,r2,r3
;;;369            
;;;370            for(i = 0; i < pedo_ctrl.diff_count; i++)
000314  2000              MOVS     r0,#0
000316  e021              B        |L1.860|
                  |L1.792|
;;;371            {
;;;372                pedo_data[pedo_ctrl.diff_pointer[i] + 0] = (time_diff >> 0 ) & 0xff;
000318  0084              LSLS     r4,r0,#2
00031a  4a2b              LDR      r2,|L1.968|
00031c  3208              ADDS     r2,r2,#8
00031e  5912              LDR      r2,[r2,r4]
000320  4c2a              LDR      r4,|L1.972|
000322  54a1              STRB     r1,[r4,r2]
;;;373                pedo_data[pedo_ctrl.diff_pointer[i] + 1] = (time_diff >> 8 ) & 0xff;
000324  040a              LSLS     r2,r1,#16
000326  0e13              LSRS     r3,r2,#24
000328  0084              LSLS     r4,r0,#2
00032a  4a27              LDR      r2,|L1.968|
00032c  3208              ADDS     r2,r2,#8
00032e  5912              LDR      r2,[r2,r4]
000330  1c52              ADDS     r2,r2,#1
000332  4c26              LDR      r4,|L1.972|
000334  54a3              STRB     r3,[r4,r2]
;;;374                pedo_data[pedo_ctrl.diff_pointer[i] + 2] = (time_diff >> 16) & 0xff;
000336  020a              LSLS     r2,r1,#8
000338  0e13              LSRS     r3,r2,#24
00033a  0084              LSLS     r4,r0,#2
00033c  4a22              LDR      r2,|L1.968|
00033e  3208              ADDS     r2,r2,#8
000340  5912              LDR      r2,[r2,r4]
000342  1c92              ADDS     r2,r2,#2
000344  4c21              LDR      r4,|L1.972|
000346  54a3              STRB     r3,[r4,r2]
;;;375                pedo_data[pedo_ctrl.diff_pointer[i] + 3] = (time_diff >> 24) & 0xff;
000348  0e0a              LSRS     r2,r1,#24
00034a  0084              LSLS     r4,r0,#2
00034c  4b1e              LDR      r3,|L1.968|
00034e  3308              ADDS     r3,r3,#8
000350  591b              LDR      r3,[r3,r4]
000352  1cdb              ADDS     r3,r3,#3
000354  4c1d              LDR      r4,|L1.972|
000356  54e2              STRB     r2,[r4,r3]
000358  1c42              ADDS     r2,r0,#1              ;370
00035a  b2d0              UXTB     r0,r2                 ;370
                  |L1.860|
00035c  4a1a              LDR      r2,|L1.968|
00035e  3240              ADDS     r2,r2,#0x40           ;370
000360  7e12              LDRB     r2,[r2,#0x18]         ;370
000362  4282              CMP      r2,r0                 ;370
000364  dcd8              BGT      |L1.792|
                  |L1.870|
;;;376            }
;;;377        }
;;;378    }
000366  bd10              POP      {r4,pc}
;;;379    
                          ENDP

                  get_pedo_data_handle PROC
;;;381    /*----- data为发送存储空间，offset为将要读取的地址，length为读取出来的长度 ------*/
;;;382    void get_pedo_data_handle(uint8_t *data, uint32_t *offset, uint8_t *length)
000368  b530              PUSH     {r4,r5,lr}
;;;383    {
00036a  4603              MOV      r3,r0
00036c  4614              MOV      r4,r2
;;;384        uint8_t i;
;;;385     
;;;386        if( (get_pedo_data_length() - (*offset)) >= 19)
00036e  f7fffffe          BL       get_pedo_data_length
000372  680d              LDR      r5,[r1,#0]
000374  1b40              SUBS     r0,r0,r5
000376  2813              CMP      r0,#0x13
000378  d30f              BCC      |L1.922|
;;;387        {
;;;388            for(i = 0; i < 20; i++)
00037a  2200              MOVS     r2,#0
00037c  e008              B        |L1.912|
                  |L1.894|
;;;389            {
;;;390                data[i] = pedo_data[*offset];
00037e  4d13              LDR      r5,|L1.972|
000380  6808              LDR      r0,[r1,#0]
000382  5c28              LDRB     r0,[r5,r0]
000384  5498              STRB     r0,[r3,r2]
;;;391                *offset += 1;
000386  6808              LDR      r0,[r1,#0]
000388  1c40              ADDS     r0,r0,#1
00038a  6008              STR      r0,[r1,#0]
00038c  1c50              ADDS     r0,r2,#1              ;388
00038e  b2c2              UXTB     r2,r0                 ;388
                  |L1.912|
000390  2a14              CMP      r2,#0x14              ;388
000392  dbf4              BLT      |L1.894|
;;;392            }
;;;393    
;;;394            *length = 20;                
000394  2014              MOVS     r0,#0x14
000396  7020              STRB     r0,[r4,#0]
000398  e014              B        |L1.964|
                  |L1.922|
;;;395        }
;;;396        else
;;;397        {
;;;398            *length =  get_pedo_data_length() - *offset;
00039a  f7fffffe          BL       get_pedo_data_length
00039e  780d              LDRB     r5,[r1,#0]
0003a0  1b40              SUBS     r0,r0,r5
0003a2  7020              STRB     r0,[r4,#0]
;;;399            
;;;400            for(i = 0; *offset < get_pedo_data_length(); *offset += 1, i++ )
0003a4  2200              MOVS     r2,#0
0003a6  e008              B        |L1.954|
                  |L1.936|
;;;401            {
;;;402                data[i] = pedo_data[*offset];            
0003a8  4d08              LDR      r5,|L1.972|
0003aa  6808              LDR      r0,[r1,#0]
0003ac  5c28              LDRB     r0,[r5,r0]
0003ae  5498              STRB     r0,[r3,r2]
0003b0  6808              LDR      r0,[r1,#0]            ;400
0003b2  1c40              ADDS     r0,r0,#1              ;400
0003b4  6008              STR      r0,[r1,#0]            ;400
0003b6  1c50              ADDS     r0,r2,#1              ;400
0003b8  b2c2              UXTB     r2,r0                 ;400
                  |L1.954|
0003ba  f7fffffe          BL       get_pedo_data_length
0003be  680d              LDR      r5,[r1,#0]            ;400
0003c0  42a8              CMP      r0,r5                 ;400
0003c2  d8f1              BHI      |L1.936|
                  |L1.964|
;;;403            }
;;;404        } 
;;;405    
;;;406       
;;;407    }
0003c4  bd30              POP      {r4,r5,pc}
                          ENDP

0003c6  0000              DCW      0x0000
                  |L1.968|
                          DCD      pedo_ctrl
                  |L1.972|
                          DCD      pedo_data
                  |L1.976|
                          DCD      system_battery_level
                  |L1.980|
                          DCD      system_charging_state
                  |L1.984|
                          DCD      SYSTEM_LOCAL_TIMING
                  |L1.988|
                          DCD      SYSTEM_NO_SYNC_TIMING
                  |L1.992|
                          DCD      system_app_version
                  |L1.996|
                          DCD      SYSTEM_WORK_MODE
                  |L1.1000|
                          DCD      SYSTEM_SLEEP_COUNTDOWN
                  |L1.1004|
                          DCD      0xe1598000
                  |L1.1008|
                          DCD      0x00a39376
                  |L1.1012|
                          DCD      SYSTEM_WORK_MODE_SWITCH
                  |L1.1016|
                          DCD      0x10001000
                  |L1.1020|
                          DCD      bootloader_start_address
                  |L1.1024|
000400  73776974          DCB      "switch bootloader to 0x28000, begin to reset.\r\n",0
000404  63682062
000408  6f6f746c
00040c  6f616465
000410  7220746f
000414  20307832
000418  38303030
00041c  2c206265
000420  67696e20
000424  746f2072
000428  65736574
00042c  2e0d0a00
                  |L1.1072|
                          DCD      0x05fa0004
                  |L1.1076|
                          DCD      0xe000ed00
                  |L1.1080|
000438  73797374          DCB      "system app start work...\r\n",0
00043c  656d2061
000440  70702073
000444  74617274
000448  20776f72
00044c  6b2e2e2e
000450  0d0a00  
000453  00                DCB      0

                          AREA ||.ARM.__AT_0x0003FC00||, DATA, NOINIT, ALIGN=2

                  system_parameters_settings
                  ||__tagsym$$used||
                          %        1024

                          AREA ||.ARM.__AT_0x10001014||, DATA, NOINIT, ALIGN=2

                  bootloader_start_address
                          %        4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pedo_data
                          %        2048
                  pedo_struct
                          %        92
                  pedo_ctrl
                          %        92

                          AREA ||.data||, DATA, ALIGN=2

                  system_battery_level
000000  00                DCB      0x00
                  system_charging_state
000001  000000            DCB      0x00,0x00,0x00
                  SYSTEM_LOCAL_TIMING
                          DCD      0x00000000
                  SYSTEM_NO_SYNC_TIMING
                          DCD      0x00000000
                  system_app_version
00000c  0100              DCW      0x0100
                  SYSTEM_WORK_MODE
00000e  00                DCB      0x00
                  SYSTEM_WORK_MODE_SWITCH
00000f  00                DCB      0x00
                  SYSTEM_SLEEP_COUNTDOWN
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\sys_info_storage\\system_info_storage.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_system_info_storage_c_3db60424____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_system_info_storage_c_3db60424____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_system_info_storage_c_3db60424____REVSH|
#line 130
|__asm___21_system_info_storage_c_3db60424____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
