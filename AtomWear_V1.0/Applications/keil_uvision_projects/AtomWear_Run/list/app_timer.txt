; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\app_timer.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\app_timer.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\app_timer.crf ..\..\..\Software\Source\ble_lib\app_timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;566     */
;;;567    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;568    {
;;;569      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L1.58|
;;;570        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
000006  4afe              LDR      r2,|L1.1024|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4bf5              LDR      r3,|L1.1024|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L1.108|
                  |L1.58|
;;;571            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;572      else {
;;;573        NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4af2              LDR      r2,|L1.1028|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4be9              LDR      r3,|L1.1028|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L1.108|
;;;574            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;575    }
00006c  bd10              POP      {r4,pc}
;;;576    
                          ENDP

                  rtc1_init PROC
;;;155     */
;;;156    static void rtc1_init(uint32_t prescaler)
00006e  b510              PUSH     {r4,lr}
;;;157    {
000070  4604              MOV      r4,r0
;;;158        NRF_RTC1->PRESCALER = prescaler;
000072  48e5              LDR      r0,|L1.1032|
000074  6084              STR      r4,[r0,#8]
;;;159        NVIC_SetPriority(RTC1_IRQn, RTC1_IRQ_PRI);
000076  2103              MOVS     r1,#3
000078  2011              MOVS     r0,#0x11
00007a  f7fffffe          BL       NVIC_SetPriority
;;;160    }
00007e  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  rtc1_start PROC
;;;164     */
;;;165    static void rtc1_start(void)
000080  b510              PUSH     {r4,lr}
;;;166    {
;;;167        NRF_RTC1->EVTENSET = RTC_EVTEN_COMPARE0_Msk;
000082  2001              MOVS     r0,#1
000084  0400              LSLS     r0,r0,#16
000086  49e1              LDR      r1,|L1.1036|
000088  6048              STR      r0,[r1,#4]
;;;168        NRF_RTC1->INTENSET = RTC_INTENSET_COMPARE0_Msk;
00008a  49e0              LDR      r1,|L1.1036|
00008c  3940              SUBS     r1,r1,#0x40
00008e  6048              STR      r0,[r1,#4]
;;;169    
;;;170        NVIC_ClearPendingIRQ(RTC1_IRQn);
000090  2011              MOVS     r0,#0x11
000092  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;171        NVIC_EnableIRQ(RTC1_IRQn);
000096  2011              MOVS     r0,#0x11
000098  f7fffffe          BL       NVIC_EnableIRQ
;;;172    
;;;173        NRF_RTC1->TASKS_START = 1;
00009c  2001              MOVS     r0,#1
00009e  49dc              LDR      r1,|L1.1040|
0000a0  6008              STR      r0,[r1,#0]
;;;174        nrf_delay_us(MAX_RTC_TASKS_DELAY);
0000a2  202f              MOVS     r0,#0x2f
0000a4  f7fffffe          BL       __asm___11_app_timer_c_cd27f9c3__nrf_delay_us
;;;175    }
0000a8  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  rtc1_stop PROC
;;;179     */
;;;180    static void rtc1_stop(void)
0000aa  b510              PUSH     {r4,lr}
;;;181    {
;;;182        NVIC_DisableIRQ(RTC1_IRQn);
0000ac  2011              MOVS     r0,#0x11
0000ae  f7fffffe          BL       NVIC_DisableIRQ
;;;183    
;;;184        NRF_RTC1->EVTENCLR = RTC_EVTEN_COMPARE0_Msk;
0000b2  2001              MOVS     r0,#1
0000b4  0400              LSLS     r0,r0,#16
0000b6  49d5              LDR      r1,|L1.1036|
0000b8  6088              STR      r0,[r1,#8]
;;;185        NRF_RTC1->INTENCLR = RTC_INTENSET_COMPARE0_Msk;
0000ba  49d4              LDR      r1,|L1.1036|
0000bc  3940              SUBS     r1,r1,#0x40
0000be  6088              STR      r0,[r1,#8]
;;;186    
;;;187        NRF_RTC1->TASKS_STOP = 1;
0000c0  2001              MOVS     r0,#1
0000c2  49d3              LDR      r1,|L1.1040|
0000c4  6048              STR      r0,[r1,#4]
;;;188        nrf_delay_us(MAX_RTC_TASKS_DELAY);
0000c6  202f              MOVS     r0,#0x2f
0000c8  f7fffffe          BL       __asm___11_app_timer_c_cd27f9c3__nrf_delay_us
;;;189    }
0000cc  bd10              POP      {r4,pc}
;;;190    
                          ENDP

                  timer_list_insert PROC
;;;226     */
;;;227    static void timer_list_insert(app_timer_id_t timer_id)
0000ce  b5f0              PUSH     {r4-r7,lr}
;;;228    {
0000d0  4602              MOV      r2,r0
;;;229        timer_node_t * p_timer = &mp_nodes[timer_id];
0000d2  2024              MOVS     r0,#0x24
0000d4  4350              MULS     r0,r2,r0
0000d6  4bcf              LDR      r3,|L1.1044|
0000d8  681b              LDR      r3,[r3,#0]  ; mp_nodes
0000da  18c1              ADDS     r1,r0,r3
;;;230        
;;;231        if (m_timer_id_head == TIMER_NULL)
0000dc  48ce              LDR      r0,|L1.1048|
0000de  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
0000e0  1c40              ADDS     r0,r0,#1
0000e2  d102              BNE      |L1.234|
;;;232        {
;;;233            m_timer_id_head = timer_id;
0000e4  48cc              LDR      r0,|L1.1048|
0000e6  6002              STR      r2,[r0,#0]  ; m_timer_id_head
0000e8  e057              B        |L1.410|
                  |L1.234|
;;;234        }
;;;235        else
;;;236        {
;;;237            if (p_timer->ticks_to_expire <= mp_nodes[m_timer_id_head].ticks_to_expire)
0000ea  48cb              LDR      r0,|L1.1048|
0000ec  684b              LDR      r3,[r1,#4]
0000ee  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
0000f0  2424              MOVS     r4,#0x24
0000f2  4360              MULS     r0,r4,r0
0000f4  4cc7              LDR      r4,|L1.1044|
0000f6  6824              LDR      r4,[r4,#0]  ; mp_nodes
0000f8  1900              ADDS     r0,r0,r4
0000fa  6840              LDR      r0,[r0,#4]
0000fc  4283              CMP      r3,r0
0000fe  d817              BHI      |L1.304|
;;;238            {
;;;239                mp_nodes[m_timer_id_head].ticks_to_expire -= p_timer->ticks_to_expire;
000100  48c5              LDR      r0,|L1.1048|
000102  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
000104  2324              MOVS     r3,#0x24
000106  4358              MULS     r0,r3,r0
000108  4bc2              LDR      r3,|L1.1044|
00010a  681b              LDR      r3,[r3,#0]  ; mp_nodes
00010c  18c0              ADDS     r0,r0,r3
00010e  6840              LDR      r0,[r0,#4]
000110  684b              LDR      r3,[r1,#4]
000112  1ac3              SUBS     r3,r0,r3
000114  48c0              LDR      r0,|L1.1048|
000116  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
000118  2424              MOVS     r4,#0x24
00011a  4360              MULS     r0,r4,r0
00011c  4cbd              LDR      r4,|L1.1044|
00011e  6824              LDR      r4,[r4,#0]  ; mp_nodes
000120  1900              ADDS     r0,r0,r4
000122  6043              STR      r3,[r0,#4]
;;;240                
;;;241                p_timer->next   = m_timer_id_head;
000124  48bc              LDR      r0,|L1.1048|
000126  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
000128  6208              STR      r0,[r1,#0x20]
;;;242                m_timer_id_head = timer_id;
00012a  48bb              LDR      r0,|L1.1048|
00012c  6002              STR      r2,[r0,#0]  ; m_timer_id_head
00012e  e034              B        |L1.410|
                  |L1.304|
;;;243            }
;;;244            else
;;;245            {
;;;246                app_timer_id_t previous;
;;;247                app_timer_id_t current;
;;;248                uint32_t       ticks_to_expire;
;;;249    
;;;250                ticks_to_expire = p_timer->ticks_to_expire;
000130  684b              LDR      r3,[r1,#4]
;;;251                previous        = m_timer_id_head;
000132  4db9              LDR      r5,|L1.1048|
000134  682c              LDR      r4,[r5,#0]  ; m_timer_id_head
;;;252                current         = m_timer_id_head;
000136  6828              LDR      r0,[r5,#0]  ; m_timer_id_head
;;;253                
;;;254                while ((current != TIMER_NULL) && (ticks_to_expire > mp_nodes[current].ticks_to_expire))
000138  e00d              B        |L1.342|
                  |L1.314|
;;;255                {
;;;256                    ticks_to_expire -= mp_nodes[current].ticks_to_expire;
00013a  2524              MOVS     r5,#0x24
00013c  4345              MULS     r5,r0,r5
00013e  4eb5              LDR      r6,|L1.1044|
000140  6836              LDR      r6,[r6,#0]  ; mp_nodes
000142  19ad              ADDS     r5,r5,r6
000144  686d              LDR      r5,[r5,#4]
000146  1b5b              SUBS     r3,r3,r5
;;;257                    previous         = current;
000148  4604              MOV      r4,r0
;;;258                    current          = mp_nodes[current].next;
00014a  2524              MOVS     r5,#0x24
00014c  4345              MULS     r5,r0,r5
00014e  4eb1              LDR      r6,|L1.1044|
000150  6836              LDR      r6,[r6,#0]  ; mp_nodes
000152  19ad              ADDS     r5,r5,r6
000154  6a28              LDR      r0,[r5,#0x20]
                  |L1.342|
000156  1c45              ADDS     r5,r0,#1              ;254
000158  d007              BEQ      |L1.362|
00015a  2524              MOVS     r5,#0x24              ;254
00015c  4345              MULS     r5,r0,r5              ;254
00015e  4ead              LDR      r6,|L1.1044|
000160  6836              LDR      r6,[r6,#0]            ;254  ; mp_nodes
000162  19ad              ADDS     r5,r5,r6              ;254
000164  686d              LDR      r5,[r5,#4]            ;254
000166  429d              CMP      r5,r3                 ;254
000168  d3e7              BCC      |L1.314|
                  |L1.362|
;;;259                }
;;;260    
;;;261                if (current != TIMER_NULL)
00016a  1c45              ADDS     r5,r0,#1
00016c  d00c              BEQ      |L1.392|
;;;262                {
;;;263                    mp_nodes[current].ticks_to_expire -= ticks_to_expire;
00016e  2524              MOVS     r5,#0x24
000170  4345              MULS     r5,r0,r5
000172  4ea8              LDR      r6,|L1.1044|
000174  6836              LDR      r6,[r6,#0]  ; mp_nodes
000176  19ad              ADDS     r5,r5,r6
000178  686d              LDR      r5,[r5,#4]
00017a  1aee              SUBS     r6,r5,r3
00017c  2524              MOVS     r5,#0x24
00017e  4345              MULS     r5,r0,r5
000180  4fa4              LDR      r7,|L1.1044|
000182  683f              LDR      r7,[r7,#0]  ; mp_nodes
000184  19ed              ADDS     r5,r5,r7
000186  606e              STR      r6,[r5,#4]
                  |L1.392|
;;;264                }
;;;265    
;;;266                p_timer->ticks_to_expire = ticks_to_expire;
000188  604b              STR      r3,[r1,#4]
;;;267                p_timer->next            = current;
00018a  6208              STR      r0,[r1,#0x20]
;;;268                mp_nodes[previous].next  = timer_id;
00018c  2524              MOVS     r5,#0x24
00018e  4365              MULS     r5,r4,r5
000190  4ea0              LDR      r6,|L1.1044|
000192  6836              LDR      r6,[r6,#0]  ; mp_nodes
000194  19ad              ADDS     r5,r5,r6
000196  622a              STR      r2,[r5,#0x20]
;;;269            }
000198  bf00              NOP      
                  |L1.410|
;;;270        }
;;;271    }
00019a  bdf0              POP      {r4-r7,pc}
;;;272    
                          ENDP

                  timer_list_remove PROC
;;;277     */
;;;278    static void timer_list_remove(app_timer_id_t timer_id)
00019c  b570              PUSH     {r4-r6,lr}
;;;279    {
00019e  4602              MOV      r2,r0
;;;280        app_timer_id_t previous;
;;;281        app_timer_id_t current;
;;;282        uint32_t       timeout;
;;;283    
;;;284        // Find the timer's position in timer list
;;;285        previous = m_timer_id_head;
0001a0  4c9d              LDR      r4,|L1.1048|
0001a2  6821              LDR      r1,[r4,#0]  ; m_timer_id_head
;;;286        current  = previous;
0001a4  4608              MOV      r0,r1
;;;287        
;;;288        while (current != TIMER_NULL)
0001a6  e009              B        |L1.444|
                  |L1.424|
;;;289        {
;;;290            if (current == timer_id)
0001a8  4290              CMP      r0,r2
0001aa  d100              BNE      |L1.430|
;;;291            {
;;;292                break;
0001ac  e008              B        |L1.448|
                  |L1.430|
;;;293            }
;;;294            previous = current;
0001ae  4601              MOV      r1,r0
;;;295            current  = mp_nodes[current].next;
0001b0  2424              MOVS     r4,#0x24
0001b2  4344              MULS     r4,r0,r4
0001b4  4d97              LDR      r5,|L1.1044|
0001b6  682d              LDR      r5,[r5,#0]  ; mp_nodes
0001b8  1964              ADDS     r4,r4,r5
0001ba  6a20              LDR      r0,[r4,#0x20]
                  |L1.444|
0001bc  1c44              ADDS     r4,r0,#1              ;288
0001be  d1f3              BNE      |L1.424|
                  |L1.448|
0001c0  bf00              NOP                            ;292
;;;296        }
;;;297    
;;;298        // Timer not in active list
;;;299        if (current == TIMER_NULL)
0001c2  1c44              ADDS     r4,r0,#1
0001c4  d100              BNE      |L1.456|
                  |L1.454|
;;;300        {
;;;301            return;
;;;302        }
;;;303    
;;;304        // Timer is the first in the list
;;;305        if (previous == current)
;;;306        {
;;;307            m_timer_id_head = mp_nodes[m_timer_id_head].next;
;;;308        }
;;;309    
;;;310        // Remaining timeout between next timeout
;;;311        timeout = mp_nodes[current].ticks_to_expire;
;;;312    
;;;313        // Link previous timer with next of this timer, i.e. removing the timer from list
;;;314        mp_nodes[previous].next = mp_nodes[current].next;
;;;315    
;;;316        // If this is not the last timer, increment the next timer by this timer timeout
;;;317        current = mp_nodes[previous].next;
;;;318        if (current != TIMER_NULL)
;;;319        {
;;;320            mp_nodes[current].ticks_to_expire += timeout;
;;;321        }
;;;322    }
0001c6  bd70              POP      {r4-r6,pc}
                  |L1.456|
0001c8  4281              CMP      r1,r0                 ;305
0001ca  d109              BNE      |L1.480|
0001cc  4c92              LDR      r4,|L1.1048|
0001ce  6824              LDR      r4,[r4,#0]            ;307  ; m_timer_id_head
0001d0  2524              MOVS     r5,#0x24              ;307
0001d2  436c              MULS     r4,r5,r4              ;307
0001d4  4d8f              LDR      r5,|L1.1044|
0001d6  682d              LDR      r5,[r5,#0]            ;307  ; mp_nodes
0001d8  1964              ADDS     r4,r4,r5              ;307
0001da  6a24              LDR      r4,[r4,#0x20]         ;307
0001dc  4d8e              LDR      r5,|L1.1048|
0001de  602c              STR      r4,[r5,#0]            ;307  ; m_timer_id_head
                  |L1.480|
0001e0  2424              MOVS     r4,#0x24              ;311
0001e2  4344              MULS     r4,r0,r4              ;311
0001e4  4d8b              LDR      r5,|L1.1044|
0001e6  682d              LDR      r5,[r5,#0]            ;311  ; mp_nodes
0001e8  1964              ADDS     r4,r4,r5              ;311
0001ea  6863              LDR      r3,[r4,#4]            ;311
0001ec  2424              MOVS     r4,#0x24              ;314
0001ee  4344              MULS     r4,r0,r4              ;314
0001f0  4d88              LDR      r5,|L1.1044|
0001f2  682d              LDR      r5,[r5,#0]            ;314  ; mp_nodes
0001f4  1964              ADDS     r4,r4,r5              ;314
0001f6  6a25              LDR      r5,[r4,#0x20]         ;314
0001f8  2424              MOVS     r4,#0x24              ;314
0001fa  434c              MULS     r4,r1,r4              ;314
0001fc  4e85              LDR      r6,|L1.1044|
0001fe  6836              LDR      r6,[r6,#0]            ;314  ; mp_nodes
000200  19a4              ADDS     r4,r4,r6              ;314
000202  6225              STR      r5,[r4,#0x20]         ;314
000204  2424              MOVS     r4,#0x24              ;317
000206  434c              MULS     r4,r1,r4              ;317
000208  4d82              LDR      r5,|L1.1044|
00020a  682d              LDR      r5,[r5,#0]            ;317  ; mp_nodes
00020c  1964              ADDS     r4,r4,r5              ;317
00020e  6a20              LDR      r0,[r4,#0x20]         ;317
000210  1c44              ADDS     r4,r0,#1              ;318
000212  d00c              BEQ      |L1.558|
000214  2424              MOVS     r4,#0x24              ;320
000216  4344              MULS     r4,r0,r4              ;320
000218  4d7e              LDR      r5,|L1.1044|
00021a  682d              LDR      r5,[r5,#0]            ;320  ; mp_nodes
00021c  1964              ADDS     r4,r4,r5              ;320
00021e  6864              LDR      r4,[r4,#4]            ;320
000220  18e5              ADDS     r5,r4,r3              ;320
000222  2424              MOVS     r4,#0x24              ;320
000224  4344              MULS     r4,r0,r4              ;320
000226  4e7b              LDR      r6,|L1.1044|
000228  6836              LDR      r6,[r6,#0]            ;320  ; mp_nodes
00022a  19a4              ADDS     r4,r4,r6              ;320
00022c  6065              STR      r5,[r4,#4]            ;320
                  |L1.558|
00022e  bf00              NOP      
000230  e7c9              B        |L1.454|
;;;323    
                          ENDP

                  timer_timeouts_check_sched PROC
;;;326     */
;;;327    static void timer_timeouts_check_sched(void)
000232  b510              PUSH     {r4,lr}
;;;328    {
;;;329        NVIC_SetPendingIRQ(RTC1_IRQn);
000234  2011              MOVS     r0,#0x11
000236  f7fffffe          BL       NVIC_SetPendingIRQ
;;;330    }
00023a  bd10              POP      {r4,pc}
;;;331    
                          ENDP

                  timer_list_handler_sched PROC
;;;334     */
;;;335    static void timer_list_handler_sched(void)
00023c  b510              PUSH     {r4,lr}
;;;336    {
;;;337        NVIC_SetPendingIRQ(SWI0_IRQn);
00023e  2014              MOVS     r0,#0x14
000240  f7fffffe          BL       NVIC_SetPendingIRQ
;;;338    }
000244  bd10              POP      {r4,pc}
;;;339    
                          ENDP

                  elapsed_ticks_acquire PROC
;;;347     */
;;;348    static bool elapsed_ticks_acquire(uint32_t * p_ticks_elapsed)
000246  4601              MOV      r1,r0
;;;349    {
;;;350        // Pick the elapsed value from queue 
;;;351        if (m_ticks_elapsed_q_read_ind != m_ticks_elapsed_q_write_ind)
000248  4874              LDR      r0,|L1.1052|
00024a  7800              LDRB     r0,[r0,#0]  ; m_ticks_elapsed_q_read_ind
00024c  4a74              LDR      r2,|L1.1056|
00024e  7812              LDRB     r2,[r2,#0]  ; m_ticks_elapsed_q_write_ind
000250  4290              CMP      r0,r2
000252  d01d              BEQ      |L1.656|
;;;352        {
;;;353            // Dequeue elapsed value 
;;;354            m_ticks_elapsed_q_read_ind++;
000254  4871              LDR      r0,|L1.1052|
000256  7800              LDRB     r0,[r0,#0]  ; m_ticks_elapsed_q_read_ind
000258  1c40              ADDS     r0,r0,#1
00025a  4a70              LDR      r2,|L1.1052|
00025c  7010              STRB     r0,[r2,#0]
;;;355            if (m_ticks_elapsed_q_read_ind == CONTEXT_QUEUE_SIZE_MAX)
00025e  4610              MOV      r0,r2
000260  7800              LDRB     r0,[r0,#0]  ; m_ticks_elapsed_q_read_ind
000262  2802              CMP      r0,#2
000264  d101              BNE      |L1.618|
;;;356            {
;;;357                m_ticks_elapsed_q_read_ind = 0;
000266  2000              MOVS     r0,#0
000268  7010              STRB     r0,[r2,#0]
                  |L1.618|
;;;358            }
;;;359    
;;;360            *p_ticks_elapsed = m_ticks_elapsed[m_ticks_elapsed_q_read_ind];
00026a  486c              LDR      r0,|L1.1052|
00026c  7800              LDRB     r0,[r0,#0]  ; m_ticks_elapsed_q_read_ind
00026e  0080              LSLS     r0,r0,#2
000270  4a6c              LDR      r2,|L1.1060|
000272  5810              LDR      r0,[r2,r0]
000274  6008              STR      r0,[r1,#0]
;;;361    
;;;362            m_ticks_latest += *p_ticks_elapsed;
000276  4a6c              LDR      r2,|L1.1064|
000278  6808              LDR      r0,[r1,#0]
00027a  6812              LDR      r2,[r2,#0]  ; m_ticks_latest
00027c  1880              ADDS     r0,r0,r2
00027e  4a6a              LDR      r2,|L1.1064|
000280  6010              STR      r0,[r2,#0]  ; m_ticks_latest
;;;363            m_ticks_latest &= MAX_RTC_COUNTER_VAL;
000282  4610              MOV      r0,r2
000284  6800              LDR      r0,[r0,#0]  ; m_ticks_latest
000286  0200              LSLS     r0,r0,#8
000288  0a00              LSRS     r0,r0,#8
00028a  6010              STR      r0,[r2,#0]  ; m_ticks_latest
;;;364    
;;;365            return true;
00028c  2001              MOVS     r0,#1
                  |L1.654|
;;;366        }
;;;367        else
;;;368        {
;;;369            // No elapsed value in queue 
;;;370            *p_ticks_elapsed = 0;
;;;371            return false;
;;;372        }
;;;373    }
00028e  4770              BX       lr
                  |L1.656|
000290  2000              MOVS     r0,#0                 ;370
000292  6008              STR      r0,[r1,#0]            ;370
000294  bf00              NOP                            ;371
000296  e7fa              B        |L1.654|
;;;374    
                          ENDP

                  list_deletions_handler PROC
;;;379     */
;;;380    static bool list_deletions_handler(void)
000298  b5fe              PUSH     {r1-r7,lr}
;;;381    {
;;;382        app_timer_id_t timer_id_old_head;
;;;383        uint8_t        user_id;
;;;384    
;;;385        // Remember the old head, so as to decide if new compare needs to be set
;;;386        timer_id_old_head = m_timer_id_head;
00029a  485f              LDR      r0,|L1.1048|
00029c  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
00029e  9001              STR      r0,[sp,#4]
;;;387    
;;;388        user_id = m_user_array_size;
0002a0  4862              LDR      r0,|L1.1068|
0002a2  7800              LDRB     r0,[r0,#0]  ; m_user_array_size
0002a4  9000              STR      r0,[sp,#0]
;;;389        while (user_id--)
0002a6  e03f              B        |L1.808|
                  |L1.680|
;;;390        {
;;;391            timer_user_t * p_user         = &mp_users[user_id];
0002a8  9800              LDR      r0,[sp,#0]
0002aa  00c0              LSLS     r0,r0,#3
0002ac  4960              LDR      r1,|L1.1072|
0002ae  6809              LDR      r1,[r1,#0]  ; mp_users
0002b0  1844              ADDS     r4,r0,r1
;;;392            uint8_t        user_ops_first = p_user->first;
0002b2  7825              LDRB     r5,[r4,#0]
;;;393            
;;;394            while (user_ops_first != p_user->last)
0002b4  e034              B        |L1.800|
                  |L1.694|
;;;395            {
;;;396                timer_node_t *    p_timer;
;;;397                timer_user_op_t * p_user_op = &p_user->p_user_op_queue[user_ops_first];
0002b6  2018              MOVS     r0,#0x18
0002b8  4368              MULS     r0,r5,r0
0002ba  6861              LDR      r1,[r4,#4]
0002bc  180f              ADDS     r7,r1,r0
;;;398    
;;;399                // Traverse to next operation in queue 
;;;400                user_ops_first++;
0002be  1c68              ADDS     r0,r5,#1
0002c0  b2c5              UXTB     r5,r0
;;;401                if (user_ops_first == p_user->user_op_queue_size)
0002c2  78a0              LDRB     r0,[r4,#2]
0002c4  42a8              CMP      r0,r5
0002c6  d100              BNE      |L1.714|
;;;402                {
;;;403                    user_ops_first = 0;
0002c8  2500              MOVS     r5,#0
                  |L1.714|
;;;404                }
;;;405    
;;;406                switch (p_user_op->op_type)
0002ca  7838              LDRB     r0,[r7,#0]
0002cc  2802              CMP      r0,#2
0002ce  d002              BEQ      |L1.726|
0002d0  2803              CMP      r0,#3
0002d2  d122              BNE      |L1.794|
0002d4  e00e              B        |L1.756|
                  |L1.726|
;;;407                {
;;;408                    case TIMER_USER_OP_TYPE_STOP:
;;;409                        // Delete node if timer is running
;;;410                        p_timer = &mp_nodes[p_user_op->timer_id];
0002d6  2124              MOVS     r1,#0x24
0002d8  6878              LDR      r0,[r7,#4]
0002da  4348              MULS     r0,r1,r0
0002dc  494d              LDR      r1,|L1.1044|
0002de  6809              LDR      r1,[r1,#0]  ; mp_nodes
0002e0  1846              ADDS     r6,r0,r1
;;;411                        if (p_timer->is_running)
0002e2  7d30              LDRB     r0,[r6,#0x14]
0002e4  2800              CMP      r0,#0
0002e6  d004              BEQ      |L1.754|
;;;412                        {
;;;413                            timer_list_remove(p_user_op->timer_id);
0002e8  6878              LDR      r0,[r7,#4]
0002ea  f7fffffe          BL       timer_list_remove
;;;414                            p_timer->is_running = false;
0002ee  2000              MOVS     r0,#0
0002f0  7530              STRB     r0,[r6,#0x14]
                  |L1.754|
;;;415                        }
;;;416                        break;
0002f2  e013              B        |L1.796|
                  |L1.756|
;;;417                        
;;;418                    case TIMER_USER_OP_TYPE_STOP_ALL:
;;;419                        // Delete list of running timers, and mark all timers as not running
;;;420                        while (m_timer_id_head != TIMER_NULL)
0002f4  e00c              B        |L1.784|
                  |L1.758|
;;;421                        {
;;;422                            timer_node_t * p_head = &mp_nodes[m_timer_id_head];
0002f6  4948              LDR      r1,|L1.1048|
0002f8  6809              LDR      r1,[r1,#0]  ; m_timer_id_head
0002fa  2224              MOVS     r2,#0x24
0002fc  4351              MULS     r1,r2,r1
0002fe  4a45              LDR      r2,|L1.1044|
000300  6812              LDR      r2,[r2,#0]  ; mp_nodes
000302  1888              ADDS     r0,r1,r2
;;;423    
;;;424                            p_head->is_running = false;
000304  2100              MOVS     r1,#0
000306  7501              STRB     r1,[r0,#0x14]
;;;425                            m_timer_id_head    = p_head->next;
000308  4a43              LDR      r2,|L1.1048|
00030a  6a01              LDR      r1,[r0,#0x20]
00030c  6011              STR      r1,[r2,#0]  ; m_timer_id_head
;;;426                        }
00030e  bf00              NOP      
                  |L1.784|
000310  4841              LDR      r0,|L1.1048|
000312  6800              LDR      r0,[r0,#0]            ;420  ; m_timer_id_head
000314  1c40              ADDS     r0,r0,#1              ;420
000316  d1ee              BNE      |L1.758|
;;;427                        break;
000318  e000              B        |L1.796|
                  |L1.794|
;;;428                        
;;;429                    default:
;;;430                        break;
00031a  bf00              NOP      
                  |L1.796|
00031c  bf00              NOP                            ;416
;;;431                }
;;;432            }
00031e  bf00              NOP      
                  |L1.800|
000320  7860              LDRB     r0,[r4,#1]            ;394
000322  42a8              CMP      r0,r5                 ;394
000324  d1c7              BNE      |L1.694|
;;;433        }
000326  bf00              NOP      
                  |L1.808|
000328  9800              LDR      r0,[sp,#0]            ;389
00032a  1e41              SUBS     r1,r0,#1              ;389
00032c  b2c9              UXTB     r1,r1                 ;389
00032e  9100              STR      r1,[sp,#0]            ;389
000330  2800              CMP      r0,#0                 ;389
000332  d1b9              BNE      |L1.680|
;;;434    
;;;435        // Detect change in head of the list
;;;436        return (m_timer_id_head != timer_id_old_head);
000334  4838              LDR      r0,|L1.1048|
000336  6801              LDR      r1,[r0,#0]  ; m_timer_id_head
000338  9801              LDR      r0,[sp,#4]
00033a  4281              CMP      r1,r0
00033c  d001              BEQ      |L1.834|
00033e  2001              MOVS     r0,#1
                  |L1.832|
;;;437    }
000340  bdfe              POP      {r1-r7,pc}
                  |L1.834|
000342  2000              MOVS     r0,#0                 ;436
000344  e7fc              B        |L1.832|
;;;438    
                          ENDP

                  expired_timers_handler PROC
;;;445     */
;;;446    static void expired_timers_handler(uint32_t         ticks_elapsed,
000346  b5f0              PUSH     {r4-r7,lr}
;;;447                                       uint32_t         ticks_previous,
;;;448                                       app_timer_id_t * p_restart_list_head)
;;;449    {
000348  4603              MOV      r3,r0
;;;450        uint32_t ticks_expired = 0;
00034a  2400              MOVS     r4,#0
;;;451    
;;;452        while (m_timer_id_head != TIMER_NULL)
00034c  e026              B        |L1.924|
                  |L1.846|
;;;453        {
;;;454            timer_node_t * p_timer;
;;;455            app_timer_id_t id_expired;
;;;456    
;;;457            // Auto variable for current timer node 
;;;458            p_timer = &mp_nodes[m_timer_id_head];
00034e  4e32              LDR      r6,|L1.1048|
000350  6836              LDR      r6,[r6,#0]  ; m_timer_id_head
000352  2724              MOVS     r7,#0x24
000354  437e              MULS     r6,r7,r6
000356  4f2f              LDR      r7,|L1.1044|
000358  683f              LDR      r7,[r7,#0]  ; mp_nodes
00035a  19f0              ADDS     r0,r6,r7
;;;459    
;;;460            // Do nothing if timer did not expire 
;;;461            if (ticks_elapsed < p_timer->ticks_to_expire)
00035c  6846              LDR      r6,[r0,#4]
00035e  429e              CMP      r6,r3
000360  d903              BLS      |L1.874|
;;;462            {
;;;463                p_timer->ticks_to_expire -= ticks_elapsed;
000362  6846              LDR      r6,[r0,#4]
000364  1af6              SUBS     r6,r6,r3
000366  6046              STR      r6,[r0,#4]
;;;464                break;
000368  e01c              B        |L1.932|
                  |L1.874|
;;;465            }
;;;466    
;;;467            // Decrement ticks_elapsed and collect expired ticks 
;;;468            ticks_elapsed -= p_timer->ticks_to_expire;
00036a  6846              LDR      r6,[r0,#4]
00036c  1b9b              SUBS     r3,r3,r6
;;;469            ticks_expired += p_timer->ticks_to_expire;
00036e  6846              LDR      r6,[r0,#4]
000370  1934              ADDS     r4,r6,r4
;;;470    
;;;471            // Timer expired, set ticks_to_expire zero
;;;472            p_timer->ticks_to_expire = 0;
000372  2600              MOVS     r6,#0
000374  6046              STR      r6,[r0,#4]
;;;473            p_timer->is_running      = false;
000376  7506              STRB     r6,[r0,#0x14]
;;;474    
;;;475            // Remove the expired timer from head 
;;;476            id_expired      = m_timer_id_head;
000378  4e27              LDR      r6,|L1.1048|
00037a  6835              LDR      r5,[r6,#0]  ; m_timer_id_head
;;;477            m_timer_id_head = p_timer->next;
00037c  4f26              LDR      r7,|L1.1048|
00037e  6a06              LDR      r6,[r0,#0x20]
000380  603e              STR      r6,[r7,#0]  ; m_timer_id_head
;;;478    
;;;479            // Timer will be restarted if periodic 
;;;480            if (p_timer->ticks_periodic_interval != 0)
000382  6906              LDR      r6,[r0,#0x10]
000384  2e00              CMP      r6,#0
000386  d008              BEQ      |L1.922|
;;;481            {
;;;482                p_timer->ticks_at_start       = (ticks_previous + ticks_expired) & MAX_RTC_COUNTER_VAL;
000388  190e              ADDS     r6,r1,r4
00038a  0236              LSLS     r6,r6,#8
00038c  0a36              LSRS     r6,r6,#8
00038e  6086              STR      r6,[r0,#8]
;;;483                p_timer->ticks_first_interval = p_timer->ticks_periodic_interval;
000390  6906              LDR      r6,[r0,#0x10]
000392  60c6              STR      r6,[r0,#0xc]
;;;484                p_timer->next                 = *p_restart_list_head;
000394  6816              LDR      r6,[r2,#0]
000396  6206              STR      r6,[r0,#0x20]
;;;485                *p_restart_list_head          = id_expired;
000398  6015              STR      r5,[r2,#0]
                  |L1.922|
;;;486            }
;;;487        }
00039a  bf00              NOP      
                  |L1.924|
00039c  481e              LDR      r0,|L1.1048|
00039e  6800              LDR      r0,[r0,#0]            ;452  ; m_timer_id_head
0003a0  1c40              ADDS     r0,r0,#1              ;452
0003a2  d1d4              BNE      |L1.846|
                  |L1.932|
0003a4  bf00              NOP                            ;464
;;;488    }
0003a6  bdf0              POP      {r4-r7,pc}
;;;489    
                          ENDP

                  list_insertions_handler PROC
;;;496     */
;;;497    static bool list_insertions_handler(app_timer_id_t restart_list_head)
0003a8  b5fe              PUSH     {r1-r7,lr}
;;;498    {
0003aa  4607              MOV      r7,r0
;;;499        app_timer_id_t timer_id_old_head;
;;;500        uint8_t        user_id;
;;;501    
;;;502        // Remember the old head, so as to decide if new compare needs to be set
;;;503        timer_id_old_head = m_timer_id_head;
0003ac  481a              LDR      r0,|L1.1048|
0003ae  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
0003b0  9002              STR      r0,[sp,#8]
;;;504    
;;;505        user_id = m_user_array_size;
0003b2  481e              LDR      r0,|L1.1068|
0003b4  7800              LDRB     r0,[r0,#0]  ; m_user_array_size
0003b6  9001              STR      r0,[sp,#4]
;;;506        while (user_id--)
0003b8  e084              B        |L1.1220|
                  |L1.954|
;;;507        {
;;;508            timer_user_t * p_user = &mp_users[user_id];
0003ba  9801              LDR      r0,[sp,#4]
0003bc  00c0              LSLS     r0,r0,#3
0003be  491c              LDR      r1,|L1.1072|
0003c0  6809              LDR      r1,[r1,#0]  ; mp_users
0003c2  1845              ADDS     r5,r0,r1
;;;509    
;;;510            // Handle insertions of timers 
;;;511            while ((restart_list_head != TIMER_NULL) || (p_user->first != p_user->last))
0003c4  e077              B        |L1.1206|
                  |L1.966|
;;;512            {
;;;513                app_timer_id_t id_start;
;;;514                timer_node_t * p_timer;
;;;515    
;;;516                if (restart_list_head != TIMER_NULL)
0003c6  1c78              ADDS     r0,r7,#1
0003c8  d007              BEQ      |L1.986|
;;;517                {
;;;518                    id_start          = restart_list_head;
0003ca  463e              MOV      r6,r7
;;;519                    p_timer           = &mp_nodes[id_start];
0003cc  2024              MOVS     r0,#0x24
0003ce  4370              MULS     r0,r6,r0
0003d0  4910              LDR      r1,|L1.1044|
0003d2  6809              LDR      r1,[r1,#0]  ; mp_nodes
0003d4  1844              ADDS     r4,r0,r1
;;;520                    restart_list_head = p_timer->next;
0003d6  6a27              LDR      r7,[r4,#0x20]
0003d8  e03e              B        |L1.1112|
                  |L1.986|
;;;521                }
;;;522                else
;;;523                {
;;;524                    timer_user_op_t * p_user_op = &p_user->p_user_op_queue[p_user->first];
0003da  7829              LDRB     r1,[r5,#0]
0003dc  2318              MOVS     r3,#0x18
0003de  4359              MULS     r1,r3,r1
0003e0  686a              LDR      r2,[r5,#4]
0003e2  1850              ADDS     r0,r2,r1
;;;525    
;;;526                    p_user->first++;
0003e4  7829              LDRB     r1,[r5,#0]
0003e6  1c49              ADDS     r1,r1,#1
0003e8  7029              STRB     r1,[r5,#0]
;;;527                    if (p_user->first == p_user->user_op_queue_size)
0003ea  7829              LDRB     r1,[r5,#0]
0003ec  78aa              LDRB     r2,[r5,#2]
0003ee  4291              CMP      r1,r2
0003f0  d101              BNE      |L1.1014|
;;;528                    {
;;;529                        p_user->first = 0;
0003f2  2100              MOVS     r1,#0
0003f4  7029              STRB     r1,[r5,#0]
                  |L1.1014|
;;;530                    }
;;;531    
;;;532                    id_start = p_user_op->timer_id;
0003f6  6846              LDR      r6,[r0,#4]
;;;533                    p_timer  = &mp_nodes[id_start];
0003f8  2124              MOVS     r1,#0x24
0003fa  4371              MULS     r1,r6,r1
0003fc  4a05              LDR      r2,|L1.1044|
0003fe  e019              B        |L1.1076|
                  |L1.1024|
                          DCD      0xe000ed1c
                  |L1.1028|
                          DCD      0xe000e100
                  |L1.1032|
                          DCD      0x40011500
                  |L1.1036|
                          DCD      0x40011340
                  |L1.1040|
                          DCD      0x40011000
                  |L1.1044|
                          DCD      mp_nodes
                  |L1.1048|
                          DCD      m_timer_id_head
                  |L1.1052|
                          DCD      m_ticks_elapsed_q_read_ind
                  |L1.1056|
                          DCD      m_ticks_elapsed_q_write_ind
                  |L1.1060|
                          DCD      m_ticks_elapsed
                  |L1.1064|
                          DCD      m_ticks_latest
                  |L1.1068|
                          DCD      m_user_array_size
                  |L1.1072|
                          DCD      mp_users
                  |L1.1076|
000434  6812              LDR      r2,[r2,#0]  ; mp_nodes
000436  188c              ADDS     r4,r1,r2
;;;534    
;;;535                    if ((p_user_op->op_type != TIMER_USER_OP_TYPE_START) || p_timer->is_running)
000438  7801              LDRB     r1,[r0,#0]
00043a  2901              CMP      r1,#1
00043c  d102              BNE      |L1.1092|
00043e  7d21              LDRB     r1,[r4,#0x14]
000440  2900              CMP      r1,#0
000442  d000              BEQ      |L1.1094|
                  |L1.1092|
;;;536                    {
;;;537                        continue;
000444  e037              B        |L1.1206|
                  |L1.1094|
;;;538                    }
;;;539    
;;;540                    p_timer->ticks_at_start          = p_user_op->params.start.ticks_at_start;
000446  6881              LDR      r1,[r0,#8]
000448  60a1              STR      r1,[r4,#8]
;;;541                    p_timer->ticks_first_interval    = p_user_op->params.start.ticks_first_interval;
00044a  68c1              LDR      r1,[r0,#0xc]
00044c  60e1              STR      r1,[r4,#0xc]
;;;542                    p_timer->ticks_periodic_interval = p_user_op->params.start.ticks_periodic_interval;
00044e  6901              LDR      r1,[r0,#0x10]
000450  6121              STR      r1,[r4,#0x10]
;;;543                    p_timer->p_context               = p_user_op->params.start.p_context;
000452  6941              LDR      r1,[r0,#0x14]
000454  61e1              STR      r1,[r4,#0x1c]
;;;544                }
000456  bf00              NOP      
                  |L1.1112|
;;;545    
;;;546                // Prepare the node to be inserted 
;;;547                if (
000458  49f7              LDR      r1,|L1.2104|
00045a  68a0              LDR      r0,[r4,#8]
00045c  6809              LDR      r1,[r1,#0]  ; m_ticks_latest
00045e  1a40              SUBS     r0,r0,r1
000460  0200              LSLS     r0,r0,#8
000462  0a00              LSRS     r0,r0,#8
000464  49f5              LDR      r1,|L1.2108|
000466  4288              CMP      r0,r1
000468  d208              BCS      |L1.1148|
;;;548                     ((p_timer->ticks_at_start - m_ticks_latest) & MAX_RTC_COUNTER_VAL)
;;;549                     <
;;;550                     (MAX_RTC_COUNTER_VAL / 2)
;;;551                    )
;;;552                {
;;;553                    p_timer->ticks_to_expire = ticks_diff_get(p_timer->ticks_at_start, m_ticks_latest) + 
00046a  49f3              LDR      r1,|L1.2104|
00046c  68a0              LDR      r0,[r4,#8]
00046e  6809              LDR      r1,[r1,#0]  ; m_ticks_latest
000470  f7fffffe          BL       ticks_diff_get
000474  68e1              LDR      r1,[r4,#0xc]
000476  1840              ADDS     r0,r0,r1
000478  6060              STR      r0,[r4,#4]
00047a  e011              B        |L1.1184|
                  |L1.1148|
;;;554                                               p_timer->ticks_first_interval;
;;;555                }
;;;556                else
;;;557                {
;;;558                    uint32_t delta_current_start;
;;;559    
;;;560                    delta_current_start = ticks_diff_get(m_ticks_latest, p_timer->ticks_at_start);
00047c  48ee              LDR      r0,|L1.2104|
00047e  68a1              LDR      r1,[r4,#8]
000480  6800              LDR      r0,[r0,#0]  ; m_ticks_latest
000482  f7fffffe          BL       ticks_diff_get
000486  9000              STR      r0,[sp,#0]
;;;561                    if (p_timer->ticks_first_interval > delta_current_start)
000488  68e1              LDR      r1,[r4,#0xc]
00048a  9800              LDR      r0,[sp,#0]
00048c  4281              CMP      r1,r0
00048e  d904              BLS      |L1.1178|
;;;562                    {
;;;563                        p_timer->ticks_to_expire = p_timer->ticks_first_interval - delta_current_start;
000490  68e1              LDR      r1,[r4,#0xc]
000492  9800              LDR      r0,[sp,#0]
000494  1a08              SUBS     r0,r1,r0
000496  6060              STR      r0,[r4,#4]
000498  e001              B        |L1.1182|
                  |L1.1178|
;;;564                    }
;;;565                    else
;;;566                    {
;;;567                        p_timer->ticks_to_expire = 0;
00049a  2000              MOVS     r0,#0
00049c  6060              STR      r0,[r4,#4]
                  |L1.1182|
;;;568                    }
;;;569                }
00049e  bf00              NOP      
                  |L1.1184|
;;;570    
;;;571                p_timer->ticks_at_start       = 0;
0004a0  2000              MOVS     r0,#0
0004a2  60a0              STR      r0,[r4,#8]
;;;572                p_timer->ticks_first_interval = 0;
0004a4  60e0              STR      r0,[r4,#0xc]
;;;573                p_timer->is_running           = true;
0004a6  2001              MOVS     r0,#1
0004a8  7520              STRB     r0,[r4,#0x14]
;;;574                p_timer->next                 = TIMER_NULL;
0004aa  1e80              SUBS     r0,r0,#2
0004ac  6220              STR      r0,[r4,#0x20]
;;;575    
;;;576                // Insert into list 
;;;577                timer_list_insert(id_start);
0004ae  4630              MOV      r0,r6
0004b0  f7fffffe          BL       timer_list_insert
0004b4  bf00              NOP                            ;537
                  |L1.1206|
0004b6  1c78              ADDS     r0,r7,#1              ;511
0004b8  d185              BNE      |L1.966|
0004ba  7828              LDRB     r0,[r5,#0]            ;511
0004bc  7869              LDRB     r1,[r5,#1]            ;511
0004be  4288              CMP      r0,r1                 ;511
0004c0  d181              BNE      |L1.966|
;;;578            }
;;;579        }
0004c2  bf00              NOP      
                  |L1.1220|
0004c4  9801              LDR      r0,[sp,#4]            ;506
0004c6  1e41              SUBS     r1,r0,#1              ;506
0004c8  b2c9              UXTB     r1,r1                 ;506
0004ca  9101              STR      r1,[sp,#4]            ;506
0004cc  2800              CMP      r0,#0                 ;506
0004ce  d000              BEQ      |L1.1234|
0004d0  e773              B        |L1.954|
                  |L1.1234|
;;;580        
;;;581        return (m_timer_id_head != timer_id_old_head);
0004d2  48db              LDR      r0,|L1.2112|
0004d4  6801              LDR      r1,[r0,#0]  ; m_timer_id_head
0004d6  9802              LDR      r0,[sp,#8]
0004d8  4281              CMP      r1,r0
0004da  d001              BEQ      |L1.1248|
0004dc  2001              MOVS     r0,#1
                  |L1.1246|
;;;582    }
0004de  bdfe              POP      {r1-r7,pc}
                  |L1.1248|
0004e0  2000              MOVS     r0,#0                 ;581
0004e2  e7fc              B        |L1.1246|
;;;583    
                          ENDP

                  compare_reg_update PROC
;;;586     */
;;;587    static void compare_reg_update(app_timer_id_t timer_id_head_old)
0004e4  b5fe              PUSH     {r1-r7,lr}
;;;588    {
0004e6  4605              MOV      r5,r0
;;;589        // Setup the timeout for timers on the head of the list 
;;;590        if (m_timer_id_head != TIMER_NULL)
0004e8  48d5              LDR      r0,|L1.2112|
0004ea  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
0004ec  1c40              ADDS     r0,r0,#1
0004ee  d034              BEQ      |L1.1370|
;;;591        {
;;;592            uint32_t ticks_to_expire = mp_nodes[m_timer_id_head].ticks_to_expire;
0004f0  48d3              LDR      r0,|L1.2112|
0004f2  6800              LDR      r0,[r0,#0]  ; m_timer_id_head
0004f4  2124              MOVS     r1,#0x24
0004f6  4348              MULS     r0,r1,r0
0004f8  49d2              LDR      r1,|L1.2116|
0004fa  6809              LDR      r1,[r1,#0]  ; mp_nodes
0004fc  1840              ADDS     r0,r0,r1
0004fe  6846              LDR      r6,[r0,#4]
;;;593            uint32_t pre_counter_val = rtc1_counter_get();
000500  f7fffffe          BL       rtc1_counter_get
000504  9002              STR      r0,[sp,#8]
;;;594            uint32_t cc              = m_ticks_latest;
000506  48cc              LDR      r0,|L1.2104|
000508  6804              LDR      r4,[r0,#0]  ; m_ticks_latest
;;;595            uint32_t ticks_elapsed   = ticks_diff_get(pre_counter_val, cc) + RTC_COMPARE_OFFSET_MIN;
00050a  4621              MOV      r1,r4
00050c  9802              LDR      r0,[sp,#8]
00050e  f7fffffe          BL       ticks_diff_get
000512  1cc0              ADDS     r0,r0,#3
000514  9001              STR      r0,[sp,#4]
;;;596    
;;;597            if (timer_id_head_old == TIMER_NULL)
000516  1c68              ADDS     r0,r5,#1
000518  d101              BNE      |L1.1310|
;;;598            {
;;;599                // No timers were already running, start RTC
;;;600                rtc1_start();
00051a  f7fffffe          BL       rtc1_start
                  |L1.1310|
;;;601            }
;;;602    
;;;603            cc += (ticks_elapsed < ticks_to_expire) ? ticks_to_expire : ticks_elapsed;
00051e  9801              LDR      r0,[sp,#4]
000520  42b0              CMP      r0,r6
000522  d201              BCS      |L1.1320|
000524  4630              MOV      r0,r6
000526  e000              B        |L1.1322|
                  |L1.1320|
000528  9801              LDR      r0,[sp,#4]
                  |L1.1322|
00052a  1904              ADDS     r4,r0,r4
;;;604            cc &= MAX_RTC_COUNTER_VAL;
00052c  0224              LSLS     r4,r4,#8
00052e  0a24              LSRS     r4,r4,#8
;;;605            
;;;606            rtc1_compare0_set(cc);
000530  4620              MOV      r0,r4
000532  49c5              LDR      r1,|L1.2120|
000534  6008              STR      r0,[r1,#0]
000536  bf00              NOP      
;;;607    
;;;608            uint32_t post_counter_val = rtc1_counter_get();
000538  f7fffffe          BL       rtc1_counter_get
00053c  9000              STR      r0,[sp,#0]
;;;609    
;;;610            if (
00053e  9902              LDR      r1,[sp,#8]
000540  9800              LDR      r0,[sp,#0]
000542  f7fffffe          BL       ticks_diff_get
000546  1cc7              ADDS     r7,r0,#3
000548  4620              MOV      r0,r4
00054a  9902              LDR      r1,[sp,#8]
00054c  f7fffffe          BL       ticks_diff_get
000550  4287              CMP      r7,r0
000552  d901              BLS      |L1.1368|
;;;611                (ticks_diff_get(post_counter_val, pre_counter_val) + RTC_COMPARE_OFFSET_MIN)
;;;612                >
;;;613                ticks_diff_get(cc, pre_counter_val)
;;;614               )
;;;615            {
;;;616                // When this happens the COMPARE event may not be triggered by the RTC.
;;;617                // The nRF51 Series User Specification states that if the COUNTER value is N
;;;618                // (i.e post_counter_val = N), writing N or N+1 to a CC register may not trigger a
;;;619                // COMPARE event. Hence the RTC interrupt is forcefully pended by calling the following
;;;620                // function.
;;;621                timer_timeouts_check_sched();
000554  f7fffffe          BL       timer_timeouts_check_sched
                  |L1.1368|
;;;622            }
;;;623        }
000558  e001              B        |L1.1374|
                  |L1.1370|
;;;624        else
;;;625        {
;;;626            // No timers are running, stop RTC
;;;627            rtc1_stop();
00055a  f7fffffe          BL       rtc1_stop
                  |L1.1374|
;;;628        }
;;;629    }
00055e  bdfe              POP      {r1-r7,pc}
;;;630    
                          ENDP

                  timer_list_handler PROC
;;;633     */
;;;634    static void timer_list_handler(void)
000560  b5fe              PUSH     {r1-r7,lr}
;;;635    {
;;;636        app_timer_id_t restart_list_head = TIMER_NULL;
000562  2000              MOVS     r0,#0
000564  43c0              MVNS     r0,r0
000566  9001              STR      r0,[sp,#4]
;;;637        uint32_t       ticks_elapsed;
;;;638        uint32_t       ticks_previous;
;;;639        bool           ticks_have_elapsed;
;;;640        bool           compare_update;
;;;641        app_timer_id_t timer_id_head_old;
;;;642        
;;;643        // Back up the previous known tick and previous list head
;;;644        ticks_previous    = m_ticks_latest;
000568  48b3              LDR      r0,|L1.2104|
00056a  6804              LDR      r4,[r0,#0]  ; m_ticks_latest
;;;645        timer_id_head_old = m_timer_id_head;
00056c  48b4              LDR      r0,|L1.2112|
00056e  6807              LDR      r7,[r0,#0]  ; m_timer_id_head
;;;646        
;;;647        // Get number of elapsed ticks
;;;648        ticks_have_elapsed = elapsed_ticks_acquire(&ticks_elapsed);
000570  4668              MOV      r0,sp
000572  f7fffffe          BL       elapsed_ticks_acquire
000576  4605              MOV      r5,r0
;;;649    
;;;650        // Handle list deletions
;;;651        compare_update = list_deletions_handler();
000578  f7fffffe          BL       list_deletions_handler
00057c  4606              MOV      r6,r0
;;;652        
;;;653        // Handle expired timers
;;;654        if (ticks_have_elapsed)
00057e  2d00              CMP      r5,#0
000580  d005              BEQ      |L1.1422|
;;;655        {
;;;656            expired_timers_handler(ticks_elapsed, ticks_previous, &restart_list_head);
000582  aa01              ADD      r2,sp,#4
000584  4621              MOV      r1,r4
000586  9800              LDR      r0,[sp,#0]
000588  f7fffffe          BL       expired_timers_handler
;;;657            compare_update = true;
00058c  2601              MOVS     r6,#1
                  |L1.1422|
;;;658        }
;;;659        
;;;660        // Handle list insertions
;;;661        if (list_insertions_handler(restart_list_head))
00058e  9801              LDR      r0,[sp,#4]
000590  f7fffffe          BL       list_insertions_handler
000594  2800              CMP      r0,#0
000596  d000              BEQ      |L1.1434|
;;;662        {
;;;663            compare_update = true;
000598  2601              MOVS     r6,#1
                  |L1.1434|
;;;664        }
;;;665    
;;;666        // Update compare register if necessary
;;;667        if (compare_update)
00059a  2e00              CMP      r6,#0
00059c  d002              BEQ      |L1.1444|
;;;668        {
;;;669            compare_reg_update(timer_id_head_old);
00059e  4638              MOV      r0,r7
0005a0  f7fffffe          BL       compare_reg_update
                  |L1.1444|
;;;670        }
;;;671    }
0005a4  bdfe              POP      {r1-r7,pc}
;;;672    
                          ENDP

                  user_op_enque PROC
;;;678     */
;;;679    static void user_op_enque(timer_user_t * p_user, app_timer_id_t last_index)
0005a6  7041              STRB     r1,[r0,#1]
;;;680    {
;;;681        p_user->last = last_index;
;;;682    }
0005a8  4770              BX       lr
;;;683    
                          ENDP

                  user_op_alloc PROC
;;;691     */
;;;692    static timer_user_op_t * user_op_alloc(timer_user_t * p_user, app_timer_id_t * p_last_index)
0005aa  b570              PUSH     {r4-r6,lr}
;;;693    {        
0005ac  4602              MOV      r2,r0
0005ae  460b              MOV      r3,r1
;;;694        app_timer_id_t    last;
;;;695        timer_user_op_t * p_user_op;
;;;696        
;;;697        last = p_user->last + 1;
0005b0  7850              LDRB     r0,[r2,#1]
0005b2  1c41              ADDS     r1,r0,#1
;;;698        if (last == p_user->user_op_queue_size)
0005b4  7890              LDRB     r0,[r2,#2]
0005b6  4288              CMP      r0,r1
0005b8  d100              BNE      |L1.1468|
;;;699        {
;;;700            // Overflow case.
;;;701            last = 0;
0005ba  2100              MOVS     r1,#0
                  |L1.1468|
;;;702        }
;;;703        if (last == p_user->first)
0005bc  7810              LDRB     r0,[r2,#0]
0005be  4288              CMP      r0,r1
0005c0  d101              BNE      |L1.1478|
;;;704        {
;;;705            // Queue is full.
;;;706            return NULL;
0005c2  2000              MOVS     r0,#0
                  |L1.1476|
;;;707        }
;;;708        
;;;709        *p_last_index = last;    
;;;710        p_user_op     = &p_user->p_user_op_queue[p_user->last];
;;;711            
;;;712        return p_user_op;
;;;713    }
0005c4  bd70              POP      {r4-r6,pc}
                  |L1.1478|
0005c6  6019              STR      r1,[r3,#0]            ;709
0005c8  7850              LDRB     r0,[r2,#1]            ;710
0005ca  2618              MOVS     r6,#0x18              ;710
0005cc  4370              MULS     r0,r6,r0              ;710
0005ce  6855              LDR      r5,[r2,#4]            ;710
0005d0  182c              ADDS     r4,r5,r0              ;710
0005d2  4620              MOV      r0,r4                 ;712
0005d4  e7f6              B        |L1.1476|
;;;714    
                          ENDP

                  timer_start_op_schedule PROC
;;;725     */
;;;726    static uint32_t timer_start_op_schedule(timer_user_id_t user_id,
0005d6  b5ff              PUSH     {r0-r7,lr}
;;;727                                            app_timer_id_t  timer_id,
;;;728                                            uint32_t        timeout_initial,
;;;729                                            uint32_t        timeout_periodic,
;;;730                                            void *          p_context)
;;;731    {
0005d8  b081              SUB      sp,sp,#4
0005da  4605              MOV      r5,r0
0005dc  460e              MOV      r6,r1
0005de  4617              MOV      r7,r2
;;;732        app_timer_id_t last_index;
;;;733        
;;;734        timer_user_op_t * p_user_op = user_op_alloc(&mp_users[user_id], &last_index);
0005e0  00e9              LSLS     r1,r5,#3
0005e2  4a9a              LDR      r2,|L1.2124|
0005e4  6812              LDR      r2,[r2,#0]  ; mp_users
0005e6  1888              ADDS     r0,r1,r2
0005e8  4669              MOV      r1,sp
0005ea  f7fffffe          BL       user_op_alloc
0005ee  4604              MOV      r4,r0
;;;735        if (p_user_op == NULL)
0005f0  2c00              CMP      r4,#0
0005f2  d102              BNE      |L1.1530|
;;;736        {
;;;737            return NRF_ERROR_NO_MEM;
0005f4  2004              MOVS     r0,#4
                  |L1.1526|
;;;738        }
;;;739        
;;;740        p_user_op->op_type                              = TIMER_USER_OP_TYPE_START;
;;;741        p_user_op->timer_id                             = timer_id;
;;;742        p_user_op->params.start.ticks_at_start          = rtc1_counter_get();
;;;743        p_user_op->params.start.ticks_first_interval    = timeout_initial;
;;;744        p_user_op->params.start.ticks_periodic_interval = timeout_periodic;
;;;745        p_user_op->params.start.p_context               = p_context;
;;;746        
;;;747        user_op_enque(&mp_users[user_id], last_index);    
;;;748    
;;;749        timer_list_handler_sched();
;;;750    
;;;751        return NRF_SUCCESS;
;;;752    }
0005f6  b005              ADD      sp,sp,#0x14
0005f8  bdf0              POP      {r4-r7,pc}
                  |L1.1530|
0005fa  2001              MOVS     r0,#1                 ;740
0005fc  7020              STRB     r0,[r4,#0]            ;740
0005fe  6066              STR      r6,[r4,#4]            ;741
000600  f7fffffe          BL       rtc1_counter_get
000604  60a0              STR      r0,[r4,#8]            ;742
000606  60e7              STR      r7,[r4,#0xc]          ;743
000608  9804              LDR      r0,[sp,#0x10]         ;744
00060a  6120              STR      r0,[r4,#0x10]         ;744
00060c  980a              LDR      r0,[sp,#0x28]         ;745
00060e  6160              STR      r0,[r4,#0x14]         ;745
000610  00e9              LSLS     r1,r5,#3              ;747
000612  4a8e              LDR      r2,|L1.2124|
000614  6812              LDR      r2,[r2,#0]            ;747  ; mp_users
000616  1888              ADDS     r0,r1,r2              ;747
000618  9900              LDR      r1,[sp,#0]            ;747
00061a  f7fffffe          BL       user_op_enque
00061e  f7fffffe          BL       timer_list_handler_sched
000622  2000              MOVS     r0,#0                 ;751
000624  e7e7              B        |L1.1526|
;;;753    
                          ENDP

                  timer_stop_op_schedule PROC
;;;762     */
;;;763    static uint32_t timer_stop_op_schedule(timer_user_id_t user_id, app_timer_id_t timer_id)
000626  b5f8              PUSH     {r3-r7,lr}
;;;764    {
000628  4604              MOV      r4,r0
00062a  460e              MOV      r6,r1
;;;765        app_timer_id_t last_index;
;;;766        
;;;767        timer_user_op_t * p_user_op = user_op_alloc(&mp_users[user_id], &last_index);
00062c  00e1              LSLS     r1,r4,#3
00062e  4a87              LDR      r2,|L1.2124|
000630  6812              LDR      r2,[r2,#0]  ; mp_users
000632  1888              ADDS     r0,r1,r2
000634  4669              MOV      r1,sp
000636  f7fffffe          BL       user_op_alloc
00063a  4605              MOV      r5,r0
;;;768        if (p_user_op == NULL)
00063c  2d00              CMP      r5,#0
00063e  d101              BNE      |L1.1604|
;;;769        {
;;;770            return NRF_ERROR_NO_MEM;
000640  2004              MOVS     r0,#4
                  |L1.1602|
;;;771        }
;;;772        
;;;773        p_user_op->op_type  = TIMER_USER_OP_TYPE_STOP;
;;;774        p_user_op->timer_id = timer_id;
;;;775        
;;;776        user_op_enque(&mp_users[user_id], last_index);        
;;;777    
;;;778        timer_list_handler_sched();
;;;779    
;;;780        return NRF_SUCCESS;
;;;781    }
000642  bdf8              POP      {r3-r7,pc}
                  |L1.1604|
000644  2002              MOVS     r0,#2                 ;773
000646  7028              STRB     r0,[r5,#0]            ;773
000648  606e              STR      r6,[r5,#4]            ;774
00064a  00e1              LSLS     r1,r4,#3              ;776
00064c  4a7f              LDR      r2,|L1.2124|
00064e  6812              LDR      r2,[r2,#0]            ;776  ; mp_users
000650  1888              ADDS     r0,r1,r2              ;776
000652  9900              LDR      r1,[sp,#0]            ;776
000654  f7fffffe          BL       user_op_enque
000658  f7fffffe          BL       timer_list_handler_sched
00065c  2000              MOVS     r0,#0                 ;780
00065e  e7f0              B        |L1.1602|
;;;782    
                          ENDP

                  timer_stop_all_op_schedule PROC
;;;787     */
;;;788    static uint32_t timer_stop_all_op_schedule(timer_user_id_t user_id)
000660  b538              PUSH     {r3-r5,lr}
;;;789    {
000662  4604              MOV      r4,r0
;;;790        app_timer_id_t last_index;
;;;791        
;;;792        timer_user_op_t * p_user_op = user_op_alloc(&mp_users[user_id], &last_index);
000664  00e1              LSLS     r1,r4,#3
000666  4a79              LDR      r2,|L1.2124|
000668  6812              LDR      r2,[r2,#0]  ; mp_users
00066a  1888              ADDS     r0,r1,r2
00066c  4669              MOV      r1,sp
00066e  f7fffffe          BL       user_op_alloc
000672  4605              MOV      r5,r0
;;;793        if (p_user_op == NULL)
000674  2d00              CMP      r5,#0
000676  d101              BNE      |L1.1660|
;;;794        {
;;;795            return NRF_ERROR_NO_MEM;
000678  2004              MOVS     r0,#4
                  |L1.1658|
;;;796        }
;;;797        
;;;798        p_user_op->op_type  = TIMER_USER_OP_TYPE_STOP_ALL;
;;;799        p_user_op->timer_id = TIMER_NULL;
;;;800        
;;;801        user_op_enque(&mp_users[user_id], last_index);        
;;;802    
;;;803        timer_list_handler_sched();
;;;804    
;;;805        return NRF_SUCCESS;
;;;806    }
00067a  bd38              POP      {r3-r5,pc}
                  |L1.1660|
00067c  2003              MOVS     r0,#3                 ;798
00067e  7028              STRB     r0,[r5,#0]            ;798
000680  1f00              SUBS     r0,r0,#4              ;799
000682  6068              STR      r0,[r5,#4]            ;799
000684  00e1              LSLS     r1,r4,#3              ;801
000686  4a71              LDR      r2,|L1.2124|
000688  6812              LDR      r2,[r2,#0]            ;801  ; mp_users
00068a  1888              ADDS     r0,r1,r2              ;801
00068c  9900              LDR      r1,[sp,#0]            ;801
00068e  f7fffffe          BL       user_op_enque
000692  f7fffffe          BL       timer_list_handler_sched
000696  2000              MOVS     r0,#0                 ;805
000698  e7ef              B        |L1.1658|
;;;807    
                          ENDP

                  RTC1_IRQHandler PROC
;;;814     */
;;;815    void RTC1_IRQHandler(void)
00069a  b510              PUSH     {r4,lr}
;;;816    {
;;;817        if(BL.E.OPEN_STATE == false)
00069c  486c              LDR      r0,|L1.2128|
00069e  7800              LDRB     r0,[r0,#0]  ; BL
0006a0  07c0              LSLS     r0,r0,#31
0006a2  0fc0              LSRS     r0,r0,#31
0006a4  d101              BNE      |L1.1706|
;;;818            system_time_update();
0006a6  f7fffffe          BL       system_time_update
                  |L1.1706|
;;;819        // Clear all events (also unexpected ones)
;;;820        NRF_RTC1->EVENTS_COMPARE[0] = 0;
0006aa  2000              MOVS     r0,#0
0006ac  4969              LDR      r1,|L1.2132|
0006ae  6008              STR      r0,[r1,#0]
;;;821        NRF_RTC1->EVENTS_COMPARE[1] = 0;
0006b0  2100              MOVS     r1,#0
0006b2  4868              LDR      r0,|L1.2132|
0006b4  6041              STR      r1,[r0,#4]
;;;822        NRF_RTC1->EVENTS_COMPARE[2] = 0;
0006b6  6081              STR      r1,[r0,#8]
;;;823        NRF_RTC1->EVENTS_COMPARE[3] = 0;
0006b8  60c1              STR      r1,[r0,#0xc]
;;;824        NRF_RTC1->EVENTS_TICK       = 0;
0006ba  2000              MOVS     r0,#0
0006bc  4965              LDR      r1,|L1.2132|
0006be  3940              SUBS     r1,r1,#0x40
0006c0  6008              STR      r0,[r1,#0]
;;;825        NRF_RTC1->EVENTS_OVRFLW     = 0;
0006c2  6048              STR      r0,[r1,#4]
;;;826        // Check for expired timers
;;;827        //timer_timeouts_check();
;;;828    }
0006c4  bd10              POP      {r4,pc}
;;;829    
                          ENDP

                  SWI0_IRQHandler PROC
;;;834     */
;;;835    void SWI0_IRQHandler(void)
0006c6  b510              PUSH     {r4,lr}
;;;836    {
;;;837        timer_list_handler();
0006c8  f7fffffe          BL       timer_list_handler
;;;838    }
0006cc  bd10              POP      {r4,pc}
;;;839    
                          ENDP

                  app_timer_init PROC
;;;840    
;;;841    uint32_t app_timer_init(uint32_t                      prescaler,
0006ce  b5ff              PUSH     {r0-r7,lr}
;;;842                            uint8_t                       max_timers,
;;;843                            uint8_t                       op_queues_size,
;;;844                            void *                        p_buffer,
;;;845                            app_timer_evt_schedule_func_t evt_schedule_func)
;;;846    {
0006d0  b081              SUB      sp,sp,#4
0006d2  460e              MOV      r6,r1
0006d4  4617              MOV      r7,r2
0006d6  461c              MOV      r4,r3
;;;847        int i;
;;;848    
;;;849        // Check that buffer is correctly aligned
;;;850        if (!is_word_aligned(p_buffer))
0006d8  4620              MOV      r0,r4
0006da  0781              LSLS     r1,r0,#30
0006dc  0f89              LSRS     r1,r1,#30
0006de  d101              BNE      |L1.1764|
0006e0  2101              MOVS     r1,#1
0006e2  e000              B        |L1.1766|
                  |L1.1764|
0006e4  2100              MOVS     r1,#0
                  |L1.1766|
0006e6  2900              CMP      r1,#0
0006e8  d102              BNE      |L1.1776|
;;;851        {
;;;852            return NRF_ERROR_INVALID_PARAM;
0006ea  2007              MOVS     r0,#7
                  |L1.1772|
;;;853        }
;;;854        // Check for NULL buffer
;;;855        if (p_buffer == NULL)
;;;856        {
;;;857            return NRF_ERROR_INVALID_PARAM;
;;;858        }
;;;859        
;;;860    
;;;861        // Stop RTC to prevent any running timers from expiring (in case of reinitialization)
;;;862        rtc1_stop();
;;;863        
;;;864        m_evt_schedule_func = evt_schedule_func;    
;;;865    
;;;866        // Initialize timer node array
;;;867        m_node_array_size = max_timers;             
;;;868        mp_nodes          = p_buffer;               
;;;869        
;;;870        for (i = 0; i < max_timers; i++)
;;;871        {
;;;872            mp_nodes[i].state      = STATE_FREE;
;;;873            mp_nodes[i].is_running = false;
;;;874        }
;;;875        
;;;876        // Skip timer node array
;;;877        p_buffer = &((uint8_t *)p_buffer)[max_timers * sizeof(timer_node_t)];
;;;878        
;;;879        // Initialize users array
;;;880        m_user_array_size = APP_TIMER_INT_LEVELS;
;;;881        mp_users          = p_buffer;
;;;882        
;;;883        // Skip user array
;;;884        p_buffer = &((uint8_t *)p_buffer)[APP_TIMER_INT_LEVELS * sizeof(timer_user_t)];
;;;885    
;;;886        // Initialize operation queues
;;;887        for (i = 0; i < APP_TIMER_INT_LEVELS; i++)
;;;888        {
;;;889            timer_user_t * p_user = &mp_users[i];
;;;890            
;;;891            p_user->first              = 0;
;;;892            p_user->last               = 0;
;;;893            p_user->user_op_queue_size = op_queues_size;
;;;894            p_user->p_user_op_queue    = p_buffer;
;;;895        
;;;896            // Skip operation queue
;;;897            p_buffer = &((uint8_t *)p_buffer)[op_queues_size * sizeof(timer_user_op_t)];
;;;898        }
;;;899    
;;;900        m_timer_id_head             = TIMER_NULL;
;;;901        m_ticks_elapsed_q_read_ind  = 0;
;;;902        m_ticks_elapsed_q_write_ind = 0;
;;;903    
;;;904        NVIC_ClearPendingIRQ(SWI0_IRQn);
;;;905        NVIC_SetPriority(SWI0_IRQn, SWI0_IRQ_PRI);
;;;906        NVIC_EnableIRQ(SWI0_IRQn);
;;;907    
;;;908        rtc1_init(prescaler);   
;;;909    
;;;910        m_ticks_latest = rtc1_counter_get();
;;;911        
;;;912        return NRF_SUCCESS;
;;;913    }
0006ec  b005              ADD      sp,sp,#0x14
0006ee  bdf0              POP      {r4-r7,pc}
                  |L1.1776|
0006f0  2c00              CMP      r4,#0                 ;855
0006f2  d101              BNE      |L1.1784|
0006f4  2007              MOVS     r0,#7                 ;857
0006f6  e7f9              B        |L1.1772|
                  |L1.1784|
0006f8  f7fffffe          BL       rtc1_stop
0006fc  4956              LDR      r1,|L1.2136|
0006fe  980a              LDR      r0,[sp,#0x28]         ;864
000700  6008              STR      r0,[r1,#0]            ;864  ; m_evt_schedule_func
000702  4856              LDR      r0,|L1.2140|
000704  7006              STRB     r6,[r0,#0]            ;867
000706  484f              LDR      r0,|L1.2116|
000708  6004              STR      r4,[r0,#0]            ;868  ; mp_nodes
00070a  2500              MOVS     r5,#0                 ;870
00070c  e00c              B        |L1.1832|
                  |L1.1806|
00070e  2100              MOVS     r1,#0                 ;872
000710  2024              MOVS     r0,#0x24              ;872
000712  4368              MULS     r0,r5,r0              ;872
000714  4a4b              LDR      r2,|L1.2116|
000716  6812              LDR      r2,[r2,#0]            ;872  ; mp_nodes
000718  5411              STRB     r1,[r2,r0]            ;872
00071a  2024              MOVS     r0,#0x24              ;873
00071c  4368              MULS     r0,r5,r0              ;873
00071e  4a49              LDR      r2,|L1.2116|
000720  6812              LDR      r2,[r2,#0]            ;873  ; mp_nodes
000722  1880              ADDS     r0,r0,r2              ;873
000724  7501              STRB     r1,[r0,#0x14]         ;873
000726  1c6d              ADDS     r5,r5,#1              ;870
                  |L1.1832|
000728  42b5              CMP      r5,r6                 ;870
00072a  dbf0              BLT      |L1.1806|
00072c  2024              MOVS     r0,#0x24              ;877
00072e  4370              MULS     r0,r6,r0              ;877
000730  1904              ADDS     r4,r0,r4              ;877
000732  2003              MOVS     r0,#3                 ;880
000734  494a              LDR      r1,|L1.2144|
000736  7008              STRB     r0,[r1,#0]            ;880
000738  4844              LDR      r0,|L1.2124|
00073a  6004              STR      r4,[r0,#0]            ;881  ; mp_users
00073c  3418              ADDS     r4,r4,#0x18           ;884
00073e  2500              MOVS     r5,#0                 ;887
000740  e00c              B        |L1.1884|
                  |L1.1858|
000742  00e9              LSLS     r1,r5,#3              ;889
000744  4a41              LDR      r2,|L1.2124|
000746  6812              LDR      r2,[r2,#0]            ;889  ; mp_users
000748  1888              ADDS     r0,r1,r2              ;889
00074a  2100              MOVS     r1,#0                 ;891
00074c  7001              STRB     r1,[r0,#0]            ;891
00074e  7041              STRB     r1,[r0,#1]            ;892
000750  7087              STRB     r7,[r0,#2]            ;893
000752  6044              STR      r4,[r0,#4]            ;894
000754  2118              MOVS     r1,#0x18              ;897
000756  4379              MULS     r1,r7,r1              ;897
000758  190c              ADDS     r4,r1,r4              ;897
00075a  1c6d              ADDS     r5,r5,#1              ;887
                  |L1.1884|
00075c  2d03              CMP      r5,#3                 ;887
00075e  dbf0              BLT      |L1.1858|
000760  2000              MOVS     r0,#0                 ;900
000762  43c0              MVNS     r0,r0                 ;900
000764  4936              LDR      r1,|L1.2112|
000766  6008              STR      r0,[r1,#0]            ;900  ; m_timer_id_head
000768  2000              MOVS     r0,#0                 ;901
00076a  493e              LDR      r1,|L1.2148|
00076c  7008              STRB     r0,[r1,#0]            ;901
00076e  493e              LDR      r1,|L1.2152|
000770  7008              STRB     r0,[r1,#0]            ;902
000772  2014              MOVS     r0,#0x14              ;904
000774  f7fffffe          BL       NVIC_ClearPendingIRQ
000778  2103              MOVS     r1,#3                 ;905
00077a  2014              MOVS     r0,#0x14              ;905
00077c  f7fffffe          BL       NVIC_SetPriority
000780  2014              MOVS     r0,#0x14              ;906
000782  f7fffffe          BL       NVIC_EnableIRQ
000786  9801              LDR      r0,[sp,#4]            ;908
000788  f7fffffe          BL       rtc1_init
00078c  f7fffffe          BL       rtc1_counter_get
000790  4929              LDR      r1,|L1.2104|
000792  6008              STR      r0,[r1,#0]            ;910  ; m_ticks_latest
000794  2000              MOVS     r0,#0                 ;912
000796  e7a9              B        |L1.1772|
;;;914    
                          ENDP

                  app_timer_create PROC
;;;915    
;;;916    uint32_t app_timer_create(app_timer_id_t *            p_timer_id,
000798  b570              PUSH     {r4-r6,lr}
;;;917                              app_timer_mode_t            mode,
;;;918                              app_timer_timeout_handler_t timeout_handler)
;;;919    {
00079a  4603              MOV      r3,r0
00079c  460c              MOV      r4,r1
;;;920        int i;
;;;921    
;;;922        // Check state and parameters
;;;923        if (mp_nodes == NULL)
00079e  4829              LDR      r0,|L1.2116|
0007a0  6800              LDR      r0,[r0,#0]  ; mp_nodes
0007a2  2800              CMP      r0,#0
0007a4  d101              BNE      |L1.1962|
;;;924        {
;;;925            return NRF_ERROR_INVALID_STATE;
0007a6  2008              MOVS     r0,#8
                  |L1.1960|
;;;926        }
;;;927        if (timeout_handler == NULL)
;;;928        {
;;;929            return NRF_ERROR_INVALID_PARAM;
;;;930        }
;;;931        if (p_timer_id == NULL)
;;;932        {
;;;933            return NRF_ERROR_INVALID_PARAM;
;;;934        }    
;;;935        
;;;936        // Find free timer
;;;937        for (i = 0; i < m_node_array_size; i++)
;;;938        {
;;;939            if (mp_nodes[i].state == STATE_FREE)
;;;940            {
;;;941                mp_nodes[i].state             = STATE_ALLOCATED;
;;;942                mp_nodes[i].mode              = mode;
;;;943                mp_nodes[i].p_timeout_handler = timeout_handler;
;;;944                
;;;945                *p_timer_id = i;
;;;946                return NRF_SUCCESS;
;;;947            }
;;;948        }
;;;949        
;;;950        return NRF_ERROR_NO_MEM;
;;;951    }
0007a8  bd70              POP      {r4-r6,pc}
                  |L1.1962|
0007aa  2a00              CMP      r2,#0                 ;927
0007ac  d101              BNE      |L1.1970|
0007ae  2007              MOVS     r0,#7                 ;929
0007b0  e7fa              B        |L1.1960|
                  |L1.1970|
0007b2  2b00              CMP      r3,#0                 ;931
0007b4  d101              BNE      |L1.1978|
0007b6  2007              MOVS     r0,#7                 ;933
0007b8  e7f6              B        |L1.1960|
                  |L1.1978|
0007ba  2100              MOVS     r1,#0                 ;937
0007bc  e01c              B        |L1.2040|
                  |L1.1982|
0007be  2024              MOVS     r0,#0x24              ;939
0007c0  4348              MULS     r0,r1,r0              ;939
0007c2  4d20              LDR      r5,|L1.2116|
0007c4  682d              LDR      r5,[r5,#0]            ;939  ; mp_nodes
0007c6  5c28              LDRB     r0,[r5,r0]            ;939
0007c8  2800              CMP      r0,#0                 ;939
0007ca  d114              BNE      |L1.2038|
0007cc  2501              MOVS     r5,#1                 ;941
0007ce  2024              MOVS     r0,#0x24              ;941
0007d0  4348              MULS     r0,r1,r0              ;941
0007d2  4e1c              LDR      r6,|L1.2116|
0007d4  6836              LDR      r6,[r6,#0]            ;941  ; mp_nodes
0007d6  5435              STRB     r5,[r6,r0]            ;941
0007d8  2024              MOVS     r0,#0x24              ;942
0007da  4348              MULS     r0,r1,r0              ;942
0007dc  4d19              LDR      r5,|L1.2116|
0007de  682d              LDR      r5,[r5,#0]            ;942  ; mp_nodes
0007e0  1940              ADDS     r0,r0,r5              ;942
0007e2  7044              STRB     r4,[r0,#1]            ;942
0007e4  2024              MOVS     r0,#0x24              ;943
0007e6  4348              MULS     r0,r1,r0              ;943
0007e8  4d16              LDR      r5,|L1.2116|
0007ea  682d              LDR      r5,[r5,#0]            ;943  ; mp_nodes
0007ec  1940              ADDS     r0,r0,r5              ;943
0007ee  6182              STR      r2,[r0,#0x18]         ;943
0007f0  6019              STR      r1,[r3,#0]            ;945
0007f2  2000              MOVS     r0,#0                 ;946
0007f4  e7d8              B        |L1.1960|
                  |L1.2038|
0007f6  1c49              ADDS     r1,r1,#1              ;937
                  |L1.2040|
0007f8  4818              LDR      r0,|L1.2140|
0007fa  7800              LDRB     r0,[r0,#0]            ;937  ; m_node_array_size
0007fc  4281              CMP      r1,r0                 ;937
0007fe  dbde              BLT      |L1.1982|
000800  2004              MOVS     r0,#4                 ;950
000802  e7d1              B        |L1.1960|
;;;952    
                          ENDP

                  user_id_get PROC
;;;957    */
;;;958    static timer_user_id_t user_id_get(void)
000804  b530              PUSH     {r4,r5,lr}
;;;959    {
;;;960        timer_user_id_t ret;
;;;961    
;;;962        STATIC_ASSERT(APP_TIMER_INT_LEVELS == 3);
;;;963        
;;;964        switch (current_int_priority_get())
000806  bf00              NOP      
000808  4818              LDR      r0,|L1.2156|
00080a  6840              LDR      r0,[r0,#4]
00080c  05c2              LSLS     r2,r0,#23
00080e  0dd2              LSRS     r2,r2,#23
000810  2a00              CMP      r2,#0
000812  d03a              BEQ      |L1.2186|
000814  4613              MOV      r3,r2
000816  3b10              SUBS     r3,r3,#0x10
000818  b258              SXTB     r0,r3
00081a  2800              CMP      r0,#0
00081c  da28              BGE      |L1.2160|
00081e  4c13              LDR      r4,|L1.2156|
000820  341c              ADDS     r4,r4,#0x1c
000822  0705              LSLS     r5,r0,#28
000824  0f2d              LSRS     r5,r5,#28
000826  3d08              SUBS     r5,r5,#8
000828  08ad              LSRS     r5,r5,#2
00082a  00ad              LSLS     r5,r5,#2
00082c  5964              LDR      r4,[r4,r5]
00082e  0785              LSLS     r5,r0,#30
000830  0eed              LSRS     r5,r5,#27
000832  40ec              LSRS     r4,r4,r5
000834  09a4              LSRS     r4,r4,#6
000836  e026              B        |L1.2182|
                  |L1.2104|
                          DCD      m_ticks_latest
                  |L1.2108|
                          DCD      0x007fffff
                  |L1.2112|
                          DCD      m_timer_id_head
                  |L1.2116|
                          DCD      mp_nodes
                  |L1.2120|
                          DCD      0x40011540
                  |L1.2124|
                          DCD      mp_users
                  |L1.2128|
                          DCD      ||BL||
                  |L1.2132|
                          DCD      0x40011140
                  |L1.2136|
                          DCD      m_evt_schedule_func
                  |L1.2140|
                          DCD      m_node_array_size
                  |L1.2144|
                          DCD      m_user_array_size
                  |L1.2148|
                          DCD      m_ticks_elapsed_q_read_ind
                  |L1.2152|
                          DCD      m_ticks_elapsed_q_write_ind
                  |L1.2156|
                          DCD      0xe000ed00
                  |L1.2160|
000870  4c79              LDR      r4,|L1.2648|
000872  2503              MOVS     r5,#3
000874  022d              LSLS     r5,r5,#8
000876  1964              ADDS     r4,r4,r5
000878  0885              LSRS     r5,r0,#2
00087a  00ad              LSLS     r5,r5,#2
00087c  5964              LDR      r4,[r4,r5]
00087e  0785              LSLS     r5,r0,#30
000880  0eed              LSRS     r5,r5,#27
000882  40ec              LSRS     r4,r4,r5
000884  09a4              LSRS     r4,r4,#6
                  |L1.2182|
000886  b2e0              UXTB     r0,r4
000888  e000              B        |L1.2188|
                  |L1.2186|
00088a  2004              MOVS     r0,#4
                  |L1.2188|
00088c  2801              CMP      r0,#1
00088e  d002              BEQ      |L1.2198|
000890  2803              CMP      r0,#3
000892  d104              BNE      |L1.2206|
000894  e001              B        |L1.2202|
                  |L1.2198|
;;;965        {
;;;966            case APP_IRQ_PRIORITY_HIGH:
;;;967                ret = APP_HIGH_USER_ID;
000896  2100              MOVS     r1,#0
;;;968                break;
000898  e003              B        |L1.2210|
                  |L1.2202|
;;;969                
;;;970            case APP_IRQ_PRIORITY_LOW:
;;;971                ret = APP_LOW_USER_ID;
00089a  2101              MOVS     r1,#1
;;;972                break;
00089c  e001              B        |L1.2210|
                  |L1.2206|
;;;973                
;;;974            default:
;;;975                ret = THREAD_MODE_USER_ID;
00089e  2102              MOVS     r1,#2
;;;976                break;
0008a0  bf00              NOP      
                  |L1.2210|
0008a2  bf00              NOP                            ;968
;;;977        }
;;;978        
;;;979        return ret;
0008a4  4608              MOV      r0,r1
;;;980    }
0008a6  bd30              POP      {r4,r5,pc}
;;;981    
                          ENDP

                  app_timer_start PROC
;;;982    
;;;983    uint32_t app_timer_start(app_timer_id_t timer_id, uint32_t timeout_ticks, void * p_context)
0008a8  b5fe              PUSH     {r1-r7,lr}
;;;984    {
0008aa  4604              MOV      r4,r0
0008ac  460d              MOV      r5,r1
0008ae  4616              MOV      r6,r2
;;;985        uint32_t timeout_periodic;
;;;986        
;;;987        // Check state and parameters
;;;988        if (mp_nodes == NULL)
0008b0  486a              LDR      r0,|L1.2652|
0008b2  6800              LDR      r0,[r0,#0]  ; mp_nodes
0008b4  2800              CMP      r0,#0
0008b6  d101              BNE      |L1.2236|
;;;989        {
;;;990            return NRF_ERROR_INVALID_STATE;
0008b8  2008              MOVS     r0,#8
                  |L1.2234|
;;;991        }
;;;992        if ((timer_id >= m_node_array_size) || (timeout_ticks < APP_TIMER_MIN_TIMEOUT_TICKS))
;;;993        {
;;;994            return NRF_ERROR_INVALID_PARAM;
;;;995        }
;;;996        if (mp_nodes[timer_id].state != STATE_ALLOCATED)
;;;997        {
;;;998            return NRF_ERROR_INVALID_STATE;
;;;999        }
;;;1000       
;;;1001       // Schedule timer start operation
;;;1002       timeout_periodic = (mp_nodes[timer_id].mode == APP_TIMER_MODE_REPEATED) ? timeout_ticks : 0;
;;;1003   
;;;1004       return timer_start_op_schedule(user_id_get(),
;;;1005                                      timer_id,
;;;1006                                      timeout_ticks,
;;;1007                                      timeout_periodic,
;;;1008                                      p_context);
;;;1009   }
0008ba  bdfe              POP      {r1-r7,pc}
                  |L1.2236|
0008bc  4868              LDR      r0,|L1.2656|
0008be  7800              LDRB     r0,[r0,#0]            ;992  ; m_node_array_size
0008c0  4284              CMP      r4,r0                 ;992
0008c2  d201              BCS      |L1.2248|
0008c4  2d05              CMP      r5,#5                 ;992
0008c6  d201              BCS      |L1.2252|
                  |L1.2248|
0008c8  2007              MOVS     r0,#7                 ;994
0008ca  e7f6              B        |L1.2234|
                  |L1.2252|
0008cc  2024              MOVS     r0,#0x24              ;996
0008ce  4360              MULS     r0,r4,r0              ;996
0008d0  4962              LDR      r1,|L1.2652|
0008d2  6809              LDR      r1,[r1,#0]            ;996  ; mp_nodes
0008d4  5c08              LDRB     r0,[r1,r0]            ;996
0008d6  2801              CMP      r0,#1                 ;996
0008d8  d001              BEQ      |L1.2270|
0008da  2008              MOVS     r0,#8                 ;998
0008dc  e7ed              B        |L1.2234|
                  |L1.2270|
0008de  2024              MOVS     r0,#0x24              ;1002
0008e0  4360              MULS     r0,r4,r0              ;1002
0008e2  495e              LDR      r1,|L1.2652|
0008e4  6809              LDR      r1,[r1,#0]            ;1002  ; mp_nodes
0008e6  1840              ADDS     r0,r0,r1              ;1002
0008e8  7840              LDRB     r0,[r0,#1]            ;1002
0008ea  2801              CMP      r0,#1                 ;1002
0008ec  d101              BNE      |L1.2290|
0008ee  4628              MOV      r0,r5                 ;1002
0008f0  e000              B        |L1.2292|
                  |L1.2290|
0008f2  2000              MOVS     r0,#0                 ;1002
                  |L1.2292|
0008f4  4607              MOV      r7,r0                 ;1002
0008f6  f7fffffe          BL       user_id_get
0008fa  463b              MOV      r3,r7                 ;1004
0008fc  462a              MOV      r2,r5                 ;1004
0008fe  4621              MOV      r1,r4                 ;1004
000900  9600              STR      r6,[sp,#0]            ;1004
000902  9001              STR      r0,[sp,#4]            ;1004
000904  f7fffffe          BL       timer_start_op_schedule
000908  e7d7              B        |L1.2234|
;;;1010   
                          ENDP

                  app_timer_stop PROC
;;;1011   
;;;1012   uint32_t app_timer_stop(app_timer_id_t timer_id)
00090a  b570              PUSH     {r4-r6,lr}
;;;1013   {
00090c  4604              MOV      r4,r0
;;;1014       // Check state and parameters
;;;1015       if (mp_nodes == NULL)
00090e  4853              LDR      r0,|L1.2652|
000910  6800              LDR      r0,[r0,#0]  ; mp_nodes
000912  2800              CMP      r0,#0
000914  d101              BNE      |L1.2330|
;;;1016       {
;;;1017           return NRF_ERROR_INVALID_STATE;
000916  2008              MOVS     r0,#8
                  |L1.2328|
;;;1018       }
;;;1019       if (timer_id >= m_node_array_size)
;;;1020       {
;;;1021           return NRF_ERROR_INVALID_PARAM;
;;;1022       }
;;;1023       if (mp_nodes[timer_id].state != STATE_ALLOCATED)
;;;1024       {
;;;1025           return NRF_ERROR_INVALID_STATE;
;;;1026       }
;;;1027       
;;;1028       // Schedule timer stop operation
;;;1029       return timer_stop_op_schedule(user_id_get(), timer_id);
;;;1030   }
000918  bd70              POP      {r4-r6,pc}
                  |L1.2330|
00091a  4851              LDR      r0,|L1.2656|
00091c  7800              LDRB     r0,[r0,#0]            ;1019  ; m_node_array_size
00091e  4284              CMP      r4,r0                 ;1019
000920  d301              BCC      |L1.2342|
000922  2007              MOVS     r0,#7                 ;1021
000924  e7f8              B        |L1.2328|
                  |L1.2342|
000926  2024              MOVS     r0,#0x24              ;1023
000928  4360              MULS     r0,r4,r0              ;1023
00092a  494c              LDR      r1,|L1.2652|
00092c  6809              LDR      r1,[r1,#0]            ;1023  ; mp_nodes
00092e  5c08              LDRB     r0,[r1,r0]            ;1023
000930  2801              CMP      r0,#1                 ;1023
000932  d001              BEQ      |L1.2360|
000934  2008              MOVS     r0,#8                 ;1025
000936  e7ef              B        |L1.2328|
                  |L1.2360|
000938  f7fffffe          BL       user_id_get
00093c  4605              MOV      r5,r0                 ;1029
00093e  4621              MOV      r1,r4                 ;1029
000940  f7fffffe          BL       timer_stop_op_schedule
000944  e7e8              B        |L1.2328|
;;;1031   
                          ENDP

                  app_timer_stop_all PROC
;;;1032   
;;;1033   uint32_t app_timer_stop_all(void)
000946  b510              PUSH     {r4,lr}
;;;1034   {
;;;1035       // Check state
;;;1036       if (mp_nodes == NULL)
000948  4844              LDR      r0,|L1.2652|
00094a  6800              LDR      r0,[r0,#0]  ; mp_nodes
00094c  2800              CMP      r0,#0
00094e  d101              BNE      |L1.2388|
;;;1037       {
;;;1038           return NRF_ERROR_INVALID_STATE;
000950  2008              MOVS     r0,#8
                  |L1.2386|
;;;1039       }
;;;1040   
;;;1041       return timer_stop_all_op_schedule(user_id_get());
;;;1042   }
000952  bd10              POP      {r4,pc}
                  |L1.2388|
000954  f7fffffe          BL       user_id_get
000958  4604              MOV      r4,r0                 ;1041
00095a  f7fffffe          BL       timer_stop_all_op_schedule
00095e  e7f8              B        |L1.2386|
;;;1043   
                          ENDP

                  app_timer_cnt_get PROC
;;;1044   
;;;1045   uint32_t app_timer_cnt_get(uint32_t * p_ticks)
000960  b510              PUSH     {r4,lr}
;;;1046   {
000962  4604              MOV      r4,r0
;;;1047       *p_ticks = rtc1_counter_get();
000964  f7fffffe          BL       rtc1_counter_get
000968  6020              STR      r0,[r4,#0]
;;;1048       return NRF_SUCCESS;
00096a  2000              MOVS     r0,#0
;;;1049   }
00096c  bd10              POP      {r4,pc}
;;;1050   
                          ENDP

                  app_timer_cnt_diff_compute PROC
;;;1051   
;;;1052   uint32_t app_timer_cnt_diff_compute(uint32_t   ticks_to,
00096e  b570              PUSH     {r4-r6,lr}
;;;1053                                       uint32_t   ticks_from,
;;;1054                                       uint32_t * p_ticks_diff)
;;;1055   {
000970  4605              MOV      r5,r0
000972  460e              MOV      r6,r1
000974  4614              MOV      r4,r2
;;;1056       *p_ticks_diff = ticks_diff_get(ticks_to, ticks_from);
000976  4631              MOV      r1,r6
000978  4628              MOV      r0,r5
00097a  f7fffffe          BL       ticks_diff_get
00097e  6020              STR      r0,[r4,#0]
;;;1057       return NRF_SUCCESS;
000980  2000              MOVS     r0,#0
;;;1058   }
000982  bd70              POP      {r4-r6,pc}
;;;1059   
                          ENDP

                  RTC1_COUNTER_START PROC
;;;1061   
;;;1062   void RTC1_COUNTER_START()
000984  b510              PUSH     {r4,lr}
;;;1063   {
;;;1064         NRF_CLOCK->LFCLKSRC             = (CLOCK_LFCLKSRC_SRC_Xtal << CLOCK_LFCLKSRC_SRC_Pos);
000986  2001              MOVS     r0,#1
000988  4936              LDR      r1,|L1.2660|
00098a  6188              STR      r0,[r1,#0x18]
;;;1065         NRF_CLOCK->EVENTS_LFCLKSTARTED  = 0;
00098c  2000              MOVS     r0,#0
00098e  4936              LDR      r1,|L1.2664|
000990  6048              STR      r0,[r1,#4]
;;;1066         NRF_CLOCK->TASKS_LFCLKSTART     = 1;
000992  2001              MOVS     r0,#1
000994  0781              LSLS     r1,r0,#30
000996  6088              STR      r0,[r1,#8]
;;;1067         while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0)
000998  bf00              NOP      
                  |L1.2458|
00099a  4833              LDR      r0,|L1.2664|
00099c  6840              LDR      r0,[r0,#4]
00099e  2800              CMP      r0,#0
0009a0  d0fb              BEQ      |L1.2458|
;;;1068         {
;;;1069             //Do nothing.
;;;1070         }
;;;1071   
;;;1072         NRF_RTC1->PRESCALER   = 4095;   // 12bit:4095  f(RTC) = 32768/(4095 -1) =  8.00. tick = 1/8 S .
0009a2  4832              LDR      r0,|L1.2668|
0009a4  4932              LDR      r1,|L1.2672|
0009a6  6088              STR      r0,[r1,#8]
;;;1073         NRF_RTC1->CC[0]       = 8;  // Compare0 after approx COMPARE_COUNTERTIME seconds.
0009a8  2008              MOVS     r0,#8
0009aa  4931              LDR      r1,|L1.2672|
0009ac  3140              ADDS     r1,r1,#0x40
0009ae  6008              STR      r0,[r1,#0]
;;;1074   
;;;1075         
;;;1076         NVIC_DisableIRQ(RTC1_IRQn);
0009b0  2011              MOVS     r0,#0x11
0009b2  f7fffffe          BL       NVIC_DisableIRQ
;;;1077         NRF_RTC1->EVTENCLR = RTC_EVTENSET_COMPARE0_Disabled << RTC_EVTENSET_COMPARE0_Pos;
0009b6  2000              MOVS     r0,#0
0009b8  492e              LDR      r1,|L1.2676|
0009ba  6088              STR      r0,[r1,#8]
;;;1078         NRF_RTC1->INTENCLR = RTC_INTENSET_OVRFLW_Disabled   << RTC_INTENSET_COMPARE0_Pos; 
0009bc  492d              LDR      r1,|L1.2676|
0009be  3940              SUBS     r1,r1,#0x40
0009c0  6088              STR      r0,[r1,#8]
;;;1079   
;;;1080         NRF_RTC1->TASKS_CLEAR   = 1;      
0009c2  2001              MOVS     r0,#1
0009c4  492c              LDR      r1,|L1.2680|
0009c6  6088              STR      r0,[r1,#8]
;;;1081         NRF_RTC1->TASKS_START   = 1;
0009c8  6008              STR      r0,[r1,#0]
;;;1082   
;;;1083   }
0009ca  bd10              POP      {r4,pc}
;;;1084   
                          ENDP

                  RTC1_COUNTER_STOP PROC
;;;1085   
;;;1086   void RTC1_COUNTER_STOP()
0009cc  b510              PUSH     {r4,lr}
;;;1087   {
;;;1088       rtc1_counter = NRF_RTC1->COUNTER;
0009ce  4828              LDR      r0,|L1.2672|
0009d0  6840              LDR      r0,[r0,#4]
0009d2  492a              LDR      r1,|L1.2684|
0009d4  6008              STR      r0,[r1,#0]  ; rtc1_counter
;;;1089       
;;;1090       set_system_time( get_system_time() + rtc1_counter/8);
0009d6  f7fffffe          BL       get_system_time
0009da  4928              LDR      r1,|L1.2684|
0009dc  6809              LDR      r1,[r1,#0]  ; rtc1_counter
0009de  08c9              LSRS     r1,r1,#3
0009e0  1844              ADDS     r4,r0,r1
0009e2  4620              MOV      r0,r4
0009e4  f7fffffe          BL       set_system_time
;;;1091       NRF_RTC1->TASKS_CLEAR = 1;
0009e8  2001              MOVS     r0,#1
0009ea  4923              LDR      r1,|L1.2680|
0009ec  6088              STR      r0,[r1,#8]
;;;1092       NVIC_DisableIRQ(RTC1_IRQn);
0009ee  2011              MOVS     r0,#0x11
0009f0  f7fffffe          BL       NVIC_DisableIRQ
;;;1093   
;;;1094       NRF_RTC1->EVTENCLR = RTC_EVTEN_COMPARE0_Msk;
0009f4  2001              MOVS     r0,#1
0009f6  0400              LSLS     r0,r0,#16
0009f8  491e              LDR      r1,|L1.2676|
0009fa  6088              STR      r0,[r1,#8]
;;;1095       NRF_RTC1->INTENCLR = RTC_INTENSET_COMPARE0_Msk;
0009fc  491d              LDR      r1,|L1.2676|
0009fe  3940              SUBS     r1,r1,#0x40
000a00  6088              STR      r0,[r1,#8]
;;;1096       NRF_RTC1->TASKS_STOP = 1;
000a02  2001              MOVS     r0,#1
000a04  491c              LDR      r1,|L1.2680|
000a06  6048              STR      r0,[r1,#4]
;;;1097   }
000a08  bd10              POP      {r4,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;499     */
;;;500    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000a0a  06c2              LSLS     r2,r0,#27
;;;501    {
;;;502      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000a0c  0ed2              LSRS     r2,r2,#27
000a0e  2101              MOVS     r1,#1
000a10  4091              LSLS     r1,r1,r2
000a12  4a11              LDR      r2,|L1.2648|
000a14  6011              STR      r1,[r2,#0]
;;;503    }
000a16  4770              BX       lr
;;;504    
                          ENDP

                  NVIC_DisableIRQ PROC
;;;511     */
;;;512    __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000a18  06c2              LSLS     r2,r0,#27
;;;513    {
;;;514      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000a1a  0ed2              LSRS     r2,r2,#27
000a1c  2101              MOVS     r1,#1
000a1e  4091              LSLS     r1,r1,r2
000a20  4a0d              LDR      r2,|L1.2648|
000a22  3280              ADDS     r2,r2,#0x80
000a24  6011              STR      r1,[r2,#0]
;;;515    }
000a26  4770              BX       lr
;;;516    
                          ENDP

                  NVIC_SetPendingIRQ PROC
;;;539     */
;;;540    __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
000a28  06c2              LSLS     r2,r0,#27
;;;541    {
;;;542      NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000a2a  0ed2              LSRS     r2,r2,#27
000a2c  2101              MOVS     r1,#1
000a2e  4091              LSLS     r1,r1,r2
000a30  4a13              LDR      r2,|L1.2688|
000a32  6011              STR      r1,[r2,#0]
;;;543    }
000a34  4770              BX       lr
;;;544    
                          ENDP

                  NVIC_ClearPendingIRQ PROC
;;;551     */
;;;552    __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000a36  06c2              LSLS     r2,r0,#27
;;;553    {
;;;554      NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
000a38  0ed2              LSRS     r2,r2,#27
000a3a  2101              MOVS     r1,#1
000a3c  4091              LSLS     r1,r1,r2
000a3e  4a10              LDR      r2,|L1.2688|
000a40  3280              ADDS     r2,r2,#0x80
000a42  6011              STR      r1,[r2,#0]
;;;555    }
000a44  4770              BX       lr
;;;556    
                          ENDP

                  rtc1_counter_get PROC
;;;195     */
;;;196    static __INLINE uint32_t rtc1_counter_get(void)
000a46  480a              LDR      r0,|L1.2672|
;;;197    {
;;;198        return NRF_RTC1->COUNTER;
000a48  6840              LDR      r0,[r0,#4]
;;;199    }
000a4a  4770              BX       lr
;;;200    
                          ENDP

                  ticks_diff_get PROC
;;;205     */
;;;206    static __INLINE uint32_t ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
000a4c  4602              MOV      r2,r0
;;;207    {
;;;208        return ((ticks_now - ticks_old) & MAX_RTC_COUNTER_VAL);
000a4e  1a50              SUBS     r0,r2,r1
000a50  0200              LSLS     r0,r0,#8
000a52  0a00              LSRS     r0,r0,#8
;;;209    }
000a54  4770              BX       lr
;;;210    
                          ENDP

000a56  0000              DCW      0x0000
                  |L1.2648|
                          DCD      0xe000e100
                  |L1.2652|
                          DCD      mp_nodes
                  |L1.2656|
                          DCD      m_node_array_size
                  |L1.2660|
                          DCD      0x40000500
                  |L1.2664|
                          DCD      0x40000100
                  |L1.2668|
                          DCD      0x00000fff
                  |L1.2672|
                          DCD      0x40011500
                  |L1.2676|
                          DCD      0x40011340
                  |L1.2680|
                          DCD      0x40011000
                  |L1.2684|
                          DCD      rtc1_counter
                  |L1.2688|
                          DCD      0xe000e200

                          AREA ||.data||, DATA, ALIGN=2

                  mp_nodes
                          DCD      0x00000000
                  rtc1_counter
                          DCD      0x00000000
                  m_node_array_size
000008  00                DCB      0x00
                  m_user_array_size
000009  000000            DCB      0x00,0x00,0x00
                  mp_users
                          DCD      0x00000000
                  m_timer_id_head
                          DCD      0x00000000
                  m_ticks_latest
                          DCD      0x00000000
                  m_ticks_elapsed
                          %        8
                  m_ticks_elapsed_q_read_ind
000020  00                DCB      0x00
                  m_ticks_elapsed_q_write_ind
000021  000000            DCB      0x00,0x00,0x00
                  m_evt_schedule_func
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\ble_lib\\app_timer.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_app_timer_c_cd27f9c3____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_app_timer_c_cd27f9c3____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_app_timer_c_cd27f9c3____REVSH|
#line 130
|__asm___11_app_timer_c_cd27f9c3____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_app_timer_c_cd27f9c3__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___11_app_timer_c_cd27f9c3__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
