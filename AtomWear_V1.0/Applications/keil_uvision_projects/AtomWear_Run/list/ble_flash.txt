; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\ble_flash.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ble_flash.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\ble_flash.crf ..\..\..\Software\Source\ble_lib\ble_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ble_flash_crc16_compute PROC
;;;27     
;;;28     uint16_t ble_flash_crc16_compute(uint8_t * p_data, uint16_t size, uint16_t * p_crc)
000000  b570              PUSH     {r4-r6,lr}
;;;29     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;30         uint16_t i;
;;;31         uint16_t crc = (p_crc == NULL) ? 0xffff : *p_crc;
000006  2a00              CMP      r2,#0
000008  d101              BNE      |L1.14|
00000a  4d89              LDR      r5,|L1.560|
00000c  e000              B        |L1.16|
                  |L1.14|
00000e  8815              LDRH     r5,[r2,#0]
                  |L1.16|
000010  4628              MOV      r0,r5
;;;32     
;;;33         for (i = 0; i < size; i++)
000012  2100              MOVS     r1,#0
000014  e011              B        |L1.58|
                  |L1.22|
;;;34         {
;;;35             crc  = (unsigned char)(crc >> 8) | (crc << 8);
000016  1205              ASRS     r5,r0,#8
000018  0206              LSLS     r6,r0,#8
00001a  4335              ORRS     r5,r5,r6
00001c  b2a8              UXTH     r0,r5
;;;36             crc ^= p_data[i];
00001e  5c5d              LDRB     r5,[r3,r1]
000020  4068              EORS     r0,r0,r5
;;;37             crc ^= (unsigned char)(crc & 0xff) >> 4;
000022  0605              LSLS     r5,r0,#24
000024  0f2d              LSRS     r5,r5,#28
000026  4068              EORS     r0,r0,r5
;;;38             crc ^= (crc << 8) << 4;
000028  0305              LSLS     r5,r0,#12
00002a  4045              EORS     r5,r5,r0
00002c  b2a8              UXTH     r0,r5
;;;39             crc ^= ((crc & 0xff) << 4) << 1;
00002e  0605              LSLS     r5,r0,#24
000030  0d2d              LSRS     r5,r5,#20
000032  006d              LSLS     r5,r5,#1
000034  4068              EORS     r0,r0,r5
000036  1c4d              ADDS     r5,r1,#1              ;33
000038  b2a9              UXTH     r1,r5                 ;33
                  |L1.58|
00003a  42a1              CMP      r1,r4                 ;33
00003c  dbeb              BLT      |L1.22|
;;;40         }
;;;41         return crc;
;;;42     }
00003e  bd70              POP      {r4-r6,pc}
;;;43     
                          ENDP

                  flash_page_erase PROC
;;;48      */
;;;49     static void flash_page_erase(uint32_t * p_page)
000040  2102              MOVS     r1,#2
;;;50     {
;;;51         // Turn on flash erase enable and wait until the NVMC is ready.
;;;52         NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Een << NVMC_CONFIG_WEN_Pos);
000042  4a7c              LDR      r2,|L1.564|
000044  6051              STR      r1,[r2,#4]
;;;53         while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
000046  bf00              NOP      
                  |L1.72|
000048  497b              LDR      r1,|L1.568|
00004a  6809              LDR      r1,[r1,#0]
00004c  2900              CMP      r1,#0
00004e  d0fb              BEQ      |L1.72|
;;;54         {
;;;55             // Do nothing.
;;;56         }
;;;57     
;;;58         // Erase page.
;;;59         NRF_NVMC->ERASEPAGE = (uint32_t)p_page;
000050  4978              LDR      r1,|L1.564|
000052  6088              STR      r0,[r1,#8]
;;;60         while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
000054  bf00              NOP      
                  |L1.86|
000056  4978              LDR      r1,|L1.568|
000058  6809              LDR      r1,[r1,#0]
00005a  2900              CMP      r1,#0
00005c  d0fb              BEQ      |L1.86|
;;;61         {
;;;62             // Do nothing.
;;;63         }
;;;64     
;;;65         // Turn off flash erase enable and wait until the NVMC is ready.
;;;66         NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos);
00005e  2100              MOVS     r1,#0
000060  4a74              LDR      r2,|L1.564|
000062  6051              STR      r1,[r2,#4]
;;;67         while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
000064  bf00              NOP      
                  |L1.102|
000066  4974              LDR      r1,|L1.568|
000068  6809              LDR      r1,[r1,#0]
00006a  2900              CMP      r1,#0
00006c  d0fb              BEQ      |L1.102|
;;;68         {
;;;69             // Do nothing
;;;70         }
;;;71     }
00006e  4770              BX       lr
;;;72     
                          ENDP

                  flash_word_unprotected_write PROC
;;;83      */
;;;84     static void flash_word_unprotected_write(uint32_t * p_address, uint32_t value)
000070  2201              MOVS     r2,#1
;;;85     {
;;;86         // Turn on flash write enable and wait until the NVMC is ready.
;;;87         NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
000072  4b70              LDR      r3,|L1.564|
000074  605a              STR      r2,[r3,#4]
;;;88         while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
000076  bf00              NOP      
                  |L1.120|
000078  4a6f              LDR      r2,|L1.568|
00007a  6812              LDR      r2,[r2,#0]
00007c  2a00              CMP      r2,#0
00007e  d0fb              BEQ      |L1.120|
;;;89         {
;;;90             // Do nothing.
;;;91         }
;;;92         *p_address = value;
000080  6001              STR      r1,[r0,#0]
;;;93         
;;;94         // Wait flash write to finish
;;;95         while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
000082  bf00              NOP      
                  |L1.132|
000084  4a6c              LDR      r2,|L1.568|
000086  6812              LDR      r2,[r2,#0]
000088  2a00              CMP      r2,#0
00008a  d0fb              BEQ      |L1.132|
;;;96         {
;;;97             // Do nothing.
;;;98         }
;;;99     
;;;100        // Turn off flash write enable and wait until the NVMC is ready.
;;;101        NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos);
00008c  2200              MOVS     r2,#0
00008e  4b69              LDR      r3,|L1.564|
000090  605a              STR      r2,[r3,#4]
;;;102        while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
000092  bf00              NOP      
                  |L1.148|
000094  4a68              LDR      r2,|L1.568|
000096  6812              LDR      r2,[r2,#0]
000098  2a00              CMP      r2,#0
00009a  d0fb              BEQ      |L1.148|
;;;103        {
;;;104            // Do nothing.
;;;105        }
;;;106    }
00009c  4770              BX       lr
;;;107    
                          ENDP

                  flash_word_write PROC
;;;115     */
;;;116    static void flash_word_write(uint32_t * p_address, uint32_t value)
00009e  b570              PUSH     {r4-r6,lr}
;;;117    {
0000a0  4604              MOV      r4,r0
0000a2  460d              MOV      r5,r1
;;;118        // If radio is active, wait for it to become inactive.
;;;119        while (m_radio_active)
0000a4  e000              B        |L1.168|
                  |L1.166|
;;;120        {
;;;121            // Do nothing (just wait for radio to become inactive).
;;;122            (void) sd_app_event_wait();
0000a6  df3d              SVC      #0x3d
                  |L1.168|
0000a8  4864              LDR      r0,|L1.572|
0000aa  7800              LDRB     r0,[r0,#0]            ;119  ; m_radio_active
0000ac  2800              CMP      r0,#0                 ;119
0000ae  d1fa              BNE      |L1.166|
;;;123        }
;;;124        
;;;125        // Turn on flash write enable and wait until the NVMC is ready.
;;;126        NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos);
0000b0  2001              MOVS     r0,#1
0000b2  4960              LDR      r1,|L1.564|
0000b4  6048              STR      r0,[r1,#4]
;;;127        while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
0000b6  bf00              NOP      
                  |L1.184|
0000b8  485f              LDR      r0,|L1.568|
0000ba  6800              LDR      r0,[r0,#0]
0000bc  2800              CMP      r0,#0
0000be  d0fb              BEQ      |L1.184|
;;;128        {
;;;129            // Do nothing.
;;;130        }
;;;131        
;;;132        *p_address = value;
0000c0  6025              STR      r5,[r4,#0]
;;;133        // Wait flash write to finish
;;;134        while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
0000c2  bf00              NOP      
                  |L1.196|
0000c4  485c              LDR      r0,|L1.568|
0000c6  6800              LDR      r0,[r0,#0]
0000c8  2800              CMP      r0,#0
0000ca  d0fb              BEQ      |L1.196|
;;;135        {
;;;136            // Do nothing.
;;;137        }
;;;138        // Turn off flash write enable and wait until the NVMC is ready.
;;;139        NRF_NVMC->CONFIG = (NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos);
0000cc  2000              MOVS     r0,#0
0000ce  4959              LDR      r1,|L1.564|
0000d0  6048              STR      r0,[r1,#4]
;;;140        while (NRF_NVMC->READY == NVMC_READY_READY_Busy)
0000d2  bf00              NOP      
                  |L1.212|
0000d4  4858              LDR      r0,|L1.568|
0000d6  6800              LDR      r0,[r0,#0]
0000d8  2800              CMP      r0,#0
0000da  d0fb              BEQ      |L1.212|
;;;141        {
;;;142            // Do nothing
;;;143        }
;;;144    }
0000dc  bd70              POP      {r4-r6,pc}
;;;145    
                          ENDP

                  ble_flash_word_write PROC
;;;146    
;;;147    uint32_t ble_flash_word_write(uint32_t * p_address, uint32_t value)
0000de  b570              PUSH     {r4-r6,lr}
;;;148    {
0000e0  4604              MOV      r4,r0
0000e2  460d              MOV      r5,r1
;;;149        flash_word_write(p_address, value);
0000e4  4629              MOV      r1,r5
0000e6  4620              MOV      r0,r4
0000e8  f7fffffe          BL       flash_word_write
;;;150        return NRF_SUCCESS;
0000ec  2000              MOVS     r0,#0
;;;151    }
0000ee  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP

                  ble_flash_block_write PROC
;;;153    
;;;154    uint32_t ble_flash_block_write(uint32_t * p_address, uint32_t * p_in_array, uint16_t word_count)
0000f0  b5f8              PUSH     {r3-r7,lr}
;;;155    {
0000f2  4605              MOV      r5,r0
0000f4  460e              MOV      r6,r1
0000f6  4617              MOV      r7,r2
;;;156        uint16_t i;
;;;157        
;;;158        for (i = 0; i < word_count; i++)
0000f8  2400              MOVS     r4,#0
0000fa  e007              B        |L1.268|
                  |L1.252|
;;;159        {
;;;160            flash_word_write(p_address, p_in_array[i]);
0000fc  00a0              LSLS     r0,r4,#2
0000fe  5831              LDR      r1,[r6,r0]
000100  4628              MOV      r0,r5
000102  f7fffffe          BL       flash_word_write
;;;161            p_address++;
000106  1d2d              ADDS     r5,r5,#4
000108  1c60              ADDS     r0,r4,#1              ;158
00010a  b284              UXTH     r4,r0                 ;158
                  |L1.268|
00010c  42bc              CMP      r4,r7                 ;158
00010e  dbf5              BLT      |L1.252|
;;;162        }
;;;163    
;;;164        return NRF_SUCCESS;
000110  2000              MOVS     r0,#0
;;;165    }
000112  bdf8              POP      {r3-r7,pc}
;;;166    
                          ENDP

                  ble_flash_page_erase PROC
;;;167    
;;;168    uint32_t ble_flash_page_erase(uint8_t page_num)
000114  b570              PUSH     {r4-r6,lr}
;;;169    {
000116  4604              MOV      r4,r0
;;;170        uint32_t * p_page = (uint32_t *)(BLE_FLASH_PAGE_SIZE * page_num);    
000118  2001              MOVS     r0,#1
00011a  0700              LSLS     r0,r0,#28
00011c  6900              LDR      r0,[r0,#0x10]
00011e  b280              UXTH     r0,r0
000120  4360              MULS     r0,r4,r0
000122  4605              MOV      r5,r0
;;;171        flash_page_erase(p_page);
000124  4628              MOV      r0,r5
000126  f7fffffe          BL       flash_page_erase
;;;172        
;;;173        return NRF_SUCCESS;
00012a  2000              MOVS     r0,#0
;;;174    }
00012c  bd70              POP      {r4-r6,pc}
;;;175    
                          ENDP

                  ble_flash_page_write PROC
;;;176    
;;;177    uint32_t ble_flash_page_write(uint8_t page_num, uint32_t * p_in_array, uint8_t word_count)
00012e  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;178    {
000130  b084              SUB      sp,sp,#0x10
000132  4615              MOV      r5,r2
;;;179        int        i;
;;;180        uint32_t * p_page;
;;;181        uint32_t * p_curr_addr;
;;;182        uint16_t   in_data_crc;
;;;183        uint16_t   flash_crc;
;;;184        uint32_t   flash_header;
;;;185    
;;;186        p_page      = (uint32_t *)(BLE_FLASH_PAGE_SIZE * page_num);
000134  2001              MOVS     r0,#1
000136  0700              LSLS     r0,r0,#28
000138  6900              LDR      r0,[r0,#0x10]
00013a  b280              UXTH     r0,r0
00013c  9904              LDR      r1,[sp,#0x10]
00013e  4348              MULS     r0,r1,r0
000140  4607              MOV      r7,r0
;;;187        p_curr_addr = p_page;
000142  463c              MOV      r4,r7
;;;188    
;;;189        // Calculate CRC of the data to write.
;;;190        in_data_crc = ble_flash_crc16_compute((uint8_t *)p_in_array,
000144  00a9              LSLS     r1,r5,#2
000146  2200              MOVS     r2,#0
000148  9805              LDR      r0,[sp,#0x14]
00014a  f7fffffe          BL       ble_flash_crc16_compute
00014e  9003              STR      r0,[sp,#0xc]
;;;191                                              word_count * sizeof(uint32_t),
;;;192                                              NULL);
;;;193        
;;;194        // Compare the calculated to the one in flash.
;;;195        flash_header = *p_curr_addr;
000150  6820              LDR      r0,[r4,#0]
000152  9001              STR      r0,[sp,#4]
;;;196        flash_crc    = (uint16_t)flash_header;
000154  9801              LDR      r0,[sp,#4]
000156  b280              UXTH     r0,r0
000158  9002              STR      r0,[sp,#8]
;;;197        
;;;198        if (flash_crc == in_data_crc)
00015a  9903              LDR      r1,[sp,#0xc]
00015c  9802              LDR      r0,[sp,#8]
00015e  4288              CMP      r0,r1
000160  d102              BNE      |L1.360|
;;;199        {
;;;200            // Data is the same as the data already stored in flash, return without modifying flash.
;;;201            return NRF_SUCCESS;
000162  2000              MOVS     r0,#0
                  |L1.356|
;;;202        }
;;;203    
;;;204        // Erase flash page
;;;205        flash_page_erase(p_page);
;;;206    
;;;207        // Reserve space for magic number (for detecting if flash content is valid).
;;;208        p_curr_addr++;
;;;209        
;;;210        // Reserve space for saving word_count.
;;;211        p_curr_addr++;
;;;212    
;;;213        // Write data
;;;214        for (i = 0; i < word_count; i++)
;;;215        {
;;;216            flash_word_unprotected_write(p_curr_addr, p_in_array[i]);
;;;217            p_curr_addr++;
;;;218        }
;;;219        
;;;220        // Write number of elements.
;;;221        flash_word_write(p_page + 1, (uint32_t)(word_count));
;;;222        
;;;223        // Write magic number and CRC to indicate that flash content is valid.
;;;224        flash_header = BLE_FLASH_MAGIC_NUMBER | (uint32_t)in_data_crc;
;;;225        flash_word_write(p_page, flash_header);
;;;226        
;;;227        return NRF_SUCCESS;
;;;228    }
000164  b007              ADD      sp,sp,#0x1c
000166  bdf0              POP      {r4-r7,pc}
                  |L1.360|
000168  4638              MOV      r0,r7                 ;205
00016a  f7fffffe          BL       flash_page_erase
00016e  1d24              ADDS     r4,r4,#4              ;208
000170  1d24              ADDS     r4,r4,#4              ;211
000172  2600              MOVS     r6,#0                 ;214
000174  e007              B        |L1.390|
                  |L1.374|
000176  00b2              LSLS     r2,r6,#2              ;216
000178  9805              LDR      r0,[sp,#0x14]         ;216
00017a  5881              LDR      r1,[r0,r2]            ;216
00017c  4620              MOV      r0,r4                 ;216
00017e  f7fffffe          BL       flash_word_unprotected_write
000182  1d24              ADDS     r4,r4,#4              ;217
000184  1c76              ADDS     r6,r6,#1              ;214
                  |L1.390|
000186  42ae              CMP      r6,r5                 ;214
000188  dbf5              BLT      |L1.374|
00018a  4629              MOV      r1,r5                 ;221
00018c  1d38              ADDS     r0,r7,#4              ;221
00018e  f7fffffe          BL       flash_word_write
000192  492b              LDR      r1,|L1.576|
000194  9803              LDR      r0,[sp,#0xc]          ;224
000196  4308              ORRS     r0,r0,r1              ;224
000198  9001              STR      r0,[sp,#4]            ;224
00019a  4638              MOV      r0,r7                 ;225
00019c  9901              LDR      r1,[sp,#4]            ;225
00019e  f7fffffe          BL       flash_word_write
0001a2  2000              MOVS     r0,#0                 ;227
0001a4  e7de              B        |L1.356|
;;;229    
                          ENDP

                  ble_flash_page_read PROC
;;;230    
;;;231    uint32_t ble_flash_page_read(uint8_t page_num, uint32_t * p_out_array, uint8_t * p_word_count)
0001a6  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;232    {
0001a8  b086              SUB      sp,sp,#0x18
0001aa  4607              MOV      r7,r0
0001ac  4614              MOV      r4,r2
;;;233        int        byte_count;
;;;234        uint32_t * p_page;
;;;235        uint32_t * p_curr_addr;
;;;236        uint32_t   flash_header;
;;;237        uint32_t   calc_header;
;;;238        uint16_t   calc_crc;
;;;239        uint32_t   tmp;
;;;240        
;;;241        p_page      = (uint32_t *)(BLE_FLASH_PAGE_SIZE * page_num);    
0001ae  2001              MOVS     r0,#1
0001b0  0700              LSLS     r0,r0,#28
0001b2  6900              LDR      r0,[r0,#0x10]
0001b4  b280              UXTH     r0,r0
0001b6  4378              MULS     r0,r7,r0
0001b8  9004              STR      r0,[sp,#0x10]
;;;242        p_curr_addr = p_page;
0001ba  9d04              LDR      r5,[sp,#0x10]
;;;243        
;;;244        // Check if block is valid
;;;245        flash_header = *p_curr_addr;
0001bc  6828              LDR      r0,[r5,#0]
0001be  9003              STR      r0,[sp,#0xc]
;;;246        tmp = flash_header & 0xFFFF0000;
0001c0  9803              LDR      r0,[sp,#0xc]
0001c2  0c00              LSRS     r0,r0,#16
0001c4  0400              LSLS     r0,r0,#16
0001c6  9001              STR      r0,[sp,#4]
;;;247        if (tmp != BLE_FLASH_MAGIC_NUMBER)
0001c8  491d              LDR      r1,|L1.576|
0001ca  9801              LDR      r0,[sp,#4]
0001cc  4288              CMP      r0,r1
0001ce  d004              BEQ      |L1.474|
;;;248        {
;;;249            *p_word_count = 0;
0001d0  2000              MOVS     r0,#0
0001d2  7020              STRB     r0,[r4,#0]
;;;250            return NRF_ERROR_NOT_FOUND;
0001d4  2005              MOVS     r0,#5
                  |L1.470|
;;;251        }
;;;252        p_curr_addr++;
;;;253    
;;;254        // Read number of elements
;;;255        *p_word_count = (uint8_t)(*(p_curr_addr));
;;;256        p_curr_addr++;
;;;257        
;;;258        // Read data
;;;259        byte_count = (*p_word_count) * sizeof(uint32_t);
;;;260        memcpy(p_out_array, p_curr_addr, byte_count);
;;;261        
;;;262        // Check CRC
;;;263        calc_crc  = ble_flash_crc16_compute((uint8_t *)p_out_array,
;;;264                                            (*p_word_count) * sizeof(uint32_t),
;;;265                                            NULL);
;;;266        calc_header = BLE_FLASH_MAGIC_NUMBER | (uint32_t)calc_crc;
;;;267        
;;;268        if (calc_header != flash_header)
;;;269        {
;;;270            return NRF_ERROR_NOT_FOUND;
;;;271        }
;;;272        
;;;273        return NRF_SUCCESS;
;;;274    }
0001d6  b009              ADD      sp,sp,#0x24
0001d8  bdf0              POP      {r4-r7,pc}
                  |L1.474|
0001da  1d2d              ADDS     r5,r5,#4              ;252
0001dc  7828              LDRB     r0,[r5,#0]            ;255
0001de  7020              STRB     r0,[r4,#0]            ;255
0001e0  1d2d              ADDS     r5,r5,#4              ;256
0001e2  7820              LDRB     r0,[r4,#0]            ;259
0001e4  0080              LSLS     r0,r0,#2              ;259
0001e6  9005              STR      r0,[sp,#0x14]         ;259
0001e8  4629              MOV      r1,r5                 ;260
0001ea  9a05              LDR      r2,[sp,#0x14]         ;260
0001ec  9807              LDR      r0,[sp,#0x1c]         ;260
0001ee  f7fffffe          BL       __aeabi_memcpy4
0001f2  7820              LDRB     r0,[r4,#0]            ;263
0001f4  0081              LSLS     r1,r0,#2              ;263
0001f6  2200              MOVS     r2,#0                 ;263
0001f8  9807              LDR      r0,[sp,#0x1c]         ;263
0001fa  f7fffffe          BL       ble_flash_crc16_compute
0001fe  4606              MOV      r6,r0                 ;263
000200  480f              LDR      r0,|L1.576|
000202  4330              ORRS     r0,r0,r6              ;266
000204  9002              STR      r0,[sp,#8]            ;266
000206  9903              LDR      r1,[sp,#0xc]          ;268
000208  9802              LDR      r0,[sp,#8]            ;268
00020a  4288              CMP      r0,r1                 ;268
00020c  d001              BEQ      |L1.530|
00020e  2005              MOVS     r0,#5                 ;270
000210  e7e1              B        |L1.470|
                  |L1.530|
000212  2000              MOVS     r0,#0                 ;273
000214  e7df              B        |L1.470|
;;;275    
                          ENDP

                  ble_flash_page_addr PROC
;;;276    
;;;277    uint32_t ble_flash_page_addr(uint8_t page_num, uint32_t ** pp_page_addr)
000216  4602              MOV      r2,r0
;;;278    {
;;;279        *pp_page_addr = (uint32_t *)(BLE_FLASH_PAGE_SIZE * page_num);
000218  2001              MOVS     r0,#1
00021a  0700              LSLS     r0,r0,#28
00021c  6900              LDR      r0,[r0,#0x10]
00021e  b280              UXTH     r0,r0
000220  4350              MULS     r0,r2,r0
000222  6008              STR      r0,[r1,#0]
;;;280        return NRF_SUCCESS;
000224  2000              MOVS     r0,#0
;;;281    }
000226  4770              BX       lr
;;;282    
                          ENDP

                  ble_flash_on_radio_active_evt PROC
;;;283    
;;;284    void ble_flash_on_radio_active_evt(bool radio_active)
000228  4904              LDR      r1,|L1.572|
;;;285    {
;;;286        m_radio_active = radio_active;
00022a  7008              STRB     r0,[r1,#0]
;;;287    }
00022c  4770              BX       lr
                          ENDP

00022e  0000              DCW      0x0000
                  |L1.560|
                          DCD      0x0000ffff
                  |L1.564|
                          DCD      0x4001e500
                  |L1.568|
                          DCD      0x4001e400
                  |L1.572|
                          DCD      m_radio_active
                  |L1.576|
                          DCD      0x45de0000

                          AREA ||.data||, DATA, ALIGN=0

                  m_radio_active
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\ble_lib\\ble_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_ble_flash_c_0294ac3c____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_ble_flash_c_0294ac3c____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_ble_flash_c_0294ac3c____REVSH|
#line 130
|__asm___11_ble_flash_c_0294ac3c____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
