; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\ble_startup.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ble_startup.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\ble_startup.crf ..\..\..\Software\Source\ble_serv\ble_startup.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ble_rec_init PROC
;;;79     
;;;80     void ble_rec_init()
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82         memset(ble_rec.data, 0, BLE_REC_SIZE);
000002  210a              MOVS     r1,#0xa
000004  48fe              LDR      r0,|L1.1024|
000006  f7fffffe          BL       __aeabi_memclr4
;;;83         ble_rec.front  =  0;    // 初始化指向未存储的地址
00000a  2000              MOVS     r0,#0
00000c  49fc              LDR      r1,|L1.1024|
00000e  7288              STRB     r0,[r1,#0xa]
;;;84         ble_rec.rear   =  0;    // 初始化指向第一个有效数据处
000010  72c8              STRB     r0,[r1,#0xb]
;;;85         ble_rec.count  =  0;
000012  7308              STRB     r0,[r1,#0xc]
;;;86         ble_rec.cur_rec_inst = 0;
000014  7348              STRB     r0,[r1,#0xd]
;;;87     }
000016  bd10              POP      {r4,pc}
;;;88     
                          ENDP

                  ble_send_init PROC
;;;89     void ble_send_init()
000018  b510              PUSH     {r4,lr}
;;;90     {
;;;91         memset(ble_send.data, 0, BLE_SEND_SIZE);
00001a  2114              MOVS     r1,#0x14
00001c  48f9              LDR      r0,|L1.1028|
00001e  f7fffffe          BL       __aeabi_memclr4
;;;92         ble_send.length = 0;
000022  2000              MOVS     r0,#0
000024  49f7              LDR      r1,|L1.1028|
000026  7508              STRB     r0,[r1,#0x14]
;;;93         ble_send.offset = 0;
000028  6188              STR      r0,[r1,#0x18]  ; ble_send
;;;94         
;;;95         ble_send.state   = SEND_CLOSE;
00002a  7708              STRB     r0,[r1,#0x1c]
;;;96     }
00002c  bd10              POP      {r4,pc}
;;;97     
                          ENDP

                  set_ble_send_state PROC
;;;98     void set_ble_send_state( uint8_t state)
00002e  49f5              LDR      r1,|L1.1028|
;;;99     {
;;;100        ble_send.state = state;
000030  7708              STRB     r0,[r1,#0x1c]
;;;101    }
000032  4770              BX       lr
;;;102    
                          ENDP

                  get_ble_send_state PROC
;;;103    uint8_t get_ble_send_state()
000034  48f3              LDR      r0,|L1.1028|
;;;104    {
;;;105        return ble_send.state;
000036  7f00              LDRB     r0,[r0,#0x1c]  ; ble_send
;;;106    }
000038  4770              BX       lr
;;;107    
                          ENDP

                  get_ble_rec_count PROC
;;;108    uint8_t get_ble_rec_count()
00003a  48f1              LDR      r0,|L1.1024|
;;;109    {
;;;110        return ble_rec.count;
00003c  7b00              LDRB     r0,[r0,#0xc]  ; ble_rec
;;;111    }
00003e  4770              BX       lr
;;;112    
                          ENDP

                  ble_rec_input PROC
;;;113    void ble_rec_input(uint8_t *ch, uint16_t length)
000040  b570              PUSH     {r4-r6,lr}
;;;114    {
000042  4605              MOV      r5,r0
000044  460e              MOV      r6,r1
;;;115        uint16_t i = 0;
000046  2400              MOVS     r4,#0
;;;116        if(length <= (BLE_REC_SIZE - ble_rec.count))
000048  48ed              LDR      r0,|L1.1024|
00004a  7b00              LDRB     r0,[r0,#0xc]  ; ble_rec
00004c  210a              MOVS     r1,#0xa
00004e  1a08              SUBS     r0,r1,r0
000050  42b0              CMP      r0,r6
000052  db20              BLT      |L1.150|
;;;117        {
;;;118            for(; i < length; i++)
000054  e01d              B        |L1.146|
                  |L1.86|
;;;119            {
;;;120                ble_rec.data[ble_rec.rear] = ch[i];
000056  5d28              LDRB     r0,[r5,r4]
000058  49e9              LDR      r1,|L1.1024|
00005a  7ac9              LDRB     r1,[r1,#0xb]  ; ble_rec
00005c  4ae8              LDR      r2,|L1.1024|
00005e  5450              STRB     r0,[r2,r1]
;;;121                xprintf("rec char is %d...%d\r\n", ch[i], ble_rec.rear);
000060  4610              MOV      r0,r2
000062  7ac2              LDRB     r2,[r0,#0xb]  ; ble_rec
000064  5d29              LDRB     r1,[r5,r4]
000066  a0e8              ADR      r0,|L1.1032|
000068  f7fffffe          BL       xprintf
;;;122                ble_rec.rear = (++ble_rec.rear)%BLE_REC_SIZE;
00006c  49e4              LDR      r1,|L1.1024|
00006e  7ac9              LDRB     r1,[r1,#0xb]  ; ble_rec
000070  1c49              ADDS     r1,r1,#1
000072  b2c9              UXTB     r1,r1
000074  4ae2              LDR      r2,|L1.1024|
000076  72d1              STRB     r1,[r2,#0xb]
000078  4608              MOV      r0,r1
00007a  210a              MOVS     r1,#0xa
00007c  f7fffffe          BL       __aeabi_idivmod
000080  b2c8              UXTB     r0,r1
000082  49df              LDR      r1,|L1.1024|
000084  72c8              STRB     r0,[r1,#0xb]
;;;123                ble_rec.count +=1;
000086  4608              MOV      r0,r1
000088  7b00              LDRB     r0,[r0,#0xc]  ; ble_rec
00008a  1c40              ADDS     r0,r0,#1
00008c  7308              STRB     r0,[r1,#0xc]
00008e  1c60              ADDS     r0,r4,#1              ;118
000090  b284              UXTH     r4,r0                 ;118
                  |L1.146|
000092  42b4              CMP      r4,r6                 ;118
000094  dbdf              BLT      |L1.86|
                  |L1.150|
;;;124            }
;;;125        }
;;;126    }
000096  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP

                  ble_rec_output PROC
;;;128    uint8_t ble_rec_output()
000098  b510              PUSH     {r4,lr}
;;;129    {
;;;130        uint8_t fronter = 0;
00009a  2400              MOVS     r4,#0
;;;131        if(ble_rec.count != 0)
00009c  48d8              LDR      r0,|L1.1024|
00009e  7b00              LDRB     r0,[r0,#0xc]  ; ble_rec
0000a0  2800              CMP      r0,#0
0000a2  d015              BEQ      |L1.208|
;;;132        {
;;;133            fronter = ble_rec.front;
0000a4  48d6              LDR      r0,|L1.1024|
0000a6  7a84              LDRB     r4,[r0,#0xa]  ; ble_rec
;;;134            ble_rec.front  = (++ble_rec.front)%BLE_REC_SIZE;
0000a8  4601              MOV      r1,r0
0000aa  7a89              LDRB     r1,[r1,#0xa]  ; ble_rec
0000ac  1c49              ADDS     r1,r1,#1
0000ae  b2c9              UXTB     r1,r1
0000b0  4602              MOV      r2,r0
0000b2  7291              STRB     r1,[r2,#0xa]
0000b4  4608              MOV      r0,r1
0000b6  210a              MOVS     r1,#0xa
0000b8  f7fffffe          BL       __aeabi_idivmod
0000bc  b2c8              UXTB     r0,r1
0000be  49d0              LDR      r1,|L1.1024|
0000c0  7288              STRB     r0,[r1,#0xa]
;;;135            ble_rec.count -=1;
0000c2  4608              MOV      r0,r1
0000c4  7b00              LDRB     r0,[r0,#0xc]  ; ble_rec
0000c6  1e40              SUBS     r0,r0,#1
0000c8  7308              STRB     r0,[r1,#0xc]
;;;136            return ble_rec.data[fronter];
0000ca  4608              MOV      r0,r1
0000cc  5d00              LDRB     r0,[r0,r4]
                  |L1.206|
;;;137        }
;;;138        return false;
;;;139    }
0000ce  bd10              POP      {r4,pc}
                  |L1.208|
0000d0  2000              MOVS     r0,#0                 ;138
0000d2  e7fc              B        |L1.206|
;;;140    
                          ENDP

                  ble_timing_sync PROC
;;;141    
;;;142    void ble_timing_sync()
0000d4  b5fe              PUSH     {r1-r7,lr}
;;;143    {
;;;144        uint32_t local_timing, system_local_time ;
;;;145        uint16_t tmp16;
;;;146        uint8_t ctrl, send[3];
;;;147        
;;;148        // 将同步之前的时间值保存
;;;149        sto_no_sync_time();
0000d6  f7fffffe          BL       sto_no_sync_time
;;;150        xprintf("NO SYNC time is %d, \r\n", get_system_time()),
0000da  f7fffffe          BL       get_system_time
0000de  4601              MOV      r1,r0
0000e0  9000              STR      r0,[sp,#0]
0000e2  a0cf              ADR      r0,|L1.1056|
0000e4  f7fffffe          BL       xprintf
;;;151        system_local_time = 0;    // 先清空时间值
0000e8  2700              MOVS     r7,#0
;;;152        for(ctrl = 0 ; ctrl < 4; ctrl++)
0000ea  2600              MOVS     r6,#0
0000ec  e008              B        |L1.256|
                  |L1.238|
;;;153        {
;;;154            local_timing = ble_rec_output();       
0000ee  f7fffffe          BL       ble_rec_output
0000f2  4604              MOV      r4,r0
;;;155            system_local_time |= local_timing << (ctrl*8);
0000f4  00f1              LSLS     r1,r6,#3
0000f6  4620              MOV      r0,r4
0000f8  4088              LSLS     r0,r0,r1
0000fa  4307              ORRS     r7,r7,r0
0000fc  1c70              ADDS     r0,r6,#1              ;152
0000fe  b2c6              UXTB     r6,r0                 ;152
                  |L1.256|
000100  2e04              CMP      r6,#4                 ;152
000102  dbf4              BLT      |L1.238|
;;;156        }
;;;157        set_system_time(system_local_time);
000104  4638              MOV      r0,r7
000106  f7fffffe          BL       set_system_time
;;;158        xprintf(" NEW TIME IS %d \r\n", get_system_time());
00010a  f7fffffe          BL       get_system_time
00010e  4601              MOV      r1,r0
000110  9000              STR      r0,[sp,#0]
000112  a0c9              ADR      r0,|L1.1080|
000114  f7fffffe          BL       xprintf
;;;159        pedo_time_diff_sto_handle();
000118  f7fffffe          BL       pedo_time_diff_sto_handle
;;;160        
;;;161        tmp16 = get_system_app_version();
00011c  f7fffffe          BL       get_system_app_version
000120  4605              MOV      r5,r0
;;;162        send[0] = SYSTEM_APP_VERSION;
000122  2111              MOVS     r1,#0x11
000124  4668              MOV      r0,sp
000126  7101              STRB     r1,[r0,#4]
;;;163        send[1] = (tmp16 >> 0) & 0xff;
000128  7145              STRB     r5,[r0,#5]
;;;164        send[2] = (tmp16 >> 8) & 0xff;
00012a  1228              ASRS     r0,r5,#8
00012c  4669              MOV      r1,sp
00012e  7188              STRB     r0,[r1,#6]
;;;165        
;;;166        ble_nus_send_string(&m_nus, send, 3);   
000130  2203              MOVS     r2,#3
000132  a901              ADD      r1,sp,#4
000134  48c5              LDR      r0,|L1.1100|
000136  f7fffffe          BL       ble_nus_send_string
;;;167        set_ble_send_state(SEND_CLOSE);
00013a  2000              MOVS     r0,#0
00013c  f7fffffe          BL       set_ble_send_state
;;;168    }
000140  bdfe              POP      {r1-r7,pc}
;;;169    
                          ENDP

                  ble_battery_sync PROC
;;;170    void ble_battery_sync()
000142  b508              PUSH     {r3,lr}
;;;171    {
;;;172        uint8_t battery[3];
;;;173        battery[0] = SYSTEM_BATTERY_SYNC;
000144  2103              MOVS     r1,#3
000146  4668              MOV      r0,sp
000148  7001              STRB     r1,[r0,#0]
;;;174        battery[1] = get_battery_level();
00014a  f7fffffe          BL       get_battery_level
00014e  4601              MOV      r1,r0
000150  4668              MOV      r0,sp
000152  7041              STRB     r1,[r0,#1]
;;;175        battery[2] = 0;
000154  2100              MOVS     r1,#0
000156  7081              STRB     r1,[r0,#2]
;;;176        
;;;177        ble_nus_send_string(&m_nus, battery, 3);
000158  2203              MOVS     r2,#3
00015a  4669              MOV      r1,sp
00015c  48bb              LDR      r0,|L1.1100|
00015e  f7fffffe          BL       ble_nus_send_string
;;;178        
;;;179        set_ble_send_state(SEND_CLOSE);
000162  2000              MOVS     r0,#0
000164  f7fffffe          BL       set_ble_send_state
;;;180    }
000168  bd08              POP      {r3,pc}
;;;181    
                          ENDP

                  ble_sports_amount_sync PROC
;;;182    
;;;183    void ble_sports_amount_sync()
00016a  b57c              PUSH     {r2-r6,lr}
;;;184    {
;;;185        uint32_t amount;
;;;186        uint8_t  send[5],ctrl;
;;;187            
;;;188        send[0] = SYSTEM_DATA_SYNC_AMOUNT;
00016c  200a              MOVS     r0,#0xa
00016e  4669              MOV      r1,sp
000170  7008              STRB     r0,[r1,#0]
;;;189        
;;;190        amount = get_pedo_data_length();
000172  f7fffffe          BL       get_pedo_data_length
000176  4605              MOV      r5,r0
;;;191        for(ctrl = 0 ; ctrl < 4; ctrl++)
000178  2400              MOVS     r4,#0
00017a  e007              B        |L1.396|
                  |L1.380|
;;;192        {      
;;;193            send[ctrl + 1] = (amount >> (ctrl*8) ) & 0xff;
00017c  00e1              LSLS     r1,r4,#3
00017e  4628              MOV      r0,r5
000180  40c8              LSRS     r0,r0,r1
000182  b2c1              UXTB     r1,r0
000184  466a              MOV      r2,sp
000186  1c60              ADDS     r0,r4,#1
000188  5411              STRB     r1,[r2,r0]
00018a  b2c4              UXTB     r4,r0                 ;191
                  |L1.396|
00018c  2c04              CMP      r4,#4                 ;191
00018e  dbf5              BLT      |L1.380|
;;;194        }
;;;195        
;;;196        ble_nus_send_string(&m_nus, send, 5);
000190  2205              MOVS     r2,#5
000192  4669              MOV      r1,sp
000194  48ad              LDR      r0,|L1.1100|
000196  f7fffffe          BL       ble_nus_send_string
;;;197        xprintf("the amount is %d   .\r\n", amount);
00019a  4629              MOV      r1,r5
00019c  a0ac              ADR      r0,|L1.1104|
00019e  f7fffffe          BL       xprintf
;;;198        set_ble_send_state(SEND_CLOSE);
0001a2  2000              MOVS     r0,#0
0001a4  f7fffffe          BL       set_ble_send_state
;;;199    }
0001a8  bd7c              POP      {r2-r6,pc}
;;;200    
                          ENDP

                  ble_sports_data_sync PROC
;;;201    void ble_sports_data_sync()
0001aa  b510              PUSH     {r4,lr}
;;;202    {
;;;203        uint8_t i;
;;;204        
;;;205        for(i = 0; i < 6; i++)
0001ac  2400              MOVS     r4,#0
0001ae  e027              B        |L1.512|
                  |L1.432|
;;;206        {     
;;;207            get_pedo_data_handle(ble_send.data, &(ble_send.offset), &(ble_send.length) );
0001b0  4a94              LDR      r2,|L1.1028|
0001b2  3214              ADDS     r2,r2,#0x14
0001b4  1d11              ADDS     r1,r2,#4
0001b6  4893              LDR      r0,|L1.1028|
0001b8  f7fffffe          BL       get_pedo_data_handle
;;;208             
;;;209            if(ble_send.length == 20)
0001bc  4891              LDR      r0,|L1.1028|
0001be  7d00              LDRB     r0,[r0,#0x14]  ; ble_send
0001c0  2814              CMP      r0,#0x14
0001c2  d109              BNE      |L1.472|
;;;210            {  
;;;211                ble_nus_send_string(&m_nus, ble_send.data, ble_send.length);
0001c4  488f              LDR      r0,|L1.1028|
0001c6  7d02              LDRB     r2,[r0,#0x14]  ; ble_send
0001c8  4601              MOV      r1,r0
0001ca  48a0              LDR      r0,|L1.1100|
0001cc  f7fffffe          BL       ble_nus_send_string
;;;212                set_ble_send_state(SEND_DATA);
0001d0  2002              MOVS     r0,#2
0001d2  f7fffffe          BL       set_ble_send_state
0001d6  e011              B        |L1.508|
                  |L1.472|
;;;213            }
;;;214            else 
;;;215            {  
;;;216                ble_send.data[ble_send.length++] = SYSTEM_DATA_SYNC_END;
0001d8  2109              MOVS     r1,#9
0001da  488a              LDR      r0,|L1.1028|
0001dc  7d02              LDRB     r2,[r0,#0x14]  ; ble_send
0001de  7d00              LDRB     r0,[r0,#0x14]  ; ble_send
0001e0  1c40              ADDS     r0,r0,#1
0001e2  4b88              LDR      r3,|L1.1028|
0001e4  7518              STRB     r0,[r3,#0x14]
0001e6  4618              MOV      r0,r3
0001e8  5481              STRB     r1,[r0,r2]
;;;217                ble_nus_send_string(&m_nus, ble_send.data, ble_send.length);
0001ea  7d02              LDRB     r2,[r0,#0x14]  ; ble_send
0001ec  4601              MOV      r1,r0
0001ee  4897              LDR      r0,|L1.1100|
0001f0  f7fffffe          BL       ble_nus_send_string
;;;218                set_ble_send_state(SEND_DATA_END);
0001f4  2003              MOVS     r0,#3
0001f6  f7fffffe          BL       set_ble_send_state
;;;219                i = 6;
0001fa  2406              MOVS     r4,#6
                  |L1.508|
0001fc  1c60              ADDS     r0,r4,#1              ;205
0001fe  b2c4              UXTB     r4,r0                 ;205
                  |L1.512|
000200  2c06              CMP      r4,#6                 ;205
000202  dbd5              BLT      |L1.432|
;;;220            }  
;;;221            
;;;222        }        
;;;223       
;;;224    }
000204  bd10              POP      {r4,pc}
;;;225    
                          ENDP

                  pedo_data_erase PROC
;;;226    void pedo_data_erase()
000206  b510              PUSH     {r4,lr}
;;;227    {
;;;228        xprintf("\r\n all data has send out...\r\n");
000208  a097              ADR      r0,|L1.1128|
00020a  f7fffffe          BL       xprintf
;;;229        ble_send_init();
00020e  f7fffffe          BL       ble_send_init
;;;230        pedo_data_sto_ctrl_erase();
000212  f7fffffe          BL       pedo_data_sto_ctrl_erase
;;;231    }
000216  bd10              POP      {r4,pc}
;;;232    
                          ENDP

                  ble_response PROC
;;;233    
;;;234    void ble_response()
000218  b510              PUSH     {r4,lr}
;;;235    {
;;;236        switch(get_ble_send_state())
00021a  f7fffffe          BL       get_ble_send_state
00021e  2800              CMP      r0,#0
000220  d006              BEQ      |L1.560|
000222  2801              CMP      r0,#1
000224  d005              BEQ      |L1.562|
000226  2802              CMP      r0,#2
000228  d004              BEQ      |L1.564|
00022a  2803              CMP      r0,#3
00022c  d108              BNE      |L1.576|
00022e  e004              B        |L1.570|
                  |L1.560|
;;;237        {
;;;238            case SEND_CLOSE :
;;;239                //                
;;;240            break;
000230  e006              B        |L1.576|
                  |L1.562|
;;;241            
;;;242            case SEND_OPEN :
;;;243                //            
;;;244            break;
000232  e005              B        |L1.576|
                  |L1.564|
;;;245            
;;;246            case SEND_DATA :
;;;247                ble_sports_data_sync();
000234  f7fffffe          BL       ble_sports_data_sync
;;;248            break;
000238  e002              B        |L1.576|
                  |L1.570|
;;;249            
;;;250            case SEND_DATA_END :
;;;251                pedo_data_erase();                    
00023a  f7fffffe          BL       pedo_data_erase
;;;252            break;
00023e  bf00              NOP      
                  |L1.576|
000240  bf00              NOP                            ;240
;;;253        }
;;;254    }
000242  bd10              POP      {r4,pc}
;;;255    
                          ENDP

                  system_app_update PROC
;;;256    
;;;257    void system_app_update()
000244  b508              PUSH     {r3,lr}
;;;258    {    
;;;259        uint8_t send = SYSTEM_RESPONSE;
000246  2008              MOVS     r0,#8
000248  9000              STR      r0,[sp,#0]
;;;260        ble_nus_send_string(&m_nus, &send, 1);
00024a  2201              MOVS     r2,#1
00024c  4669              MOV      r1,sp
00024e  487f              LDR      r0,|L1.1100|
000250  f7fffffe          BL       ble_nus_send_string
;;;261        nrf_delay_ms(500);
000254  20ff              MOVS     r0,#0xff
000256  30f5              ADDS     r0,r0,#0xf5
000258  f7fffffe          BL       nrf_delay_ms
;;;262       
;;;263        flash_specword_write((uint32_t*)SYSTEM_PARAMETERS_SETTINGS_ADDRESS, SYSTEM_APP_VALID_OFFSET, SYSTEM_APP_INVALID);   
00025c  2200              MOVS     r2,#0
00025e  43d2              MVNS     r2,r2
000260  2100              MOVS     r1,#0
000262  20ff              MOVS     r0,#0xff
000264  0280              LSLS     r0,r0,#10
000266  f7fffffe          BL       flash_specword_write
;;;264                    
;;;265        sd_softdevice_disable();    
00026a  df11              SVC      #0x11
;;;266        xprintf(" system reset, begin to update..\r\n");
00026c  a086              ADR      r0,|L1.1160|
00026e  f7fffffe          BL       xprintf
;;;267        NVIC_SystemReset();
000272  bf00              NOP      
000274  f3bf8f4f          DSB      
000278  488c              LDR      r0,|L1.1196|
00027a  498d              LDR      r1,|L1.1200|
00027c  60c8              STR      r0,[r1,#0xc]
00027e  f3bf8f4f          DSB      
000282  bf00              NOP      
000284  bf00              NOP      
                  |L1.646|
000286  e7fe              B        |L1.646|
;;;268        
;;;269        //Start_Device_Firmware_Update(start_pfu_addr);
;;;270    }
;;;271    
                          ENDP

                  ble_rec_handle PROC
;;;273    
;;;274    void ble_rec_handle()
000288  b510              PUSH     {r4,lr}
;;;275    {       
;;;276        if(get_ble_rec_count() > 0)               
00028a  f7fffffe          BL       get_ble_rec_count
00028e  2800              CMP      r0,#0
000290  dd32              BLE      |L1.760|
;;;277        {                
;;;278            ble_rec.cur_rec_inst = ble_rec_output();          
000292  f7fffffe          BL       ble_rec_output
000296  495a              LDR      r1,|L1.1024|
000298  7348              STRB     r0,[r1,#0xd]
;;;279            xprintf("......handle inst is: %d  ..\r\n", ble_rec.cur_rec_inst);
00029a  4608              MOV      r0,r1
00029c  7b41              LDRB     r1,[r0,#0xd]  ; ble_rec
00029e  a085              ADR      r0,|L1.1204|
0002a0  f7fffffe          BL       xprintf
;;;280           // ble_sending();
;;;281             switch(ble_rec.cur_rec_inst)
0002a4  4856              LDR      r0,|L1.1024|
0002a6  7b40              LDRB     r0,[r0,#0xd]  ; ble_rec
0002a8  280a              CMP      r0,#0xa
0002aa  d015              BEQ      |L1.728|
0002ac  dc06              BGT      |L1.700|
0002ae  2801              CMP      r0,#1
0002b0  d009              BEQ      |L1.710|
0002b2  2803              CMP      r0,#3
0002b4  d00a              BEQ      |L1.716|
0002b6  2808              CMP      r0,#8
0002b8  d116              BNE      |L1.744|
0002ba  e00a              B        |L1.722|
                  |L1.700|
0002bc  280b              CMP      r0,#0xb
0002be  d00e              BEQ      |L1.734|
0002c0  280d              CMP      r0,#0xd
0002c2  d111              BNE      |L1.744|
0002c4  e00e              B        |L1.740|
                  |L1.710|
;;;282            {
;;;283                case SYSTEM_STANDARD_TIME:
;;;284                    ble_timing_sync();
0002c6  f7fffffe          BL       ble_timing_sync
;;;285                break;
0002ca  e014              B        |L1.758|
                  |L1.716|
;;;286                
;;;287                case SYSTEM_BATTERY_SYNC:
;;;288                    ble_battery_sync();
0002cc  f7fffffe          BL       ble_battery_sync
;;;289                break;
0002d0  e011              B        |L1.758|
                  |L1.722|
;;;290                
;;;291                case SYSTEM_RESPONSE:
;;;292                     ble_response();
0002d2  f7fffffe          BL       ble_response
;;;293                break;
0002d6  e00e              B        |L1.758|
                  |L1.728|
;;;294                
;;;295                case SYSTEM_DATA_SYNC_AMOUNT:
;;;296                    ble_sports_amount_sync();
0002d8  f7fffffe          BL       ble_sports_amount_sync
;;;297                break;
0002dc  e00b              B        |L1.758|
                  |L1.734|
;;;298                
;;;299                case SYSTEM_DATA_SYNC:
;;;300                    ble_sports_data_sync();
0002de  f7fffffe          BL       ble_sports_data_sync
;;;301                break;
0002e2  e008              B        |L1.758|
                  |L1.740|
;;;302                
;;;303                case SYSTEM_APP_UPDATE:
;;;304                    system_app_update();
0002e4  f7fffffe          BL       system_app_update
                  |L1.744|
;;;305                break;
;;;306                     
;;;307                default :
;;;308                    xprintf("what?..\r\n");
0002e8  a07a              ADR      r0,|L1.1236|
0002ea  f7fffffe          BL       xprintf
;;;309                    set_ble_send_state(SEND_CLOSE);             
0002ee  2000              MOVS     r0,#0
0002f0  f7fffffe          BL       set_ble_send_state
0002f4  bf00              NOP                            ;281
                  |L1.758|
0002f6  bf00              NOP                            ;285
                  |L1.760|
;;;310           }
;;;311        }
;;;312        else
;;;313        {        
;;;314           // xprintf("there is no data in buffer..\r\n");
;;;315        }        
;;;316    }
0002f8  bd10              POP      {r4,pc}
;;;317        
                          ENDP

                  ble_prepare PROC
;;;319    
;;;320    void ble_prepare()
0002fa  b510              PUSH     {r4,lr}
;;;321    {
;;;322        BL.STATE_INIT = false;
0002fc  2000              MOVS     r0,#0
0002fe  4978              LDR      r1,|L1.1248|
000300  7008              STRB     r0,[r1,#0]
;;;323        BL.E.OPEN_STATE = true;
000302  4608              MOV      r0,r1
000304  7800              LDRB     r0,[r0,#0]  ; BL
000306  0840              LSRS     r0,r0,#1
000308  0040              LSLS     r0,r0,#1
00030a  1c40              ADDS     r0,r0,#1
00030c  7008              STRB     r0,[r1,#0]
;;;324        ble_rec_init();
00030e  f7fffffe          BL       ble_rec_init
;;;325        ble_send_init();
000312  f7fffffe          BL       ble_send_init
;;;326        //RTC1_STOP();
;;;327    }
000316  bd10              POP      {r4,pc}
;;;328    
                          ENDP

                  ble_close PROC
;;;329    
;;;330    void ble_close()
000318  b510              PUSH     {r4,lr}
;;;331    {
;;;332        sd_softdevice_disable();
00031a  df11              SVC      #0x11
;;;333        BL.STATE_INIT = false;
00031c  2000              MOVS     r0,#0
00031e  4970              LDR      r1,|L1.1248|
000320  7008              STRB     r0,[r1,#0]
;;;334        ble_rec_init();
000322  f7fffffe          BL       ble_rec_init
;;;335        //RTC1_OPEN();
;;;336        xprintf("ble time out or transport finished, turn out to default mode");
000326  a06f              ADR      r0,|L1.1252|
000328  f7fffffe          BL       xprintf
;;;337        work_mode_switch();
00032c  f7fffffe          BL       work_mode_switch
;;;338        work_switch_set();  
000330  f7fffffe          BL       work_switch_set
;;;339    }
000334  bd10              POP      {r4,pc}
;;;340    
                          ENDP

                  app_error_handler PROC
;;;349     */
;;;350    void app_error_handler(uint32_t error_code, uint32_t line_num, const uint8_t *p_file_name)
000336  b570              PUSH     {r4-r6,lr}
;;;351    {
000338  4604              MOV      r4,r0
00033a  460d              MOV      r5,r1
00033c  4616              MOV      r6,r2
;;;352        //nrf_gpio_pin_set(ASSERT_LED_PIN_NO);
;;;353        xprintf("%s(): line: %d, error_code: %d");
00033e  a079              ADR      r0,|L1.1316|
000340  f7fffffe          BL       xprintf
;;;354        // This call can be used for debug purposes during development of an application.
;;;355        // @note CAUTION: Activating this code will write the stack to flash on an error.
;;;356        //                This function should NOT be used in a final product.
;;;357        //                It is intended STRICTLY for development/debugging purposes.
;;;358        //                The flash write will happen EVEN if the radio is active, thus interrupting
;;;359        //                any communication.
;;;360        //                Use with care. Un-comment the line below to use.
;;;361        ble_debug_assert_handler(error_code, line_num, p_file_name);
000344  4632              MOV      r2,r6
000346  4629              MOV      r1,r5
000348  4620              MOV      r0,r4
00034a  f7fffffe          BL       ble_debug_assert_handler
;;;362    
;;;363        // On assert, the system can only recover with a reset.
;;;364        //NVIC_SystemReset();
;;;365    }
00034e  bd70              POP      {r4-r6,pc}
;;;366    
                          ENDP

                  assert_nrf_callback PROC
;;;378     */
;;;379    void assert_nrf_callback(uint16_t line_num, const uint8_t *p_file_name)
000350  b570              PUSH     {r4-r6,lr}
;;;380    {
000352  4604              MOV      r4,r0
000354  460d              MOV      r5,r1
;;;381        app_error_handler(DEAD_BEEF, line_num, p_file_name);
000356  462a              MOV      r2,r5
000358  4621              MOV      r1,r4
00035a  487a              LDR      r0,|L1.1348|
00035c  f7fffffe          BL       app_error_handler
;;;382    }
000360  bd70              POP      {r4-r6,pc}
;;;383    
                          ENDP

                  timers_init PROC
;;;384    static void timers_init(void)
000362  b538              PUSH     {r3-r5,lr}
;;;385    {
;;;386        // Initialize timer module, making it use the scheduler
;;;387        // 定时器初始化       RTC分频：0      计数器的最大个数：2   定时器操作队列大小：4   不使用事件调度
;;;388        APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_MAX_TIMERS, APP_TIMER_OP_QUEUE_SIZE, false);
000364  bf00              NOP      
000366  2000              MOVS     r0,#0
000368  4b77              LDR      r3,|L1.1352|
00036a  2205              MOVS     r2,#5
00036c  2102              MOVS     r1,#2
00036e  9000              STR      r0,[sp,#0]
000370  f7fffffe          BL       app_timer_init
000374  4604              MOV      r4,r0
000376  bf00              NOP      
000378  4625              MOV      r5,r4
00037a  2d00              CMP      r5,#0
00037c  d007              BEQ      |L1.910|
00037e  bf00              NOP      
000380  a272              ADR      r2,|L1.1356|
000382  21ff              MOVS     r1,#0xff
000384  3185              ADDS     r1,r1,#0x85
000386  4628              MOV      r0,r5
000388  f7fffffe          BL       app_error_handler
00038c  bf00              NOP      
                  |L1.910|
00038e  bf00              NOP      
000390  bf00              NOP      
;;;389    
;;;390        /* YOUR_JOB: Create any timers to be used by the application.
;;;391                     Below is an example of how to create a timer.
;;;392        err_code = app_timer_create(&m_app_timer_id, APP_TIMER_MODE_REPEATED, timer_timeout_handler);
;;;393        APP_ERROR_CHECK(err_code); */
;;;394    }
000392  bd38              POP      {r3-r5,pc}
;;;395    
                          ENDP

                  gap_params_init PROC
;;;415     */
;;;416    static void gap_params_init(void)
000394  b53e              PUSH     {r1-r5,lr}
;;;417    {
;;;418        uint32_t                err_code;
;;;419        ble_gap_conn_params_t   gap_conn_params;
;;;420        ble_gap_conn_sec_mode_t sec_mode;
;;;421    
;;;422        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
000396  bf00              NOP      
000398  4668              MOV      r0,sp
00039a  7800              LDRB     r0,[r0,#0]
00039c  0901              LSRS     r1,r0,#4
00039e  0109              LSLS     r1,r1,#4
0003a0  1c49              ADDS     r1,r1,#1
0003a2  9100              STR      r1,[sp,#0]
0003a4  4668              MOV      r0,sp
0003a6  7800              LDRB     r0,[r0,#0]
0003a8  21f0              MOVS     r1,#0xf0
0003aa  4388              BICS     r0,r0,r1
0003ac  3010              ADDS     r0,r0,#0x10
0003ae  9000              STR      r0,[sp,#0]
0003b0  bf00              NOP      
;;;423        //                                                                  Ble_uart
;;;424        err_code = sd_ble_gap_device_name_set(&sec_mode, (const uint8_t *) DEVICE_NAME, strlen(DEVICE_NAME));
0003b2  220b              MOVS     r2,#0xb
0003b4  a171              ADR      r1,|L1.1404|
0003b6  4668              MOV      r0,sp
0003b8  df6c              SVC      #0x6c
0003ba  4604              MOV      r4,r0
;;;425        APP_ERROR_CHECK(err_code);
0003bc  bf00              NOP      
0003be  4625              MOV      r5,r4
0003c0  2d00              CMP      r5,#0
0003c2  d007              BEQ      |L1.980|
0003c4  bf00              NOP      
0003c6  a261              ADR      r2,|L1.1356|
0003c8  21ff              MOVS     r1,#0xff
0003ca  31aa              ADDS     r1,r1,#0xaa
0003cc  4628              MOV      r0,r5
0003ce  f7fffffe          BL       app_error_handler
0003d2  bf00              NOP      
                  |L1.980|
0003d4  bf00              NOP      
;;;426    
;;;427        memset(&gap_conn_params, 0, sizeof(gap_conn_params));
0003d6  2000              MOVS     r0,#0
0003d8  9001              STR      r0,[sp,#4]
0003da  9002              STR      r0,[sp,#8]
;;;428    
;;;429        gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;   //0.5s
0003dc  2128              MOVS     r1,#0x28
0003de  4668              MOV      r0,sp
0003e0  8081              STRH     r1,[r0,#4]
;;;430        gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;   //2s
0003e2  2119              MOVS     r1,#0x19
0003e4  0189              LSLS     r1,r1,#6
0003e6  80c1              STRH     r1,[r0,#6]
;;;431        gap_conn_params.slave_latency     = SLAVE_LATENCY;       //0
0003e8  2100              MOVS     r1,#0
0003ea  8101              STRH     r1,[r0,#8]
;;;432        gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;    //4s
0003ec  21ff              MOVS     r1,#0xff
0003ee  3191              ADDS     r1,r1,#0x91
0003f0  8141              STRH     r1,[r0,#0xa]
;;;433    
;;;434        err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
0003f2  a801              ADD      r0,sp,#4
0003f4  df6a              SVC      #0x6a
0003f6  4604              MOV      r4,r0
;;;435        APP_ERROR_CHECK(err_code);
0003f8  bf00              NOP      
0003fa  4625              MOV      r5,r4
0003fc  2d00              CMP      r5,#0
0003fe  e0c3              B        |L1.1416|
                  |L1.1024|
                          DCD      ble_rec
                  |L1.1028|
                          DCD      ble_send
                  |L1.1032|
000408  72656320          DCB      "rec char is %d...%d\r\n",0
00040c  63686172
000410  20697320
000414  25642e2e
000418  2e25640d
00041c  0a00    
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
000420  4e4f2053          DCB      "NO SYNC time is %d, \r\n",0
000424  594e4320
000428  74696d65
00042c  20697320
000430  25642c20
000434  0d0a00  
000437  00                DCB      0
                  |L1.1080|
000438  204e4557          DCB      " NEW TIME IS %d \r\n",0
00043c  2054494d
000440  45204953
000444  20256420
000448  0d0a00  
00044b  00                DCB      0
                  |L1.1100|
                          DCD      m_nus
                  |L1.1104|
000450  74686520          DCB      "the amount is %d   .\r\n",0
000454  616d6f75
000458  6e742069
00045c  73202564
000460  2020202e
000464  0d0a00  
000467  00                DCB      0
                  |L1.1128|
000468  0d0a2061          DCB      "\r\n all data has send out...\r\n",0
00046c  6c6c2064
000470  61746120
000474  68617320
000478  73656e64
00047c  206f7574
000480  2e2e2e0d
000484  0a00    
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  20737973          DCB      " system reset, begin to update..\r\n",0
00048c  74656d20
000490  72657365
000494  742c2062
000498  6567696e
00049c  20746f20
0004a0  75706461
0004a4  74652e2e
0004a8  0d0a00  
0004ab  00                DCB      0
                  |L1.1196|
                          DCD      0x05fa0004
                  |L1.1200|
                          DCD      0xe000ed00
                  |L1.1204|
0004b4  2e2e2e2e          DCB      "......handle inst is: %d  ..\r\n",0
0004b8  2e2e6861
0004bc  6e646c65
0004c0  20696e73
0004c4  74206973
0004c8  3a202564
0004cc  20202e2e
0004d0  0d0a00  
0004d3  00                DCB      0
                  |L1.1236|
0004d4  77686174          DCB      "what?..\r\n",0
0004d8  3f2e2e0d
0004dc  0a00    
0004de  00                DCB      0
0004df  00                DCB      0
                  |L1.1248|
                          DCD      ||BL||
                  |L1.1252|
0004e4  626c6520          DCB      "ble time out or transport finished, turn out to default"
0004e8  74696d65
0004ec  206f7574
0004f0  206f7220
0004f4  7472616e
0004f8  73706f72
0004fc  74206669
000500  6e697368
000504  65642c20
000508  7475726e
00050c  206f7574
000510  20746f20
000514  64656661
000518  756c74  
00051b  206d6f64          DCB      " mode",0
00051f  6500    
000521  00                DCB      0
000522  00                DCB      0
000523  00                DCB      0
                  |L1.1316|
000524  25732829          DCB      "%s(): line: %d, error_code: %d",0
000528  3a206c69
00052c  6e653a20
000530  25642c20
000534  6572726f
000538  725f636f
00053c  64653a20
000540  256400  
000543  00                DCB      0
                  |L1.1348|
                          DCD      0xdeadbeef
                  |L1.1352|
                          DCD      APP_TIMER_BUF
                  |L1.1356|
00054c  2e2e5c2e          DCB      "..\\..\\..\\Software\\Source\\ble_serv\\ble_startup.c",0
000550  2e5c2e2e
000554  5c536f66
000558  74776172
00055c  655c536f
000560  75726365
000564  5c626c65
000568  5f736572
00056c  765c626c
000570  655f7374
000574  61727475
000578  702e6300
                  |L1.1404|
00057c  424c455f          DCB      "BLE_UART_LL",0
000580  55415254
000584  5f4c4c00
                  |L1.1416|
000588  d007              BEQ      |L1.1434|
00058a  bf00              NOP      
00058c  4af2              LDR      r2,|L1.2392|
00058e  21ff              MOVS     r1,#0xff
000590  31b4              ADDS     r1,r1,#0xb4
000592  4628              MOV      r0,r5
000594  f7fffffe          BL       app_error_handler
000598  bf00              NOP      
                  |L1.1434|
00059a  bf00              NOP      
;;;436    }
00059c  bd3e              POP      {r1-r5,pc}
;;;437    
                          ENDP

                  advertising_init PROC
;;;443     */
;;;444    static void advertising_init(void)
00059e  b530              PUSH     {r4,r5,lr}
;;;445    {
0005a0  b09f              SUB      sp,sp,#0x7c
;;;446        uint32_t      err_code;
;;;447        ble_advdata_t advdata;
;;;448        ble_advdata_t scanrsp;
;;;449        uint8_t       flags = BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE;
0005a2  2105              MOVS     r1,#5
0005a4  9102              STR      r1,[sp,#8]
;;;450    
;;;451        ble_uuid_t adv_uuids[] = {{BLE_UUID_NUS_SERVICE, m_nus.uuid_type}};
0005a6  48ed              LDR      r0,|L1.2396|
0005a8  6800              LDR      r0,[r0,#0]  ; <Data3>
0005aa  9001              STR      r0,[sp,#4]
0005ac  48ec              LDR      r0,|L1.2400|
0005ae  7801              LDRB     r1,[r0,#0]  ; m_nus
0005b0  4668              MOV      r0,sp
0005b2  7181              STRB     r1,[r0,#6]
;;;452    
;;;453        memset(&advdata, 0, sizeof(advdata));
0005b4  2138              MOVS     r1,#0x38
0005b6  a811              ADD      r0,sp,#0x44
0005b8  f7fffffe          BL       __aeabi_memclr4
;;;454        advdata.name_type               = BLE_ADVDATA_FULL_NAME;
0005bc  2102              MOVS     r1,#2
0005be  a810              ADD      r0,sp,#0x40
0005c0  7101              STRB     r1,[r0,#4]
;;;455        advdata.include_appearance      = false;
0005c2  2100              MOVS     r1,#0
0005c4  7181              STRB     r1,[r0,#6]
;;;456        advdata.flags.size              = sizeof(flags);
0005c6  2101              MOVS     r1,#1
0005c8  8101              STRH     r1,[r0,#8]
;;;457        advdata.flags.p_data            = &flags;
0005ca  a902              ADD      r1,sp,#8
0005cc  9113              STR      r1,[sp,#0x4c]
;;;458    
;;;459        memset(&scanrsp, 0, sizeof(scanrsp));
0005ce  2138              MOVS     r1,#0x38
0005d0  a803              ADD      r0,sp,#0xc
0005d2  f7fffffe          BL       __aeabi_memclr4
;;;460        scanrsp.uuids_complete.uuid_cnt = sizeof(adv_uuids) / sizeof(adv_uuids[0]);
0005d6  2101              MOVS     r1,#1
0005d8  4668              MOV      r0,sp
0005da  8481              STRH     r1,[r0,#0x24]
;;;461        scanrsp.uuids_complete.p_uuids  = adv_uuids;
0005dc  a901              ADD      r1,sp,#4
0005de  910a              STR      r1,[sp,#0x28]
;;;462    
;;;463        err_code = ble_advdata_set(&advdata, &scanrsp);
0005e0  a903              ADD      r1,sp,#0xc
0005e2  a811              ADD      r0,sp,#0x44
0005e4  f7fffffe          BL       ble_advdata_set
0005e8  4604              MOV      r4,r0
;;;464        APP_ERROR_CHECK(err_code);
0005ea  bf00              NOP      
0005ec  4625              MOV      r5,r4
0005ee  2d00              CMP      r5,#0
0005f0  d007              BEQ      |L1.1538|
0005f2  bf00              NOP      
0005f4  4ad8              LDR      r2,|L1.2392|
0005f6  21ff              MOVS     r1,#0xff
0005f8  31d1              ADDS     r1,r1,#0xd1
0005fa  4628              MOV      r0,r5
0005fc  f7fffffe          BL       app_error_handler
000600  bf00              NOP      
                  |L1.1538|
000602  bf00              NOP      
;;;465    }
000604  b01f              ADD      sp,sp,#0x7c
000606  bd30              POP      {r4,r5,pc}
;;;466    
                          ENDP

                  data_compare PROC
;;;467    bool data_compare(uint8_t *data1, uint16_t length1, uint8_t *data2, uint16_t length2)
000608  b570              PUSH     {r4-r6,lr}
;;;468    {
00060a  4605              MOV      r5,r0
00060c  460c              MOV      r4,r1
;;;469        uint16_t i = 0;
00060e  2100              MOVS     r1,#0
;;;470        if(length1 != length2)
000610  429c              CMP      r4,r3
000612  d001              BEQ      |L1.1560|
;;;471        {
;;;472            return false;
000614  2000              MOVS     r0,#0
                  |L1.1558|
;;;473        }
;;;474        else
;;;475        {
;;;476            while(i < length1 && data1[i] == data2[i])
;;;477                i++;
;;;478            if(i != length1)
;;;479                return false;
;;;480            return true;
;;;481        }
;;;482    }
000616  bd70              POP      {r4-r6,pc}
                  |L1.1560|
000618  e001              B        |L1.1566|
                  |L1.1562|
00061a  1c48              ADDS     r0,r1,#1              ;477
00061c  b281              UXTH     r1,r0                 ;477
                  |L1.1566|
00061e  42a1              CMP      r1,r4                 ;476
000620  da03              BGE      |L1.1578|
000622  5c68              LDRB     r0,[r5,r1]            ;476
000624  5c56              LDRB     r6,[r2,r1]            ;476
000626  42b0              CMP      r0,r6                 ;476
000628  d0f7              BEQ      |L1.1562|
                  |L1.1578|
00062a  42a1              CMP      r1,r4                 ;478
00062c  d001              BEQ      |L1.1586|
00062e  2000              MOVS     r0,#0                 ;479
000630  e7f1              B        |L1.1558|
                  |L1.1586|
000632  2001              MOVS     r0,#1                 ;480
000634  e7ef              B        |L1.1558|
;;;483    
                          ENDP

                  data_handler PROC
;;;488    
;;;489    void data_handler(ble_nus_t *p_nus, uint8_t *data, uint16_t length)
000636  b570              PUSH     {r4-r6,lr}
;;;490    {
000638  4606              MOV      r6,r0
00063a  460c              MOV      r4,r1
00063c  4615              MOV      r5,r2
;;;491        ble_rec_input(data, length);
00063e  4629              MOV      r1,r5
000640  4620              MOV      r0,r4
000642  f7fffffe          BL       ble_rec_input
;;;492        // ble_nus_send_string(&m_nus, send, 13);
;;;493    }
000646  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP

                  services_init PROC
;;;498     */
;;;499    static void services_init(void)
000648  b570              PUSH     {r4-r6,lr}
;;;500    {
;;;501        uint32_t err_code;
;;;502        static ble_nus_init_t nus_init;
;;;503    
;;;504        memset(&nus_init, 0, sizeof nus_init);
00064a  48c6              LDR      r0,|L1.2404|
00064c  2100              MOVS     r1,#0
00064e  6001              STR      r1,[r0,#0]  ; nus_init
;;;505        nus_init.data_handler = data_handler;
000650  48c5              LDR      r0,|L1.2408|
000652  49c4              LDR      r1,|L1.2404|
000654  6008              STR      r0,[r1,#0]  ; nus_init
;;;506    
;;;507        err_code = ble_nus_init(&m_nus, &nus_init);
000656  48c2              LDR      r0,|L1.2400|
000658  f7fffffe          BL       ble_nus_init
00065c  4604              MOV      r4,r0
;;;508        APP_ERROR_CHECK(err_code);
00065e  bf00              NOP      
000660  4625              MOV      r5,r4
000662  2d00              CMP      r5,#0
000664  d007              BEQ      |L1.1654|
000666  bf00              NOP      
000668  4abb              LDR      r2,|L1.2392|
00066a  21ff              MOVS     r1,#0xff
00066c  31fd              ADDS     r1,r1,#0xfd
00066e  4628              MOV      r0,r5
000670  f7fffffe          BL       app_error_handler
000674  bf00              NOP      
                  |L1.1654|
000676  bf00              NOP      
;;;509    }
000678  bd70              POP      {r4-r6,pc}
;;;510    
                          ENDP

                  sec_params_init PROC
;;;513     */
;;;514    static void sec_params_init(void)
00067a  201e              MOVS     r0,#0x1e
;;;515    {
;;;516        m_sec_params.timeout      = SEC_PARAM_TIMEOUT;
00067c  49bb              LDR      r1,|L1.2412|
00067e  8008              STRH     r0,[r1,#0]
;;;517        m_sec_params.bond         = SEC_PARAM_BOND;
000680  4608              MOV      r0,r1
000682  7880              LDRB     r0,[r0,#2]  ; m_sec_params
000684  0840              LSRS     r0,r0,#1
000686  0040              LSLS     r0,r0,#1
000688  1c40              ADDS     r0,r0,#1
00068a  7088              STRB     r0,[r1,#2]
;;;518        m_sec_params.mitm         = SEC_PARAM_MITM;
00068c  4608              MOV      r0,r1
00068e  7880              LDRB     r0,[r0,#2]  ; m_sec_params
000690  2102              MOVS     r1,#2
000692  4388              BICS     r0,r0,r1
000694  49b5              LDR      r1,|L1.2412|
000696  7088              STRB     r0,[r1,#2]
;;;519        m_sec_params.io_caps      = SEC_PARAM_IO_CAPABILITIES;
000698  4608              MOV      r0,r1
00069a  7880              LDRB     r0,[r0,#2]  ; m_sec_params
00069c  211c              MOVS     r1,#0x1c
00069e  4388              BICS     r0,r0,r1
0006a0  300c              ADDS     r0,r0,#0xc
0006a2  49b2              LDR      r1,|L1.2412|
0006a4  7088              STRB     r0,[r1,#2]
;;;520        m_sec_params.oob          = SEC_PARAM_OOB;
0006a6  4608              MOV      r0,r1
0006a8  7880              LDRB     r0,[r0,#2]  ; m_sec_params
0006aa  2120              MOVS     r1,#0x20
0006ac  4388              BICS     r0,r0,r1
0006ae  49af              LDR      r1,|L1.2412|
0006b0  7088              STRB     r0,[r1,#2]
;;;521        m_sec_params.min_key_size = SEC_PARAM_MIN_KEY_SIZE;
0006b2  2007              MOVS     r0,#7
0006b4  70c8              STRB     r0,[r1,#3]
;;;522        m_sec_params.max_key_size = SEC_PARAM_MAX_KEY_SIZE;
0006b6  2010              MOVS     r0,#0x10
0006b8  7108              STRB     r0,[r1,#4]
;;;523    }
0006ba  4770              BX       lr
;;;524    
                          ENDP

                  on_conn_params_evt PROC
;;;535     */
;;;536    static void on_conn_params_evt(ble_conn_params_evt_t *p_evt)
0006bc  b570              PUSH     {r4-r6,lr}
;;;537    {
0006be  4605              MOV      r5,r0
;;;538        uint32_t err_code;
;;;539    
;;;540        APP_ERROR_CHECK_BOOL(p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED);
0006c0  bf00              NOP      
0006c2  7828              LDRB     r0,[r5,#0]
0006c4  2800              CMP      r0,#0
0006c6  d101              BNE      |L1.1740|
0006c8  2001              MOVS     r0,#1
0006ca  e000              B        |L1.1742|
                  |L1.1740|
0006cc  2000              MOVS     r0,#0
                  |L1.1742|
0006ce  4606              MOV      r6,r0
0006d0  2e00              CMP      r6,#0
0006d2  d106              BNE      |L1.1762|
0006d4  bf00              NOP      
0006d6  4aa0              LDR      r2,|L1.2392|
0006d8  2187              MOVS     r1,#0x87
0006da  0089              LSLS     r1,r1,#2
0006dc  f7fffffe          BL       app_error_handler
0006e0  bf00              NOP      
                  |L1.1762|
0006e2  bf00              NOP      
;;;541    
;;;542        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
0006e4  213b              MOVS     r1,#0x3b
0006e6  48a2              LDR      r0,|L1.2416|
0006e8  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
0006ea  df66              SVC      #0x66
0006ec  4604              MOV      r4,r0
;;;543        APP_ERROR_CHECK(err_code);
0006ee  bf00              NOP      
0006f0  4626              MOV      r6,r4
0006f2  2e00              CMP      r6,#0
0006f4  d006              BEQ      |L1.1796|
0006f6  bf00              NOP      
0006f8  4a97              LDR      r2,|L1.2392|
0006fa  499e              LDR      r1,|L1.2420|
0006fc  4630              MOV      r0,r6
0006fe  f7fffffe          BL       app_error_handler
000702  bf00              NOP      
                  |L1.1796|
000704  bf00              NOP      
;;;544    }
000706  bd70              POP      {r4-r6,pc}
;;;545    
                          ENDP

                  conn_params_error_handler PROC
;;;550     */
;;;551    static void conn_params_error_handler(uint32_t nrf_error)
000708  b510              PUSH     {r4,lr}
;;;552    {
00070a  4604              MOV      r4,r0
;;;553        APP_ERROR_HANDLER(nrf_error);
00070c  bf00              NOP      
00070e  4a92              LDR      r2,|L1.2392|
000710  4998              LDR      r1,|L1.2420|
000712  310a              ADDS     r1,r1,#0xa
000714  4620              MOV      r0,r4
000716  f7fffffe          BL       app_error_handler
00071a  bf00              NOP      
;;;554    }
00071c  bd10              POP      {r4,pc}
;;;555    
                          ENDP

                  conn_params_init PROC
;;;558     */
;;;559    static void conn_params_init(void)
00071e  b530              PUSH     {r4,r5,lr}
;;;560    {
000720  b087              SUB      sp,sp,#0x1c
;;;561        uint32_t               err_code;
;;;562        ble_conn_params_init_t cp_init;
;;;563    
;;;564        memset(&cp_init, 0, sizeof(cp_init));
000722  211c              MOVS     r1,#0x1c
000724  4668              MOV      r0,sp
000726  f7fffffe          BL       __aeabi_memclr4
;;;565    
;;;566        cp_init.p_conn_params                  = NULL;
00072a  2000              MOVS     r0,#0
00072c  9000              STR      r0,[sp,#0]
;;;567        cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
00072e  2001              MOVS     r0,#1
000730  0400              LSLS     r0,r0,#16
000732  9001              STR      r0,[sp,#4]
;;;568        cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
000734  1080              ASRS     r0,r0,#2
000736  9002              STR      r0,[sp,#8]
;;;569        cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
000738  2103              MOVS     r1,#3
00073a  4668              MOV      r0,sp
00073c  7301              STRB     r1,[r0,#0xc]
;;;570        cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
00073e  2100              MOVS     r1,#0
000740  81c1              STRH     r1,[r0,#0xe]
;;;571        cp_init.disconnect_on_fail             = false;
000742  7401              STRB     r1,[r0,#0x10]
;;;572        cp_init.evt_handler                    = on_conn_params_evt;
000744  488c              LDR      r0,|L1.2424|
000746  9005              STR      r0,[sp,#0x14]
;;;573        cp_init.error_handler                  = conn_params_error_handler;
000748  488c              LDR      r0,|L1.2428|
00074a  9006              STR      r0,[sp,#0x18]
;;;574    
;;;575        err_code = ble_conn_params_init(&cp_init);
00074c  4668              MOV      r0,sp
00074e  f7fffffe          BL       ble_conn_params_init
000752  4604              MOV      r4,r0
;;;576        APP_ERROR_CHECK(err_code);
000754  bf00              NOP      
000756  4625              MOV      r5,r4
000758  2d00              CMP      r5,#0
00075a  d007              BEQ      |L1.1900|
00075c  bf00              NOP      
00075e  4a7e              LDR      r2,|L1.2392|
000760  2109              MOVS     r1,#9
000762  0189              LSLS     r1,r1,#6
000764  4628              MOV      r0,r5
000766  f7fffffe          BL       app_error_handler
00076a  bf00              NOP      
                  |L1.1900|
00076c  bf00              NOP      
;;;577    }
00076e  b007              ADD      sp,sp,#0x1c
000770  bd30              POP      {r4,r5,pc}
;;;578    
                          ENDP

                  advertising_start PROC
;;;581     */
;;;582    static void advertising_start(void)
000772  b530              PUSH     {r4,r5,lr}
;;;583    {
000774  b085              SUB      sp,sp,#0x14
;;;584        uint32_t             err_code;
;;;585        ble_gap_adv_params_t adv_params;
;;;586    
;;;587        // Start advertising
;;;588        memset(&adv_params, 0, sizeof(adv_params));
000776  2114              MOVS     r1,#0x14
000778  4668              MOV      r0,sp
00077a  f7fffffe          BL       __aeabi_memclr4
;;;589    
;;;590        adv_params.type        = BLE_GAP_ADV_TYPE_ADV_IND;
00077e  2100              MOVS     r1,#0
000780  4668              MOV      r0,sp
000782  7001              STRB     r1,[r0,#0]
;;;591        adv_params.p_peer_addr = NULL;
000784  2000              MOVS     r0,#0
000786  9001              STR      r0,[sp,#4]
;;;592        adv_params.fp          = BLE_GAP_ADV_FP_ANY;
000788  4668              MOV      r0,sp
00078a  7201              STRB     r1,[r0,#8]
;;;593        adv_params.interval    = APP_ADV_INTERVAL;
00078c  2140              MOVS     r1,#0x40
00078e  8201              STRH     r1,[r0,#0x10]
;;;594        adv_params.timeout     = APP_ADV_TIMEOUT_IN_SECONDS;
000790  213c              MOVS     r1,#0x3c
000792  8241              STRH     r1,[r0,#0x12]
;;;595    
;;;596        err_code = sd_ble_gap_adv_start(&adv_params);
000794  df63              SVC      #0x63
000796  4604              MOV      r4,r0
;;;597        APP_ERROR_CHECK(err_code);
000798  bf00              NOP      
00079a  4625              MOV      r5,r4
00079c  2d00              CMP      r5,#0
00079e  d007              BEQ      |L1.1968|
0007a0  bf00              NOP      
0007a2  4a6d              LDR      r2,|L1.2392|
0007a4  4973              LDR      r1,|L1.2420|
0007a6  3136              ADDS     r1,r1,#0x36
0007a8  4628              MOV      r0,r5
0007aa  f7fffffe          BL       app_error_handler
0007ae  bf00              NOP      
                  |L1.1968|
0007b0  bf00              NOP      
;;;598        //nrf_gpio_pin_set(ADVERTISING_LED_PIN_NO);
;;;599    }
0007b2  b005              ADD      sp,sp,#0x14
0007b4  bd30              POP      {r4,r5,pc}
;;;600    
                          ENDP

                  on_ble_evt PROC
;;;606    
;;;607    static void on_ble_evt(ble_evt_t *p_ble_evt)
0007b6  b5f8              PUSH     {r3-r7,lr}
;;;608    {
0007b8  4604              MOV      r4,r0
;;;609        uint32_t                         err_code = NRF_SUCCESS;
0007ba  2500              MOVS     r5,#0
;;;610        static ble_gap_evt_auth_status_t m_auth_status;
;;;611        ble_gap_enc_info_t              *p_enc_info;
;;;612    
;;;613        switch (p_ble_evt->header.evt_id)
0007bc  8820              LDRH     r0,[r4,#0]
0007be  2814              CMP      r0,#0x14
0007c0  d046              BEQ      |L1.2128|
0007c2  dc06              BGT      |L1.2002|
0007c4  2810              CMP      r0,#0x10
0007c6  d00b              BEQ      |L1.2016|
0007c8  2811              CMP      r0,#0x11
0007ca  d017              BEQ      |L1.2044|
0007cc  2813              CMP      r0,#0x13
0007ce  d15e              BNE      |L1.2190|
0007d0  e02a              B        |L1.2088|
                  |L1.2002|
0007d2  2817              CMP      r0,#0x17
0007d4  d036              BEQ      |L1.2116|
0007d6  2819              CMP      r0,#0x19
0007d8  d04e              BEQ      |L1.2168|
0007da  2852              CMP      r0,#0x52
0007dc  d157              BNE      |L1.2190|
0007de  e02a              B        |L1.2102|
                  |L1.2016|
;;;614        {
;;;615        case BLE_GAP_EVT_CONNECTED:
;;;616            xprintf("ble is conneting..\r\b");
0007e0  a067              ADR      r0,|L1.2432|
0007e2  f7fffffe          BL       xprintf
;;;617            BL.E.CONNECT_STATE = true;
0007e6  486c              LDR      r0,|L1.2456|
0007e8  7800              LDRB     r0,[r0,#0]  ; BL
0007ea  2102              MOVS     r1,#2
0007ec  4388              BICS     r0,r0,r1
0007ee  1c80              ADDS     r0,r0,#2
0007f0  4969              LDR      r1,|L1.2456|
0007f2  7008              STRB     r0,[r1,#0]
;;;618            m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
0007f4  88a0              LDRH     r0,[r4,#4]
0007f6  495e              LDR      r1,|L1.2416|
0007f8  8008              STRH     r0,[r1,#0]
;;;619    
;;;620            /* YOUR_JOB: Uncomment this part if you are using the app_button module to handle button
;;;621                         events (assuming that the button events are only needed in connected
;;;622                         state). If this is uncommented out here,
;;;623                            1. Make sure that app_button_disable() is called when handling
;;;624                               BLE_GAP_EVT_DISCONNECTED below.
;;;625                            2. Make sure the app_button module is initialized.
;;;626            err_code = app_button_enable();
;;;627            */
;;;628            break;
0007fa  e049              B        |L1.2192|
                  |L1.2044|
;;;629    
;;;630        case BLE_GAP_EVT_DISCONNECTED:
;;;631            BL.E.CONNECT_STATE   = false;
0007fc  4866              LDR      r0,|L1.2456|
0007fe  7800              LDRB     r0,[r0,#0]  ; BL
000800  2102              MOVS     r1,#2
000802  4388              BICS     r0,r0,r1
000804  4964              LDR      r1,|L1.2456|
000806  7008              STRB     r0,[r1,#0]
;;;632            BL.E.END_TRANS_STATE = true;
000808  4608              MOV      r0,r1
00080a  7800              LDRB     r0,[r0,#0]  ; BL
00080c  2104              MOVS     r1,#4
00080e  4388              BICS     r0,r0,r1
000810  1d00              ADDS     r0,r0,#4
000812  4961              LDR      r1,|L1.2456|
000814  7008              STRB     r0,[r1,#0]
;;;633            //nrf_gpio_pin_clear(CONNECTED_LED_PIN_NO);
;;;634            m_conn_handle = BLE_CONN_HANDLE_INVALID;
000816  2000              MOVS     r0,#0
000818  43c0              MVNS     r0,r0
00081a  4955              LDR      r1,|L1.2416|
00081c  8008              STRH     r0,[r1,#0]
;;;635    
;;;636            /* YOUR_JOB: Uncomment this part if you are using the app_button module to handle button
;;;637                         events. This should be done to save power when not connected
;;;638                         to a peer.
;;;639            err_code = app_button_disable();
;;;640            */
;;;641            if (err_code == NRF_SUCCESS)
00081e  2d00              CMP      r5,#0
000820  d101              BNE      |L1.2086|
;;;642            {
;;;643                advertising_start();
000822  f7fffffe          BL       advertising_start
                  |L1.2086|
;;;644            }
;;;645            break;
000826  e033              B        |L1.2192|
                  |L1.2088|
;;;646    
;;;647        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
;;;648            err_code = sd_ble_gap_sec_params_reply(m_conn_handle,
000828  4a50              LDR      r2,|L1.2412|
00082a  2100              MOVS     r1,#0
00082c  4850              LDR      r0,|L1.2416|
00082e  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000830  df6f              SVC      #0x6f
000832  4605              MOV      r5,r0
;;;649                                                   BLE_GAP_SEC_STATUS_SUCCESS,
;;;650                                                   &m_sec_params);
;;;651            break;
000834  e02c              B        |L1.2192|
                  |L1.2102|
;;;652    
;;;653        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
;;;654            err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0);
000836  2200              MOVS     r2,#0
000838  4611              MOV      r1,r2
00083a  484d              LDR      r0,|L1.2416|
00083c  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00083e  dfa9              SVC      #0xa9
000840  4605              MOV      r5,r0
;;;655            break;
000842  e025              B        |L1.2192|
                  |L1.2116|
;;;656    
;;;657        case BLE_GAP_EVT_AUTH_STATUS:
;;;658            m_auth_status = p_ble_evt->evt.gap_evt.params.auth_status;
000844  2232              MOVS     r2,#0x32
000846  1da1              ADDS     r1,r4,#6
000848  4854              LDR      r0,|L1.2460|
00084a  f7fffffe          BL       __aeabi_memcpy
;;;659            break;
00084e  e01f              B        |L1.2192|
                  |L1.2128|
;;;660    
;;;661        case BLE_GAP_EVT_SEC_INFO_REQUEST:
;;;662            p_enc_info = &m_auth_status.periph_keys.enc_info;
000850  4e52              LDR      r6,|L1.2460|
000852  1db6              ADDS     r6,r6,#6
;;;663            if (p_enc_info->div == p_ble_evt->evt.gap_evt.params.sec_info_request.div)
000854  8831              LDRH     r1,[r6,#0]
000856  89e0              LDRH     r0,[r4,#0xe]
000858  4281              CMP      r1,r0
00085a  d106              BNE      |L1.2154|
;;;664            {
;;;665                err_code = sd_ble_gap_sec_info_reply(m_conn_handle, p_enc_info, NULL);
00085c  2200              MOVS     r2,#0
00085e  4631              MOV      r1,r6
000860  4843              LDR      r0,|L1.2416|
000862  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000864  df71              SVC      #0x71
000866  4605              MOV      r5,r0
000868  e005              B        |L1.2166|
                  |L1.2154|
;;;666            }
;;;667            else
;;;668            {
;;;669                // No keys found for this device
;;;670                err_code = sd_ble_gap_sec_info_reply(m_conn_handle, NULL, NULL);
00086a  2200              MOVS     r2,#0
00086c  4611              MOV      r1,r2
00086e  4840              LDR      r0,|L1.2416|
000870  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000872  df71              SVC      #0x71
000874  4605              MOV      r5,r0
                  |L1.2166|
;;;671            }
;;;672            break;
000876  e00b              B        |L1.2192|
                  |L1.2168|
;;;673    
;;;674        case BLE_GAP_EVT_TIMEOUT:
;;;675            if (p_ble_evt->evt.gap_evt.params.timeout.src == BLE_GAP_TIMEOUT_SRC_ADVERTISEMENT)
000878  79a0              LDRB     r0,[r4,#6]
00087a  2800              CMP      r0,#0
00087c  d106              BNE      |L1.2188|
;;;676            {
;;;677                //nrf_gpio_pin_clear(ADVERTISING_LED_PIN_NO);
;;;678    
;;;679                // Go to system-off mode (this function will not return; wakeup will cause a reset)
;;;680                //GPIO_WAKEUP_BUTTON_CONFIG(WAKEUP_BUTTON_PIN);
;;;681                //err_code = sd_power_system_off();
;;;682                BL.E.TIME_OUT_STATE = true;
00087e  4846              LDR      r0,|L1.2456|
000880  7800              LDRB     r0,[r0,#0]  ; BL
000882  2108              MOVS     r1,#8
000884  4388              BICS     r0,r0,r1
000886  3008              ADDS     r0,r0,#8
000888  4943              LDR      r1,|L1.2456|
00088a  7008              STRB     r0,[r1,#0]
                  |L1.2188|
;;;683     
;;;684            }
;;;685            break;
00088c  e000              B        |L1.2192|
                  |L1.2190|
;;;686    
;;;687        default:
;;;688            break;
00088e  bf00              NOP      
                  |L1.2192|
000890  bf00              NOP                            ;628
;;;689        }
;;;690    
;;;691        APP_ERROR_CHECK(err_code);
000892  bf00              NOP      
000894  462f              MOV      r7,r5
000896  2f00              CMP      r7,#0
000898  d007              BEQ      |L1.2218|
00089a  bf00              NOP      
00089c  4a2e              LDR      r2,|L1.2392|
00089e  4935              LDR      r1,|L1.2420|
0008a0  3194              ADDS     r1,r1,#0x94
0008a2  4638              MOV      r0,r7
0008a4  f7fffffe          BL       app_error_handler
0008a8  bf00              NOP      
                  |L1.2218|
0008aa  bf00              NOP      
;;;692    }
0008ac  bdf8              POP      {r3-r7,pc}
;;;693    
                          ENDP

                  ble_evt_dispatch PROC
;;;701     */
;;;702    static void ble_evt_dispatch(ble_evt_t *p_ble_evt)
0008ae  b510              PUSH     {r4,lr}
;;;703    {
0008b0  4604              MOV      r4,r0
;;;704        ble_conn_params_on_ble_evt(p_ble_evt);
0008b2  4620              MOV      r0,r4
0008b4  f7fffffe          BL       ble_conn_params_on_ble_evt
;;;705        ble_nus_on_ble_evt(&m_nus, p_ble_evt);
0008b8  4621              MOV      r1,r4
0008ba  4829              LDR      r0,|L1.2400|
0008bc  f7fffffe          BL       ble_nus_on_ble_evt
;;;706        on_ble_evt(p_ble_evt);
0008c0  4620              MOV      r0,r4
0008c2  f7fffffe          BL       on_ble_evt
;;;707    }
0008c6  bd10              POP      {r4,pc}
;;;708    
                          ENDP

                  ble_stack_init PROC
;;;713     */
;;;714    static void ble_stack_init(void)
0008c8  b538              PUSH     {r3-r5,lr}
;;;715    {
;;;716        // YOUR_JOB: If the MTU size is changed by the application, the MTU_SIZE parameter to
;;;717        //           BLE_STACK_HANDLER_INIT() must be changed accordingly.
;;;718        BLE_STACK_HANDLER_INIT(NRF_CLOCK_LFCLKSRC_XTAL_20_PPM,
0008ca  bf00              NOP      
0008cc  2000              MOVS     r0,#0
0008ce  4b34              LDR      r3,|L1.2464|
0008d0  2250              MOVS     r2,#0x50
0008d2  4934              LDR      r1,|L1.2468|
0008d4  9000              STR      r0,[sp,#0]
0008d6  200d              MOVS     r0,#0xd
0008d8  f7fffffe          BL       ble_stack_handler_init
0008dc  4604              MOV      r4,r0
0008de  bf00              NOP      
0008e0  4625              MOV      r5,r4
0008e2  2d00              CMP      r5,#0
0008e4  d007              BEQ      |L1.2294|
0008e6  bf00              NOP      
0008e8  4a1b              LDR      r2,|L1.2392|
0008ea  4922              LDR      r1,|L1.2420|
0008ec  31af              ADDS     r1,r1,#0xaf
0008ee  4628              MOV      r0,r5
0008f0  f7fffffe          BL       app_error_handler
0008f4  bf00              NOP      
                  |L1.2294|
0008f6  bf00              NOP      
0008f8  bf00              NOP      
;;;719                               BLE_L2CAP_MTU_DEF,
;;;720                               ble_evt_dispatch,
;;;721                               false);
;;;722    }
0008fa  bd38              POP      {r3-r5,pc}
;;;723    
                          ENDP

                  ble_start PROC
;;;733     */
;;;734    void ble_start(void)
0008fc  b510              PUSH     {r4,lr}
;;;735    {
;;;736        //simple_uart_config(RTS_PIN_NUMBER, TX_PIN_NUMBER, CTS_PIN_NUMBER, RX_PIN_NUMBER, HWFC);
;;;737        xprintf("System start...\r\n");
0008fe  a02a              ADR      r0,|L1.2472|
000900  f7fffffe          BL       xprintf
;;;738        
;;;739        timers_init();  //a must or the application can't run normally
000904  f7fffffe          BL       timers_init
;;;740        xprintf("timers start...\r\n");
000908  a02c              ADR      r0,|L1.2492|
00090a  f7fffffe          BL       xprintf
;;;741        ble_stack_init();
00090e  f7fffffe          BL       ble_stack_init
;;;742        xprintf("stack start...\r\n");
000912  a02f              ADR      r0,|L1.2512|
000914  f7fffffe          BL       xprintf
;;;743        gap_params_init();
000918  f7fffffe          BL       gap_params_init
;;;744        xprintf("gap start...\r\n");
00091c  a031              ADR      r0,|L1.2532|
00091e  f7fffffe          BL       xprintf
;;;745        services_init();
000922  f7fffffe          BL       services_init
;;;746        xprintf("service start...\r\n");
000926  a033              ADR      r0,|L1.2548|
000928  f7fffffe          BL       xprintf
;;;747        advertising_init();
00092c  f7fffffe          BL       advertising_init
;;;748        xprintf("advertising start...\r\n");
000930  a035              ADR      r0,|L1.2568|
000932  f7fffffe          BL       xprintf
;;;749        conn_params_init();
000936  f7fffffe          BL       conn_params_init
;;;750        xprintf("connect start...\r\n");
00093a  a039              ADR      r0,|L1.2592|
00093c  f7fffffe          BL       xprintf
;;;751        sec_params_init();
000940  f7fffffe          BL       sec_params_init
;;;752        xprintf("security start...\r\n");
000944  a03b              ADR      r0,|L1.2612|
000946  f7fffffe          BL       xprintf
;;;753        advertising_start();
00094a  f7fffffe          BL       advertising_start
;;;754        xprintf("All components have initialized!\r\n");
00094e  a03e              ADR      r0,|L1.2632|
000950  f7fffffe          BL       xprintf
;;;755        
;;;756        // Enter main loop
;;;757        //for (;;)
;;;758        //{
;;;759            //power_manage();
;;;760       // }
;;;761    }
000954  bd10              POP      {r4,pc}
;;;762    
                          ENDP

000956  0000              DCW      0x0000
                  |L1.2392|
                          DCD      ||.text||+0x54c
                  |L1.2396|
                          DCD      ||.constdata||
                  |L1.2400|
                          DCD      m_nus
                  |L1.2404|
                          DCD      nus_init
                  |L1.2408|
                          DCD      data_handler
                  |L1.2412|
                          DCD      m_sec_params
                  |L1.2416|
                          DCD      m_conn_handle
                  |L1.2420|
                          DCD      0x0000021f
                  |L1.2424|
                          DCD      on_conn_params_evt
                  |L1.2428|
                          DCD      conn_params_error_handler
                  |L1.2432|
000980  626c6520          DCB      "ble is conneting..\r\b",0
000984  69732063
000988  6f6e6e65
00098c  74696e67
000990  2e2e0d08
000994  00      
000995  00                DCB      0
000996  00                DCB      0
000997  00                DCB      0
                  |L1.2456|
                          DCD      ||BL||
                  |L1.2460|
                          DCD      m_auth_status
                  |L1.2464|
                          DCD      ble_evt_dispatch
                  |L1.2468|
                          DCD      EVT_BUFFER
                  |L1.2472|
0009a8  53797374          DCB      "System start...\r\n",0
0009ac  656d2073
0009b0  74617274
0009b4  2e2e2e0d
0009b8  0a00    
0009ba  00                DCB      0
0009bb  00                DCB      0
                  |L1.2492|
0009bc  74696d65          DCB      "timers start...\r\n",0
0009c0  72732073
0009c4  74617274
0009c8  2e2e2e0d
0009cc  0a00    
0009ce  00                DCB      0
0009cf  00                DCB      0
                  |L1.2512|
0009d0  73746163          DCB      "stack start...\r\n",0
0009d4  6b207374
0009d8  6172742e
0009dc  2e2e0d0a
0009e0  00      
0009e1  00                DCB      0
0009e2  00                DCB      0
0009e3  00                DCB      0
                  |L1.2532|
0009e4  67617020          DCB      "gap start...\r\n",0
0009e8  73746172
0009ec  742e2e2e
0009f0  0d0a00  
0009f3  00                DCB      0
                  |L1.2548|
0009f4  73657276          DCB      "service start...\r\n",0
0009f8  69636520
0009fc  73746172
000a00  742e2e2e
000a04  0d0a00  
000a07  00                DCB      0
                  |L1.2568|
000a08  61647665          DCB      "advertising start...\r\n",0
000a0c  72746973
000a10  696e6720
000a14  73746172
000a18  742e2e2e
000a1c  0d0a00  
000a1f  00                DCB      0
                  |L1.2592|
000a20  636f6e6e          DCB      "connect start...\r\n",0
000a24  65637420
000a28  73746172
000a2c  742e2e2e
000a30  0d0a00  
000a33  00                DCB      0
                  |L1.2612|
000a34  73656375          DCB      "security start...\r\n",0
000a38  72697479
000a3c  20737461
000a40  72742e2e
000a44  2e0d0a00
                  |L1.2632|
000a48  416c6c20          DCB      "All components have initialized!\r\n",0
000a4c  636f6d70
000a50  6f6e656e
000a54  74732068
000a58  61766520
000a5c  696e6974
000a60  69616c69
000a64  7a656421
000a68  0d0a00  
000a6b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  APP_TIMER_BUF
                          %        536
                  m_auth_status
                          %        52
                  EVT_BUFFER
                          %        80
                  m_nus
                          %        28
                  ble_rec
                          %        16
                  ble_send
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0001              DCW      0x0001
000002  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  m_conn_handle
000000  ffff              DCW      0xffff
000002  0000              DCB      0x00,0x00
                  nus_init
                          DCD      0x00000000
                  m_sec_params
                          DCD      0x00000000
00000c  0000              DCB      0x00,0x00
                  ||BL||
00000e  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\ble_serv\\ble_startup.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_ble_startup_c_be5b5e5c____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_ble_startup_c_be5b5e5c____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_ble_startup_c_be5b5e5c____REVSH|
#line 130
|__asm___13_ble_startup_c_be5b5e5c____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_ble_startup_c_be5b5e5c__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___13_ble_startup_c_be5b5e5c__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |Start_Device_Firmware_Update|
#line 36 "..\\..\\..\\Software\\Source\\ble_serv\\ble_startup.c"
|Start_Device_Firmware_Update| PROC
#line 37

 LDR R2, [R0] 
 MSR MSP, R2 
 LDR R3, [R0, #0x00000004] 
 BX R3 
 ALIGN
	ENDP

;*** End   embedded assembler ***
