; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\ble_nus.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ble_nus.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\ble_nus.crf ..\..\..\Software\Source\ble_serv\ble_nus.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  on_connect PROC
;;;23      */
;;;24     static void on_connect(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)
000000  888a              LDRH     r2,[r1,#4]
;;;25     {
;;;26         p_nus->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000002  8282              STRH     r2,[r0,#0x14]
;;;27     }
000004  4770              BX       lr
;;;28     
                          ENDP

                  on_disconnect PROC
;;;34      */
;;;35     static void on_disconnect(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)
000006  2200              MOVS     r2,#0
;;;36     {
;;;37         UNUSED_PARAMETER(p_ble_evt);
;;;38         p_nus->conn_handle = BLE_CONN_HANDLE_INVALID;
000008  43d2              MVNS     r2,r2
00000a  8282              STRH     r2,[r0,#0x14]
;;;39     }
00000c  4770              BX       lr
;;;40     
                          ENDP

                  on_write PROC
;;;47      */
;;;48     static void on_write(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)
00000e  b570              PUSH     {r4-r6,lr}
;;;49     {  
000010  4604              MOV      r4,r0
000012  460e              MOV      r6,r1
;;;50         ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
000014  1db5              ADDS     r5,r6,#6
;;;51         
;;;52         if (
000016  8829              LDRH     r1,[r5,#0]
000018  8a20              LDRH     r0,[r4,#0x10]
00001a  4281              CMP      r1,r0
00001c  d10b              BNE      |L1.54|
;;;53             (p_evt_write->handle == p_nus->rx_handles.cccd_handle)
;;;54             &&
;;;55             (p_evt_write->len == 2)
00001e  8b28              LDRH     r0,[r5,#0x18]
000020  2802              CMP      r0,#2
000022  d108              BNE      |L1.54|
;;;56         )
;;;57         {
;;;58             uint16_t value = *(uint16_t *) p_evt_write->data;
000024  8b68              LDRH     r0,[r5,#0x1a]
;;;59             if (value == 0x001)   //judge if the service is added or not
000026  2801              CMP      r0,#1
000028  d102              BNE      |L1.48|
;;;60             {
;;;61                 p_nus->is_notification_enabled = true;
00002a  2101              MOVS     r1,#1
00002c  75a1              STRB     r1,[r4,#0x16]
00002e  e001              B        |L1.52|
                  |L1.48|
;;;62             }
;;;63             else
;;;64             {
;;;65                 p_nus->is_notification_enabled = false;
000030  2100              MOVS     r1,#0
000032  75a1              STRB     r1,[r4,#0x16]
                  |L1.52|
;;;66             }
;;;67             
;;;68         }
000034  e00c              B        |L1.80|
                  |L1.54|
;;;69         else if ((p_evt_write->handle == p_nus->tx_handles.value_handle) &&
000036  8828              LDRH     r0,[r5,#0]
000038  88a1              LDRH     r1,[r4,#4]
00003a  4288              CMP      r0,r1
00003c  d108              BNE      |L1.80|
;;;70                  (p_nus->data_handler != NULL))
00003e  69a0              LDR      r0,[r4,#0x18]
000040  2800              CMP      r0,#0
000042  d005              BEQ      |L1.80|
;;;71         {
;;;72             p_nus->data_handler(p_nus, p_evt_write->data, p_evt_write->len);
000044  8b2a              LDRH     r2,[r5,#0x18]
000046  4629              MOV      r1,r5
000048  311a              ADDS     r1,r1,#0x1a
00004a  4620              MOV      r0,r4
00004c  69a3              LDR      r3,[r4,#0x18]
00004e  4798              BLX      r3
                  |L1.80|
;;;73     			  
;;;74         }
;;;75     }
000050  bd70              POP      {r4-r6,pc}
;;;76     
                          ENDP

                  ble_nus_on_ble_evt PROC
;;;77     void ble_nus_on_ble_evt(ble_nus_t * p_nus, ble_evt_t * p_ble_evt)
000052  b570              PUSH     {r4-r6,lr}
;;;78     {
000054  4605              MOV      r5,r0
000056  460c              MOV      r4,r1
;;;79         switch (p_ble_evt->header.evt_id)
000058  8820              LDRH     r0,[r4,#0]
00005a  2810              CMP      r0,#0x10
00005c  d004              BEQ      |L1.104|
00005e  2811              CMP      r0,#0x11
000060  d007              BEQ      |L1.114|
000062  2850              CMP      r0,#0x50
000064  d10f              BNE      |L1.134|
000066  e009              B        |L1.124|
                  |L1.104|
;;;80         {
;;;81             case BLE_GAP_EVT_CONNECTED:
;;;82                 on_connect(p_nus, p_ble_evt);
000068  4621              MOV      r1,r4
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       on_connect
;;;83                 break;
000070  e00a              B        |L1.136|
                  |L1.114|
;;;84                 
;;;85             case BLE_GAP_EVT_DISCONNECTED:
;;;86                 on_disconnect(p_nus, p_ble_evt);
000072  4621              MOV      r1,r4
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       on_disconnect
;;;87                 break;
00007a  e005              B        |L1.136|
                  |L1.124|
;;;88             
;;;89             case BLE_GATTS_EVT_WRITE:   
;;;90                 on_write(p_nus, p_ble_evt);
00007c  4621              MOV      r1,r4
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       on_write
;;;91                 break;
000084  e000              B        |L1.136|
                  |L1.134|
;;;92                 
;;;93             default:
;;;94                 break;
000086  bf00              NOP      
                  |L1.136|
000088  bf00              NOP                            ;83
;;;95         }
;;;96     }
00008a  bd70              POP      {r4-r6,pc}
;;;97     
                          ENDP

                  rx_char_add PROC
;;;105     */
;;;106    static uint32_t rx_char_add(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)
00008c  b530              PUSH     {r4,r5,lr}
;;;107    {
00008e  b08f              SUB      sp,sp,#0x3c
000090  4604              MOV      r4,r0
000092  460d              MOV      r5,r1
;;;108        ble_gatts_char_md_t char_md;
;;;109        ble_gatts_attr_md_t cccd_md;
;;;110        ble_gatts_attr_t    attr_char_value;
;;;111        ble_uuid_t          ble_uuid;
;;;112        ble_gatts_attr_md_t attr_md;
;;;113        
;;;114        // Add Battery Level characteristic
;;;115        memset(&cccd_md, 0, sizeof(cccd_md));
000094  2000              MOVS     r0,#0
000096  9007              STR      r0,[sp,#0x1c]
;;;116    
;;;117        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
000098  bf00              NOP      
00009a  4668              MOV      r0,sp
00009c  7f00              LDRB     r0,[r0,#0x1c]
00009e  0901              LSRS     r1,r0,#4
0000a0  0109              LSLS     r1,r1,#4
0000a2  1c49              ADDS     r1,r1,#1
0000a4  4668              MOV      r0,sp
0000a6  7701              STRB     r1,[r0,#0x1c]
0000a8  7f00              LDRB     r0,[r0,#0x1c]
0000aa  21f0              MOVS     r1,#0xf0
0000ac  4388              BICS     r0,r0,r1
0000ae  3010              ADDS     r0,r0,#0x10
0000b0  4669              MOV      r1,sp
0000b2  7708              STRB     r0,[r1,#0x1c]
0000b4  bf00              NOP      
;;;118        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
0000b6  bf00              NOP      
0000b8  4668              MOV      r0,sp
0000ba  7f40              LDRB     r0,[r0,#0x1d]
0000bc  0901              LSRS     r1,r0,#4
0000be  0109              LSLS     r1,r1,#4
0000c0  1c49              ADDS     r1,r1,#1
0000c2  4668              MOV      r0,sp
0000c4  7741              STRB     r1,[r0,#0x1d]
0000c6  7f40              LDRB     r0,[r0,#0x1d]
0000c8  21f0              MOVS     r1,#0xf0
0000ca  4388              BICS     r0,r0,r1
0000cc  3010              ADDS     r0,r0,#0x10
0000ce  4669              MOV      r1,sp
0000d0  7748              STRB     r0,[r1,#0x1d]
0000d2  bf00              NOP      
;;;119        cccd_md.vloc = BLE_GATTS_VLOC_STACK;
0000d4  4668              MOV      r0,sp
0000d6  7f80              LDRB     r0,[r0,#0x1e]
0000d8  2106              MOVS     r1,#6
0000da  4388              BICS     r0,r0,r1
0000dc  1c81              ADDS     r1,r0,#2
0000de  4668              MOV      r0,sp
0000e0  7781              STRB     r1,[r0,#0x1e]
;;;120        
;;;121        memset(&char_md, 0, sizeof(char_md));
0000e2  211c              MOVS     r1,#0x1c
0000e4  a808              ADD      r0,sp,#0x20
0000e6  f7fffffe          BL       __aeabi_memclr4
;;;122        
;;;123        char_md.char_props.notify = 1;
0000ea  a808              ADD      r0,sp,#0x20
0000ec  7800              LDRB     r0,[r0,#0]
0000ee  2110              MOVS     r1,#0x10
0000f0  4388              BICS     r0,r0,r1
0000f2  1841              ADDS     r1,r0,r1
0000f4  a808              ADD      r0,sp,#0x20
0000f6  7001              STRB     r1,[r0,#0]
;;;124        char_md.p_char_user_desc  = NULL;
0000f8  2000              MOVS     r0,#0
0000fa  9009              STR      r0,[sp,#0x24]
;;;125        char_md.p_char_pf         = NULL;
0000fc  900b              STR      r0,[sp,#0x2c]
;;;126        char_md.p_user_desc_md    = NULL;
0000fe  900c              STR      r0,[sp,#0x30]
;;;127        char_md.p_cccd_md         = &cccd_md;
000100  a807              ADD      r0,sp,#0x1c
000102  900d              STR      r0,[sp,#0x34]
;;;128        char_md.p_sccd_md         = NULL;
000104  2000              MOVS     r0,#0
000106  900e              STR      r0,[sp,#0x38]
;;;129        
;;;130        ble_uuid.type = p_nus->uuid_type;
000108  7821              LDRB     r1,[r4,#0]
00010a  4668              MOV      r0,sp
00010c  7181              STRB     r1,[r0,#6]
;;;131        ble_uuid.uuid = BLE_UUID_NUS_RX_CHARACTERISTIC;
00010e  2103              MOVS     r1,#3
000110  8081              STRH     r1,[r0,#4]
;;;132        
;;;133        memset(&attr_md, 0, sizeof(attr_md));
000112  2000              MOVS     r0,#0
000114  9000              STR      r0,[sp,#0]
;;;134    
;;;135        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
000116  bf00              NOP      
000118  4668              MOV      r0,sp
00011a  7800              LDRB     r0,[r0,#0]
00011c  0901              LSRS     r1,r0,#4
00011e  0109              LSLS     r1,r1,#4
000120  1c49              ADDS     r1,r1,#1
000122  4668              MOV      r0,sp
000124  7001              STRB     r1,[r0,#0]
000126  7800              LDRB     r0,[r0,#0]
000128  21f0              MOVS     r1,#0xf0
00012a  4388              BICS     r0,r0,r1
00012c  3010              ADDS     r0,r0,#0x10
00012e  4669              MOV      r1,sp
000130  7008              STRB     r0,[r1,#0]
000132  bf00              NOP      
;;;136        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
000134  bf00              NOP      
000136  4668              MOV      r0,sp
000138  7840              LDRB     r0,[r0,#1]
00013a  0901              LSRS     r1,r0,#4
00013c  0109              LSLS     r1,r1,#4
00013e  1c49              ADDS     r1,r1,#1
000140  4668              MOV      r0,sp
000142  7041              STRB     r1,[r0,#1]
000144  7840              LDRB     r0,[r0,#1]
000146  21f0              MOVS     r1,#0xf0
000148  4388              BICS     r0,r0,r1
00014a  3010              ADDS     r0,r0,#0x10
00014c  4669              MOV      r1,sp
00014e  7048              STRB     r0,[r1,#1]
000150  bf00              NOP      
;;;137        
;;;138        attr_md.vloc       = BLE_GATTS_VLOC_STACK;
000152  4668              MOV      r0,sp
000154  7880              LDRB     r0,[r0,#2]
000156  2106              MOVS     r1,#6
000158  4388              BICS     r0,r0,r1
00015a  1c81              ADDS     r1,r0,#2
00015c  4668              MOV      r0,sp
00015e  7081              STRB     r1,[r0,#2]
;;;139        attr_md.rd_auth    = 0;
000160  7880              LDRB     r0,[r0,#2]
000162  2108              MOVS     r1,#8
000164  4388              BICS     r0,r0,r1
000166  4601              MOV      r1,r0
000168  4668              MOV      r0,sp
00016a  7081              STRB     r1,[r0,#2]
;;;140        attr_md.wr_auth    = 0;
00016c  7880              LDRB     r0,[r0,#2]
00016e  2110              MOVS     r1,#0x10
000170  4388              BICS     r0,r0,r1
000172  4601              MOV      r1,r0
000174  4668              MOV      r0,sp
000176  7081              STRB     r1,[r0,#2]
;;;141        attr_md.vlen       = 1;
000178  7880              LDRB     r0,[r0,#2]
00017a  0841              LSRS     r1,r0,#1
00017c  0049              LSLS     r1,r1,#1
00017e  1c49              ADDS     r1,r1,#1
000180  4668              MOV      r0,sp
000182  7081              STRB     r1,[r0,#2]
;;;142        
;;;143        memset(&attr_char_value, 0, sizeof(attr_char_value));
000184  2114              MOVS     r1,#0x14
000186  a802              ADD      r0,sp,#8
000188  f7fffffe          BL       __aeabi_memclr4
;;;144    
;;;145        attr_char_value.p_uuid       = &ble_uuid;
00018c  a801              ADD      r0,sp,#4
00018e  9002              STR      r0,[sp,#8]
;;;146        attr_char_value.p_attr_md    = &attr_md;
000190  4668              MOV      r0,sp
000192  9003              STR      r0,[sp,#0xc]
;;;147        attr_char_value.init_len     = sizeof(uint8_t);
000194  2101              MOVS     r1,#1
000196  8201              STRH     r1,[r0,#0x10]
;;;148        attr_char_value.init_offs    = 0;
000198  2100              MOVS     r1,#0
00019a  8241              STRH     r1,[r0,#0x12]
;;;149        attr_char_value.max_len      = 20;
00019c  2114              MOVS     r1,#0x14
00019e  8281              STRH     r1,[r0,#0x14]
;;;150        
;;;151        return sd_ble_gatts_characteristic_add(p_nus->service_handle, &char_md,
0001a0  8860              LDRH     r0,[r4,#2]
0001a2  4623              MOV      r3,r4
0001a4  330c              ADDS     r3,r3,#0xc
0001a6  aa02              ADD      r2,sp,#8
0001a8  a908              ADD      r1,sp,#0x20
0001aa  dfa2              SVC      #0xa2
;;;152                                                   &attr_char_value,
;;;153                                                   &p_nus->rx_handles);
;;;154    
;;;155    }
0001ac  b00f              ADD      sp,sp,#0x3c
0001ae  bd30              POP      {r4,r5,pc}
;;;156    
                          ENDP

                  tx_char_add PROC
;;;163     */
;;;164    static uint32_t tx_char_add(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)
0001b0  b530              PUSH     {r4,r5,lr}
;;;165    {
0001b2  b08f              SUB      sp,sp,#0x3c
0001b4  4604              MOV      r4,r0
0001b6  460d              MOV      r5,r1
;;;166        ble_gatts_char_md_t char_md;
;;;167        ble_gatts_attr_t    attr_char_value;
;;;168        ble_uuid_t          ble_uuid;
;;;169        ble_gatts_attr_md_t attr_md;
;;;170        
;;;171        memset(&char_md, 0, sizeof(char_md));
0001b8  211c              MOVS     r1,#0x1c
0001ba  a808              ADD      r0,sp,#0x20
0001bc  f7fffffe          BL       __aeabi_memclr4
;;;172        
;;;173        char_md.char_props.write  = 1;
0001c0  a808              ADD      r0,sp,#0x20
0001c2  7800              LDRB     r0,[r0,#0]
0001c4  2108              MOVS     r1,#8
0001c6  4388              BICS     r0,r0,r1
0001c8  1841              ADDS     r1,r0,r1
0001ca  a808              ADD      r0,sp,#0x20
0001cc  7001              STRB     r1,[r0,#0]
;;;174        char_md.p_char_user_desc  = NULL;
0001ce  2000              MOVS     r0,#0
0001d0  9009              STR      r0,[sp,#0x24]
;;;175        char_md.p_char_pf         = NULL;
0001d2  900b              STR      r0,[sp,#0x2c]
;;;176        char_md.p_user_desc_md    = NULL;
0001d4  900c              STR      r0,[sp,#0x30]
;;;177        char_md.p_cccd_md         = NULL;
0001d6  900d              STR      r0,[sp,#0x34]
;;;178        char_md.p_sccd_md         = NULL;
0001d8  900e              STR      r0,[sp,#0x38]
;;;179        
;;;180        ble_uuid.type = p_nus->uuid_type;
0001da  7821              LDRB     r1,[r4,#0]
0001dc  4668              MOV      r0,sp
0001de  7281              STRB     r1,[r0,#0xa]
;;;181        ble_uuid.uuid = BLE_UUID_NUS_TX_CHARACTERISTIC;
0001e0  2102              MOVS     r1,#2
0001e2  8101              STRH     r1,[r0,#8]
;;;182        
;;;183        memset(&attr_md, 0, sizeof(attr_md));
0001e4  2000              MOVS     r0,#0
0001e6  9001              STR      r0,[sp,#4]
;;;184    
;;;185        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
0001e8  bf00              NOP      
0001ea  4668              MOV      r0,sp
0001ec  7900              LDRB     r0,[r0,#4]
0001ee  0901              LSRS     r1,r0,#4
0001f0  0109              LSLS     r1,r1,#4
0001f2  1c49              ADDS     r1,r1,#1
0001f4  4668              MOV      r0,sp
0001f6  7101              STRB     r1,[r0,#4]
0001f8  7900              LDRB     r0,[r0,#4]
0001fa  21f0              MOVS     r1,#0xf0
0001fc  4388              BICS     r0,r0,r1
0001fe  3010              ADDS     r0,r0,#0x10
000200  4669              MOV      r1,sp
000202  7108              STRB     r0,[r1,#4]
000204  bf00              NOP      
;;;186        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
000206  bf00              NOP      
000208  4668              MOV      r0,sp
00020a  7940              LDRB     r0,[r0,#5]
00020c  0901              LSRS     r1,r0,#4
00020e  0109              LSLS     r1,r1,#4
000210  1c49              ADDS     r1,r1,#1
000212  4668              MOV      r0,sp
000214  7141              STRB     r1,[r0,#5]
000216  7940              LDRB     r0,[r0,#5]
000218  21f0              MOVS     r1,#0xf0
00021a  4388              BICS     r0,r0,r1
00021c  3010              ADDS     r0,r0,#0x10
00021e  4669              MOV      r1,sp
000220  7148              STRB     r0,[r1,#5]
000222  bf00              NOP      
;;;187        
;;;188        attr_md.vloc       = BLE_GATTS_VLOC_STACK;
000224  4668              MOV      r0,sp
000226  7980              LDRB     r0,[r0,#6]
000228  2106              MOVS     r1,#6
00022a  4388              BICS     r0,r0,r1
00022c  1c81              ADDS     r1,r0,#2
00022e  4668              MOV      r0,sp
000230  7181              STRB     r1,[r0,#6]
;;;189        attr_md.rd_auth    = 0;
000232  7980              LDRB     r0,[r0,#6]
000234  2108              MOVS     r1,#8
000236  4388              BICS     r0,r0,r1
000238  4601              MOV      r1,r0
00023a  4668              MOV      r0,sp
00023c  7181              STRB     r1,[r0,#6]
;;;190        attr_md.wr_auth    = 0;
00023e  7980              LDRB     r0,[r0,#6]
000240  2110              MOVS     r1,#0x10
000242  4388              BICS     r0,r0,r1
000244  4601              MOV      r1,r0
000246  4668              MOV      r0,sp
000248  7181              STRB     r1,[r0,#6]
;;;191        attr_md.vlen       = 1;
00024a  7980              LDRB     r0,[r0,#6]
00024c  0841              LSRS     r1,r0,#1
00024e  0049              LSLS     r1,r1,#1
000250  1c49              ADDS     r1,r1,#1
000252  4668              MOV      r0,sp
000254  7181              STRB     r1,[r0,#6]
;;;192        
;;;193        memset(&attr_char_value, 0, sizeof(attr_char_value));
000256  2114              MOVS     r1,#0x14
000258  a803              ADD      r0,sp,#0xc
00025a  f7fffffe          BL       __aeabi_memclr4
;;;194    
;;;195        attr_char_value.p_uuid       = &ble_uuid;
00025e  a802              ADD      r0,sp,#8
000260  9003              STR      r0,[sp,#0xc]
;;;196        attr_char_value.p_attr_md    = &attr_md;
000262  a801              ADD      r0,sp,#4
000264  9004              STR      r0,[sp,#0x10]
;;;197        attr_char_value.init_len     = 1;
000266  2101              MOVS     r1,#1
000268  4668              MOV      r0,sp
00026a  8281              STRH     r1,[r0,#0x14]
;;;198        attr_char_value.init_offs    = 0;
00026c  2100              MOVS     r1,#0
00026e  82c1              STRH     r1,[r0,#0x16]
;;;199        attr_char_value.max_len      = 20;
000270  2114              MOVS     r1,#0x14
000272  8301              STRH     r1,[r0,#0x18]
;;;200        
;;;201        return sd_ble_gatts_characteristic_add(p_nus->service_handle, &char_md,
000274  8860              LDRH     r0,[r4,#2]
000276  1d23              ADDS     r3,r4,#4
000278  aa03              ADD      r2,sp,#0xc
00027a  a908              ADD      r1,sp,#0x20
00027c  dfa2              SVC      #0xa2
;;;202                                                   &attr_char_value,
;;;203                                                   &p_nus->tx_handles);
;;;204    }
00027e  b00f              ADD      sp,sp,#0x3c
000280  bd30              POP      {r4,r5,pc}
;;;205    
                          ENDP

                  ble_nus_init PROC
;;;206    uint32_t ble_nus_init(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)
000282  b570              PUSH     {r4-r6,lr}
;;;207    {
000284  b086              SUB      sp,sp,#0x18
000286  4604              MOV      r4,r0
000288  460e              MOV      r6,r1
;;;208        uint32_t   err_code;
;;;209        ble_uuid_t ble_uuid;
;;;210        ble_uuid128_t nus_base_uuid = {0x9E, 0xCA, 0xDC, 0x24, 0x0E, 0xE5, 0xA9, 0xE0, 0x93, 0xF3, 0xA3, 0xB5, 0x00, 0x00, 0x40, 0x6E};
00028a  4b2c              LDR      r3,|L1.828|
00028c  cb0f              LDM      r3,{r0-r3}
00028e  ad01              ADD      r5,sp,#4
000290  c50f              STM      r5!,{r0-r3}
;;;211        
;;;212        // Initialize service structure
;;;213        p_nus->conn_handle = BLE_CONN_HANDLE_INVALID;
000292  2000              MOVS     r0,#0
000294  43c0              MVNS     r0,r0
000296  82a0              STRH     r0,[r4,#0x14]
;;;214        p_nus->data_handler = p_nus_init->data_handler;
000298  6830              LDR      r0,[r6,#0]
00029a  61a0              STR      r0,[r4,#0x18]
;;;215        p_nus->is_notification_enabled = false;
00029c  2000              MOVS     r0,#0
00029e  75a0              STRB     r0,[r4,#0x16]
;;;216        
;;;217    
;;;218        // Add custom base UUID
;;;219        err_code = sd_ble_uuid_vs_add(&nus_base_uuid, &p_nus->uuid_type);
0002a0  4621              MOV      r1,r4
0002a2  a801              ADD      r0,sp,#4
0002a4  df52              SVC      #0x52
0002a6  4605              MOV      r5,r0
;;;220        if (err_code != NRF_SUCCESS)
0002a8  2d00              CMP      r5,#0
0002aa  d002              BEQ      |L1.690|
;;;221        {
;;;222            return err_code;
0002ac  4628              MOV      r0,r5
                  |L1.686|
;;;223        }
;;;224    
;;;225        // Add service
;;;226        ble_uuid.type = p_nus->uuid_type;
;;;227        ble_uuid.uuid = BLE_UUID_NUS_SERVICE;
;;;228    
;;;229        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &p_nus->service_handle);
;;;230        if (err_code != NRF_SUCCESS)
;;;231        {
;;;232            return err_code;
;;;233        }
;;;234        
;;;235    	err_code = rx_char_add(p_nus, p_nus_init);
;;;236    	if (err_code != NRF_SUCCESS)
;;;237    	{
;;;238    		return err_code;
;;;239    	}
;;;240    	
;;;241    	err_code = tx_char_add(p_nus, p_nus_init);
;;;242    	if (err_code != NRF_SUCCESS)
;;;243    	{
;;;244    		return err_code;
;;;245    	}
;;;246        
;;;247    	return NRF_SUCCESS;
;;;248    }
0002ae  b006              ADD      sp,sp,#0x18
0002b0  bd70              POP      {r4-r6,pc}
                  |L1.690|
0002b2  7821              LDRB     r1,[r4,#0]            ;226
0002b4  4668              MOV      r0,sp                 ;226
0002b6  7581              STRB     r1,[r0,#0x16]         ;226
0002b8  2101              MOVS     r1,#1                 ;227
0002ba  8281              STRH     r1,[r0,#0x14]         ;227
0002bc  1ca2              ADDS     r2,r4,#2              ;229
0002be  a905              ADD      r1,sp,#0x14           ;229
0002c0  2001              MOVS     r0,#1                 ;229
0002c2  dfa0              SVC      #0xa0                 ;229
0002c4  4605              MOV      r5,r0                 ;229
0002c6  2d00              CMP      r5,#0                 ;230
0002c8  d001              BEQ      |L1.718|
0002ca  4628              MOV      r0,r5                 ;232
0002cc  e7ef              B        |L1.686|
                  |L1.718|
0002ce  4631              MOV      r1,r6                 ;235
0002d0  4620              MOV      r0,r4                 ;235
0002d2  f7fffffe          BL       rx_char_add
0002d6  4605              MOV      r5,r0                 ;235
0002d8  2d00              CMP      r5,#0                 ;236
0002da  d001              BEQ      |L1.736|
0002dc  4628              MOV      r0,r5                 ;238
0002de  e7e6              B        |L1.686|
                  |L1.736|
0002e0  4631              MOV      r1,r6                 ;241
0002e2  4620              MOV      r0,r4                 ;241
0002e4  f7fffffe          BL       tx_char_add
0002e8  4605              MOV      r5,r0                 ;241
0002ea  2d00              CMP      r5,#0                 ;242
0002ec  d001              BEQ      |L1.754|
0002ee  4628              MOV      r0,r5                 ;244
0002f0  e7dd              B        |L1.686|
                  |L1.754|
0002f2  2000              MOVS     r0,#0                 ;247
0002f4  e7db              B        |L1.686|
;;;249    
                          ENDP

                  ble_nus_send_string PROC
;;;250    
;;;251    uint32_t ble_nus_send_string(ble_nus_t * p_nus, uint8_t * string, uint16_t length)
0002f6  b537              PUSH     {r0-r2,r4,r5,lr}
;;;252    {
0002f8  b084              SUB      sp,sp,#0x10
0002fa  4604              MOV      r4,r0
0002fc  460d              MOV      r5,r1
;;;253        ble_gatts_hvx_params_t hvx_params;
;;;254        
;;;255        if (!p_nus->is_notification_enabled)
0002fe  7da0              LDRB     r0,[r4,#0x16]
000300  2800              CMP      r0,#0
000302  d102              BNE      |L1.778|
;;;256        {
;;;257            return NRF_ERROR_INVALID_STATE;
000304  2008              MOVS     r0,#8
                  |L1.774|
;;;258        }
;;;259        
;;;260        if (length > NUS_MAX_DATA_LENGTH)
;;;261        {
;;;262            return NRF_ERROR_INVALID_PARAM;
;;;263        }
;;;264        
;;;265        memset(&hvx_params, 0, sizeof(hvx_params));
;;;266        hvx_params.handle = p_nus->rx_handles.value_handle;
;;;267        hvx_params.p_data = string;
;;;268        hvx_params.p_len  = &length;
;;;269        hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
;;;270        
;;;271        return sd_ble_gatts_hvx(p_nus->conn_handle, &hvx_params);
;;;272    }
000306  b007              ADD      sp,sp,#0x1c
000308  bd30              POP      {r4,r5,pc}
                  |L1.778|
00030a  4668              MOV      r0,sp                 ;260
00030c  8b00              LDRH     r0,[r0,#0x18]         ;260
00030e  2814              CMP      r0,#0x14              ;260
000310  dd01              BLE      |L1.790|
000312  2007              MOVS     r0,#7                 ;262
000314  e7f7              B        |L1.774|
                  |L1.790|
000316  2000              MOVS     r0,#0                 ;265
000318  9000              STR      r0,[sp,#0]            ;265
00031a  9001              STR      r0,[sp,#4]            ;265
00031c  9002              STR      r0,[sp,#8]            ;265
00031e  9003              STR      r0,[sp,#0xc]          ;265
000320  89a1              LDRH     r1,[r4,#0xc]          ;266
000322  4668              MOV      r0,sp                 ;266
000324  8001              STRH     r1,[r0,#0]            ;266
000326  9503              STR      r5,[sp,#0xc]          ;267
000328  a806              ADD      r0,sp,#0x18           ;268
00032a  9002              STR      r0,[sp,#8]            ;268
00032c  2101              MOVS     r1,#1                 ;269
00032e  4668              MOV      r0,sp                 ;269
000330  7081              STRB     r1,[r0,#2]            ;269
000332  8aa0              LDRH     r0,[r4,#0x14]         ;271
000334  4669              MOV      r1,sp                 ;271
000336  dfa6              SVC      #0xa6                 ;271
000338  e7e5              B        |L1.774|
                          ENDP

00033a  0000              DCW      0x0000
                  |L1.828|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  9ecadc24          DCB      0x9e,0xca,0xdc,0x24
000004  0ee5a9e0          DCB      0x0e,0xe5,0xa9,0xe0
000008  93f3a3b5          DCB      0x93,0xf3,0xa3,0xb5
00000c  0000406e          DCB      0x00,0x00,0x40,0x6e

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\ble_serv\\ble_nus.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_ble_nus_c_5b06b83c____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_ble_nus_c_5b06b83c____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_ble_nus_c_5b06b83c____REVSH|
#line 130
|__asm___9_ble_nus_c_5b06b83c____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
